{
    "astropy__astropy-11693": {
        "input_bounce": false,
        "trace": "The report clearly states the bug, shows the exact exception and stack trace, provides minimal reproducible example code, system details, and even the user\u2019s desired workaround (quiet=True) and expected outcome. There\u2019s no ambiguity about what needs to be done (catch or suppress the NoConvergence error or expose a \u201cquiet\u201d option in the plotting API), so it\u2019s well specified for someone to implement a fix or feature."
    },
    "astropy__astropy-12544": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (automatic masking of NaN values in Table.read), why that is problematic for pipeline code, and proposes a specific feature/API change (e.g. a mask=False keyword on Table.read) to disable that behavior. It\u2019s straightforward to implement and test, so the spec is sufficient for a meaningful solution."
    },
    "astropy__astropy-12825": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, the exact error traceback, the expected vs. actual behavior, and system information. It is clear that when grouping on a Table with a SkyCoord column, aggregate() tries to call .groups on each element, which fails. The desired behavior (skip non-aggregable columns or provide meaningful aggregation for SkyCoord) is unambiguous. This is well-specified and ready for implementation."
    },
    "astropy__astropy-12842": {
        "input_bounce": false,
        "trace": "The report clearly describes what changed (strict dtype check in ECSV v1.0), shows how to reproduce it with code and error output, and even provides the relevant header snippet. It states the expected behavior and suggests a specific fix (allow datetime64). All the context and reproduction steps are there, so it\u2019s well-specified."
    },
    "astropy__astropy-12880": {
        "input_bounce": false,
        "trace": "The issue clearly describes the regression (ECSV strict type check blocking datetime64), includes the failing code path, error message, reproduction steps, and even points to the commit/line of code. It\u2019s straightforward to implement a fix (e.g. allow datetime64 in ECSV_DATATYPES), so it\u2019s well-specified."
    },
    "astropy__astropy-12891": {
        "input_bounce": false,
        "trace": "The issue clearly states that Quantity instances don\u2019t currently accept the `where` argument in their `.mean` (and related reduction) methods, identifies the NumPy version where `where` was introduced, and proposes adding support. While it doesn\u2019t lay out exact implementation details or tests, the request and desired behavior are unambiguous and provide enough context for a developer to begin work. Hence it is reasonably specified."
    },
    "astropy__astropy-12907": {
        "input_bounce": false,
        "trace": "The report gives concrete code examples, clearly shows actual vs expected output, and identifies a specific behavior (nested CompoundModels) where separability_matrix falls short. There\u2019s enough context to reproduce the problem and define a correct outcome, so the issue is well-specified."
    },
    "astropy__astropy-12962": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior, the gap (no way to convert CCDData to an ImageHDU), gives motivating examples and parallels to existing Table\u2192BinTableHDU APIs, and even proposes concrete interface options. That makes it straightforward to implement and test a solution."
    },
    "astropy__astropy-13032": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug with concrete code snippets, shows actual vs. expected output, and isolates the condition (ignoring \u201cx\u201d works incorrectly but ignoring \u201cy\u201d works). It\u2019s reproducible, version-tagged, and specifies the desired behavior, so a contributor can jump straight into a fix."
    },
    "astropy__astropy-13033": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, shows expected vs actual behavior, provides a minimal reproducible code example, and outlines the desired exception message. There is no ambiguity about what needs to change (raise a clear \u201cmissing required column\u201d error), so it is well specified."
    },
    "astropy__astropy-13068": {
        "input_bounce": false,
        "trace": "The issue clearly describes the specific problem (loss of precision round-tripping between ISO and JD formats), provides concrete example code, inputs, and the observed vs. expected outputs, and states the desired outcome (getting back the original ISO string). That makes it well-specified for a meaningful solution."
    },
    "astropy__astropy-13075": {
        "input_bounce": false,
        "trace": "The issue clearly asks for registering an \u201chtml\u201d output format for `Cosmology.write`, points to existing I/O examples and docs, and even outlines a rough API (`write_html()` calling `to_table()`, formatting with MathJax, then `QTable.write(..., format='html')`). While some implementation details (exact HTML/MathJax styling, Parameter metadata slots) will need filling in, a developer familiar with Astropy\u2019s I/O registry can make a sensible interpretation and proceed. Hence it\u2019s reasonably specified."
    },
    "astropy__astropy-13132": {
        "input_bounce": true,
        "trace": "The description is really just a stub PR template with a single-hearted goal (\u201cadd __array_func__ for Time\u201d) but no detailed spec on which numpy functions to support, how Time objects should behave under array functions, nor any concrete design or examples beyond linspace. It\u2019s unclear what the API contract is, what edge cases to handle, or what tests to write, so there\u2019s too much ambiguity to start coding a reliable solution."
    },
    "astropy__astropy-13158": {
        "input_bounce": false,
        "trace": "The issue gives a clear description of the bug (model evaluation with MagUnit parameters fails), a minimal reproducer, the full traceback, the suspect code location, and expected behavior. That is sufficient detail to start coding a fix, so it\u2019s WELL_SPECIFIED."
    },
    "astropy__astropy-13234": {
        "input_bounce": false,
        "trace": "The report includes a concrete, minimal repro with code, shows the exact traceback and pinpoints that having a field named \u201cname\u201d in a structured column breaks the ECSV round\u2010trip. It suggests exactly where in the serialization machinery to look (in serialize.py) and even sketches a possible tweak to the YAML format. While it doesn\u2019t spell out every line of the patch, the bug, its cause, and a fix direction are clear. Thus it\u2019s reasonably specified for someone familiar with the Astropy serialization code to implement a solution."
    },
    "astropy__astropy-13236": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the exact code snippet to change, outlines the precise behavior now and in future versions (5.1 and 5.2), and specifies adding a FutureWarning and later removing the clause. The scope and implementation steps are explicit, so it\u2019s well-specified."
    },
    "astropy__astropy-13306": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the bug, minimal reproducible code, the exact traceback, and system details. It\u2019s obvious that vstack should not throw a casting error when one table has a structured\u2010dtype column that the other lacks. A developer can run the snippet, see the failure, and work out how vstack should fill in missing structured fields, so it\u2019s well specified."
    },
    "astropy__astropy-13390": {
        "input_bounce": true,
        "trace": "The issue simply dumps a set of failing tests under NumPy 1.23.0rc3 without describing the intended behavior, root cause analysis, or specific change required. There is no clear description of what to fix in the code (e.g., how _compare should handle mixed dtype comparisons or which tests should be updated). As provided, it\u2019s ambiguous where in the code to apply a patch or what the correct comparison semantics should be. Hence it\u2019s too vague to implement a meaningful solution."
    },
    "astropy__astropy-13398": {
        "input_bounce": false,
        "trace": "The issue gives a clear motivation, a concrete description of what\u2019s wrong with the current implementation, and even a working code sketch (with tests) of the proposed transforms. The desired API changes (ITRS\u2194AltAz/HADec staying in ITRS, adopting output obstime, topocentric offset, etc.) are unambiguous. It\u2019s straightforward to spin this up into a PR, add optional refraction, integrate into Astropy\u2019s transform graph, and update documentation and tests."
    },
    "astropy__astropy-13404": {
        "input_bounce": false,
        "trace": "The issue clearly describes what\u2019s broken (printing masked structured arrays), shows expected vs. actual behavior, and includes a minimal reproducer. Although it doesn\u2019t show the exact error message, with codebase access one can reproduce and identify where `_array2string` needs to be extended for structured dtypes. It\u2019s not fully prescriptive on the fix, but it\u2019s actionable."
    },
    "astropy__astropy-13453": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, provides minimal reproducible code, expected vs actual behavior, and system details. It\u2019s straightforward to understand what change is needed (have the HTML writer respect the `formats` argument), so it\u2019s well-specified."
    },
    "astropy__astropy-13462": {
        "input_bounce": false,
        "trace": "The issue clearly shows a failing test, the exact lines of code involved, reproducible input values, and the expected symmetric behavior of the two_sum function. A developer with full access to the codebase can locate the two_sum implementation and adjust its algorithm to ensure the error term is computed consistently regardless of argument order. No further clarification is needed to attempt a fix."
    },
    "astropy__astropy-13469": {
        "input_bounce": false,
        "trace": "The report clearly lays out the bug (ValueError for dtype=object in Table.__array__), the root cause (the dtype check), and the desired change (allow dtype=object so lists of Tables can become object arrays). While implementation details and tests would need to be filled in, the specification is concrete enough to drive a PR. Hence it is reasonably specified."
    },
    "astropy__astropy-13477": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, a clear statement of expected vs. actual behavior, and the precise error encountered. It\u2019s unambiguous what the user wants (the `==` operator on a `Frame` vs a `SkyCoord` with identical data to return a boolean instead of raising), so you could confidently jump into the codebase to implement and test support for comparing a frame and a SkyCoord."
    },
    "astropy__astropy-13579": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clearly describes current vs expected behavior for both unsliced and sliced WCS, provides environment details, and isolates the problem to SlicedLowLevelWCS.world_to_pixel. It\u2019s obvious what success looks like (matching the unsliced behavior), so it\u2019s well-specified."
    },
    "astropy__astropy-13668": {
        "input_bounce": true,
        "trace": "The report shows crashes in wcslint when invoking WCS on certain valid FITS headers and provides example files and error messages, but it does not clearly specify what the desired fix or change should be\u2014whether to adjust how wcslint calls WCS, to catch specific exceptions, or to modify WCS internals to avoid malloc errors. There\u2019s no concrete proposal or acceptance criteria for the patch, leaving multiple possible interpretations of a \u201csuccessful solution.\u201d"
    },
    "astropy__astropy-13745": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (float32 \u03c0/2 slightly exceeding the \u00b190\u00b0 bounds in a strict float64 check), includes a minimal reproducible example, system details, and an expected behavior (allow the float32 value via a relaxed/tolerance check). The scope and goal are unambiguous and actionable in the Astropy codebase."
    },
    "astropy__astropy-13803": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (float32 \u03c0/2 slightly exceeding the \u00b190\u00b0 bounds in a strict float64 check), includes a minimal reproducible example, system details, and an expected behavior (allow the float32 value via a relaxed/tolerance check). The scope and goal are unambiguous and actionable in the Astropy codebase."
    },
    "astropy__astropy-13838": {
        "input_bounce": false,
        "trace": "The report includes a minimal, self-contained example that produces the error, shows the expected vs. actual behavior, provides the full traceback and environment details, and clearly states the desired outcome. A developer can reproduce and reason about the fix, so it\u2019s well specified."
    },
    "astropy__astropy-13933": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, provides a minimal reproducible example (with code), shows the expected versus actual behavior, and includes environment details. It\u2019s easy to verify and know when it\u2019s fixed, so it\u2019s well-specified."
    },
    "astropy__astropy-13977": {
        "input_bounce": false,
        "trace": "The issue comes with a clear minimal reproducible example, describes the unwanted ValueError path, and explicitly states the desired change (return NotImplemented in __array_ufunc__ when units are incompatible). While you\u2019d still need to figure out the exact try/catch placement and add tests, the request and scope are clear and implementable."
    },
    "astropy__astropy-14096": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clearly describes the unexpected versus expected behavior, and pinpoints the source (__getattr__ in SkyCoord) needing adjustment. It\u2019s straightforward to implement a fix so that missing attributes inside properties raise correctly. Therefore it is well-specified."
    },
    "astropy__astropy-14182": {
        "input_bounce": false,
        "trace": "The issue clearly describes the missing feature (support for the `header_rows` parameter in the RestructuredText writer), shows example code and the resulting error, and notes how the fixed-width writer already handles it. It\u2019s obvious what needs to be implemented to resolve the issue."
    },
    "astropy__astropy-14253": {
        "input_bounce": true,
        "trace": "This issue is essentially a design discussion asking for opinions on when to propagate the `info` attribute for `Quantity` objects. There\u2019s no concrete list of required behaviors, no clear decision or scope, no code pointers or test cases to drive an implementation, and it leaves key terms like \u201creasonable\u201d undefined. As a result it\u2019s too vague to turn into a precise set of changes without further clarification."
    },
    "astropy__astropy-14295": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example (header dict + code), clear expected vs. actual behaviour, steps to reproduce, system details, and even a specific culprit function (_fix_scamp) to remove.  That makes it straightforward to write a PR to restore PV handling when SIP is present, so it is well-specified."
    },
    "astropy__astropy-14309": {
        "input_bounce": false,
        "trace": "The report includes a clear error stack trace, minimal reproducible example, context on when it started failing (the mentioned commit), and links to CI failures. It\u2019s straightforward to locate the faulty code in identify_format and implement a fix to guard against an empty args tuple. Therefore the issue is well-specified."
    },
    "astropy__astropy-14365": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (ascii.qdp parser only accepts uppercase commands), the desired behavior (case-insensitive command matching), provides a minimal reproducible example, expected outcome, and environment details. There\u2019s a straightforward interpretation of what needs to change in the code (make command matching case-insensitive), so it\u2019s well-specified."
    },
    "astropy__astropy-14369": {
        "input_bounce": false,
        "trace": "The issue clearly describes the incorrect behavior when parsing composite CDS units, provides the exact input format, expected vs. actual output, steps to reproduce, and environment details. There is no ambiguity about what needs to be fixed."
    },
    "astropy__astropy-14371": {
        "input_bounce": false,
        "trace": "The request is straightforward: modify the existing is_O3 function (link and line numbers provided) to accept a user-specified absolute tolerance (atol) or, by default, derive that tolerance from the matrix\u2019s dtype (e.g. via numpy.finfo). It clearly pinpoints which magic constant (1e-15) to replace, where to change the code, and what behavior is expected, so a concrete implementation can be written without further clarification."
    },
    "astropy__astropy-14379": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior of Angle.to_string and the desired change (adding a space or making space-inclusion configurable/default). The feature request is concrete and actionable, even if some minor details (keyword name, default behavior) would need to be decided. Overall it is sufficiently specified to implement a solution."
    },
    "astropy__astropy-14413": {
        "input_bounce": false,
        "trace": "The ticket clearly identifies a formatting inconsistency in the .to_string outputs for unicode/console formats, gives concrete examples of the bad outputs, and defines the one\u2010sentence expected behavior (\u201cshould never start with a space\u201d). Although it doesn\u2019t spell out every intermediate spacing rule in prose, the examples make the intended fix obvious (strip off any leading whitespace and normalize the space between number and unit). This is enough detail to go implement and test a fix."
    },
    "astropy__astropy-14439": {
        "input_bounce": false,
        "trace": "The issue clearly states the current behavior (Astropy\u2019s FITS\u2010style unit formatting gives \u201cbeam-1 Jy\u201d) and the desired behavior (\u201cJy/beam\u201d), explains why the current form is problematic, and even points to related upstream tickets. There is no ambiguity about what needs to be changed\u2014just the formatting logic for the FITS output of Jy/beam\u2014so a developer can jump straight to implementing a special case or adjusting the formatter. "
    },
    "astropy__astropy-14508": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example, points exactly at the offending function (`_format_float`), shows how the current formatting expands a simple float and truncates the comment, and even suggests the intended change (try Python\u2019s built-in `str(value)` first, falling back only if it exceeds 20 chars). All inputs, outputs, and the desired behavior are clear, so this is WELL_SPECIFIED."
    },
    "astropy__astropy-14528": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (zero-dimensional arrays leading to corrupt FITS files), provides a minimal reproducible example, states the expected behavior (no silent corruption), and lists environment details. It is straightforward to implement validation (e.g. reject or reshape 0-D data) or emit an error, so it is well specified."
    },
    "astropy__astropy-14539": {
        "input_bounce": false,
        "trace": "The report clearly states the erroneous behavior (identical files being marked different), provides a minimal reproduction case with code, and defines the expected behavior (no differences when comparing a file to itself). The suspected cause (VLA handling) further narrows the scope. All needed details to attempt a fix are present."
    },
    "astropy__astropy-14566": {
        "input_bounce": false,
        "trace": "The issue includes a clear description of the problem, example code to reproduce it, and environment details. While it omits the exact error traceback, it still provides enough context to reproduce and debug the discrepancy between the \u201cdecimalyear\u201d and \u201cjyear\u201d formats on a MaskedColumn. Thus it\u2019s reasonably specified for a meaningful attempt."
    },
    "astropy__astropy-14578": {
        "input_bounce": true,
        "trace": "The report clearly describes the error condition and shows reproducible code, but it doesn\u2019t specify which behavior is desired (string fallback or better error), leaving the solution direction ambiguous."
    },
    "astropy__astropy-14590": {
        "input_bounce": true,
        "trace": "The issue simply reports a TypeError in masked-array support for np.fix under numpy-dev and notes a TODO comment about allowing writes to unmasked output. It does not specify exactly what behavior is expected, how to handle the 'where' keyword, or what the correct API contract is, so it\u2019s too vague to craft a precise fix without further clarification."
    },
    "astropy__astropy-14598": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the bug, minimal reproducible code, expected behavior, and environment details. A developer can reproduce the failure cases, identify the code paths in fits.Card.__str__/fromstring, and implement a fix. This is well-specified."
    },
    "astropy__astropy-14701": {
        "input_bounce": false,
        "trace": "The requirement to add a \u2018latex\u2019 format to Cosmology.write and implement a write_latex method is clear. The issue points to existing examples and docs, suggests the method flow (to_table \u2192 format labels \u2192 QTable.write), and indicates how to format parameters. There are minor details (exact styling, API signature) that can be sensibly inferred, so the task is reasonably specified."
    },
    "astropy__astropy-14702": {
        "input_bounce": false,
        "trace": "The issue clearly states what\u2019s wrong (VOTable and astropy Table share the same repr) and exactly what change is desired (override the VOTable Table __repr__ to display e.g. <VOTable length=...>). That directly points to modifying the repr in astropy.io.votable.tree.Table, so it\u2019s well-specified for implementation."
    },
    "astropy__astropy-14938": {
        "input_bounce": false,
        "trace": "The request clearly identifies the missing format label (\u201cascii.latex\u201d) and what needs to be done (register the existing Cosmology IO write method under that alias). While it doesn\u2019t spell out the exact file and line numbers, for anyone familiar with the Cosmology I/O registry it\u2019s a straightforward change. Thus it\u2019s reasonably specified."
    },
    "astropy__astropy-14966": {
        "input_bounce": false,
        "trace": "The issue clearly describes the unexpected behavior (group keys losing units), provides minimal reproducible code, shows current vs. desired output, and lists environment versions. It\u2019s straightforward to implement a fix in QTable.group_by to retain units on Quantity columns."
    },
    "astropy__astropy-14991": {
        "input_bounce": false,
        "trace": "The report clearly identifies the file (`w0wzcdm.py`), the exact line (205), and the intended correction (flip the sign in the exponent). While it lacks a runnable example or tests, there\u2019s a straightforward change to implement and verify (update `exp(-3.0 * self._wz * z)` to `exp(3.0 * self._wz * z)`). Thus it\u2019s interpretable and actionable without further clarification."
    },
    "astropy__astropy-14995": {
        "input_bounce": false,
        "trace": "The issue clearly describes a regression in v5.3 vs v5.2, gives minimal reproducible code, shows the exact error, and states expected behavior. While it doesn\u2019t point to the specific source file or internal function names, it\u2019s straightforward for someone familiar with NDDataRef\u2019s mask\u2010handling to locate and fix the logic. Thus it\u2019s reasonably specified."
    },
    "astropy__astropy-6938": {
        "input_bounce": false,
        "trace": "The report pinpoints a specific code snippet, describes the expected vs actual behavior (chararray.replace isn\u2019t in-place), and identifies the file to change (fitsrec.py). While it doesn\u2019t provide a test case or the exact expected output, it\u2019s clear what needs fixing (assign the replace result or use an in-place method), making it suitable for a targeted patch."
    },
    "astropy__astropy-7008": {
        "input_bounce": false,
        "trace": "The request clearly defines the desired feature\u2014a context manager to temporarily swap in a different version set of constants (e.g. astropyconst13) for the code block within the with-statement. While it doesn\u2019t spell out edge cases (nesting behavior, threading, error handling), the core API and behavior are unambiguous and can be implemented in a straightforward way. Thus it\u2019s reasonably specified for a first pass at a solution."
    },
    "astropy__astropy-7166": {
        "input_bounce": false,
        "trace": "The report clearly identifies the root issue (the metaclass only checks inspect.isfunction and skips properties) and what behavior is broken (docstring inheritance for @property). While it doesn\u2019t show the full code, it\u2019s straightforward to locate the inspect.isfunction check in the metaclass and extend it to also recognize properties (e.g. isinstance(attr, property) or using inspect.isdatadescriptor). That\u2019s enough to implement a targeted fix."
    },
    "astropy__astropy-7218": {
        "input_bounce": false,
        "trace": "The issue clearly states that HDUList.copy() currently returns a native Python list (inherited from list.copy) and that it should instead return an HDUList. The desired behavior is unambiguous (override or implement a .copy() on HDUList to return an HDUList), and reproducing the bug is straightforward. This is sufficient for a meaningful PR to fix the bug."
    },
    "astropy__astropy-7336": {
        "input_bounce": false,
        "trace": "The report includes a clear summary, environment details, a minimal reproducible example, the exact error traceback, and even a suggested fix. It is obvious what the decorator should do differently (skip unit conversion when return annotation is None), so a meaningful solution can be implemented."
    },
    "astropy__astropy-7441": {
        "input_bounce": false,
        "trace": "The request clearly identifies a missing feature (a .to_timedelta method on TimeDelta returning datetime.timedelta, and optionally .to_datetime64/.to_timedelta64 for numpy types) and the expected behavior is straightforward to implement from the existing internal representations. While API details (handling of arrays vs scalars) may need design, the core requirement is unambiguous and actionable."
    },
    "astropy__astropy-7606": {
        "input_bounce": false,
        "trace": "The issue clearly shows a reproducible code snippet, the current erroneous behavior, and the expected behavior (x == None should return False rather than raising). It\u2019s obvious what change is needed (handle None in __eq__), so it\u2019s well-specified."
    },
    "astropy__astropy-7671": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates the bug (LooseVersion failing on mixed int/str segments), provides examples, and even hints that pkg_resources.parse_version (or an equivalent) works. While it doesn\u2019t spell out the exact API change, there\u2019s a sensible interpretation: update minversion to use a robust version parser (reintroduce pkg_resources.parse_version or switch to packaging.version.parse), handle \u2019dev\u2019 suffixes, and add tests. Thus it\u2019s reasonably specified for a PR."
    },
    "astropy__astropy-7737": {
        "input_bounce": false,
        "trace": "The issue clearly states the problem (biweight_location returns NaN on zero-variance input), shows a concrete example, diagnoses the cause (0/0 division when MAD=0), and proposes an expected behavior (return the median, e.g., 1 for a constant array). The requirements and success criteria are unambiguous."
    },
    "astropy__astropy-7973": {
        "input_bounce": true,
        "trace": "The issue is largely a high-level design discussion and vote call rather than a concrete specification of changes. It outlines two broad approaches but provides no detailed requirements, acceptance criteria, or implementation steps. As written, it\u2019s too vague to start coding a solution without further clarification."
    },
    "astropy__astropy-8005": {
        "input_bounce": false,
        "trace": "The issue clearly identifies an inconsistency between how the thermodynamic\u2010temperature and with_H0 equivalencies pull their defaults (Planck15.Tcmb0 vs. default_cosmology.get().H0) and calls for aligning them for the 3.1 release. While it doesn\u2019t hand you the exact lines to change or fully decide whether to shift the default cosmology or just swap the Tcmb source, there is a single sensible interpretation: make the thermodynamic\u2010temperature equivalency use default_cosmology.get().Tcmb0 (or else update the default cosmology to Planck15 and then point both defaults there). That gives enough direction to implement and test a fix."
    },
    "astropy__astropy-8263": {
        "input_bounce": false,
        "trace": "The report clearly shows what\u2019s broken (unit conversions of s/m in Astropy 3.1), where it was introduced (a specific commit), and the failing tests. However, it doesn\u2019t actually spell out the desired corrective action (e.g. pinning Astropy to <3.1 vs. a code\u2010side workaround), so you have to infer a fix. It\u2019s actionable but not fully constrained, making it reasonably specified rather than rock\u2010solid."
    },
    "astropy__astropy-8339": {
        "input_bounce": false,
        "trace": "The bug is precisely described, including stack trace, code location, and the exact patch needed (adding an else branch to assign ncp_prior). All necessary details are provided for a straightforward fix."
    },
    "astropy__astropy-8519": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example with input code, observed behavior, error messages, and a clear statement of the expected behavior (that operations on two ABmag quantities should yield an ABmag result). The scope of the change\u2014preserving the magnitude system when adding or subtracting ABmag Quantities\u2014is unambiguous. This is well-specified for a meaningful fix."
    },
    "astropy__astropy-8707": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the methods (`Header.fromstring` and `Card.fromstring`), the problem (they don\u2019t accept Python 3 bytes even though they should), and the intended behavior (accept both unicode and bytes, treating bytes as ASCII). The scope and fix are well defined, so one can directly implement and test the change without further clarification."
    },
    "astropy__astropy-8747": {
        "input_bounce": true,
        "trace": "The issue statement is very high-level and lacks specifics: there\u2019s no example of the current failure, no details on the expected behavior with Quantity objects, no pointers to where in the code or tests to modify, etc. It\u2019s unclear what \u201cworks properly\u201d means or what changes are needed, making it too vague to act on without further clarification."
    },
    "astropy__astropy-8872": {
        "input_bounce": false,
        "trace": "The report clearly shows a reproducible difference in behavior for float16 versus other float types when creating a Quantity, includes input/output examples, expected versus actual dtype, and even references a related issue. It\u2019s evident that float16 should be preserved rather than upcast, so there is enough detail to implement and test a fix."
    },
    "django__django-10097": {
        "input_bounce": false,
        "trace": "The issue clearly states what\u2019s wrong (URLValidator accepts unencoded \u201c:\u201d, \u201c@\u201d, \u201c/\u201d in userinfo), cites the RFC reference, gives a concrete invalid example, and even points to existing tests and a PR for guidance. The required change\u2014update the validation regex to reject those characters in the username/password\u2014is unambiguous, making the issue well-specified."
    },
    "django__django-10213": {
        "input_bounce": false,
        "trace": "The request clearly specifies a new command-line flag (--force-colors), its intended behavior (override Django\u2019s default color auto-detection when piping output), real-world use case, and a precedent in other Unix commands. An implementer can identify where to hook into Django\u2019s management command color logic, mirror the existing --no-colors handling, and add the new flag, its parsing, and documentation. The requirements are concrete and actionable."
    },
    "django__django-10301": {
        "input_bounce": true,
        "trace": "The report gives only a minimal code snippet and an error, but doesn\u2019t specify the desired behavior (e.g. should NULL ** NULL return NULL?), the SQLite/Django versions, or any context around how to handle NULLs in custom SQL functions. It\u2019s unclear what the expected outcome is or what constraints apply. As written, it\u2019s too ambiguous to implement a precise fix."
    },
    "django__django-10316": {
        "input_bounce": false,
        "trace": "The issue clearly describes the failure case (using settings.configure() causes an improper exception) and pinpoints the code path (diffsettings unconditionally calls settings._setup()). It also proposes the precise check to add (if not settings.configured) so that _setup() is only invoked when needed. This gives enough detail to implement and test the fix."
    },
    "django__django-10390": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (pytz raising AmbiguousTimeError on Trunc()), shows a reproducible test case, and states the desired behavior (allow passing an is_dst flag into Trunc so make_aware can disambiguate instead of erroring). It\u2019s straightforward to add an optional keyword argument to Trunc and forward it through convert_value to timezone.make_aware. All needed context and a concrete change plan are provided, so it\u2019s reasonably specified for a PR."
    },
    "django__django-10426": {
        "input_bounce": false,
        "trace": "The issue clearly states that the Django management command \u2018showmigrations\u2019 is missing the same app_label validation that has already been added to other commands (per issues #29469, #29518, #29506). It\u2019s obvious what needs to be done: replicate the existing validation logic in showmigrations (likely by calling the same validation helper). A Django contributor can locate the command\u2019s code, see how other commands validate the app_label, and insert the same checks here. This is sufficiently and precisely specified."
    },
    "django__django-10531": {
        "input_bounce": false,
        "trace": "The report clearly states the current vs expected behavior in the admin history log, gives a concrete example (pub_date vs date published), and indicates where to apply the fix (use field.verbose_name instead of field name). It\u2019s straightforward to implement and verify, so it\u2019s well-specified."
    },
    "django__django-10554": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact steps to trigger the error, the full traceback, and a clear statement of the expected behavior (that dropping the ordering on the union should not later blow up when repr-ing or re-iterating). There\u2019s no ambiguity about what\u2019s broken or what the fix should achieve, so the issue is well\u2010specified."
    },
    "django__django-10606": {
        "input_bounce": false,
        "trace": "The report clearly describes the error scenario, reproduction steps, the exact exception and missing parameter, and even includes a PR and demo repo. It\u2019s straightforward to implement the fix (add the missing parameter to ForeignObjectRel.get_choices), so the issue is well-specified."
    },
    "django__django-10643": {
        "input_bounce": false,
        "trace": "The issue clearly describes the specific problem (Oracle backend UUIDField icontains lookup fails when the query string includes dashes), the expected behavior (search by displayed UUID with or without dashes), and the context (Django 2.1 admin search). The desired change is well scoped\u2014normalize dash presence inside the icontains lookup for UUIDFields\u2014so a developer can directly implement or patch the lookup logic."
    },
    "django__django-10737": {
        "input_bounce": false,
        "trace": "The issue clearly states that all FieldError exceptions in django/db/models/sql/compiler.py should include the name of the offending field in their messages. While it doesn\u2019t enumerate every raise-site, it gives a focused file and a straightforward goal\u2014search for FieldError raises there and augment their messages. This leaves some implementation detail to the developer (which sites to update, message format), but the overall requirement is sensible and actionable."
    },
    "django__django-10853": {
        "input_bounce": false,
        "trace": "The issue clearly describes the missing window\u2010function support in older SQLite versions, provides reproducer code, the Django versions/branches affected, and the desired behavior (an explicit, documented error rather than an obscure OperationalError). It\u2019s evident where and how to implement version checks and raise a proper NotSupportedError. Therefore it\u2019s well-specified."
    },
    "django__django-10880": {
        "input_bounce": false,
        "trace": "The bug report clearly states the Django version (2.2), the failing SQL pattern, and the root cause (missing space between DISTINCT and CASE in the generated SQL). It\u2019s straightforward to reproduce and fix by inserting the missing space, so it\u2019s well-specified."
    },
    "django__django-10904": {
        "input_bounce": false,
        "trace": "The issue clearly states what needs to be done\u2014search for all uses of the legacy OSError aliases (IOError, EnvironmentError, WindowsError, mmap.error, socket.error, select.error, and SMTPException) and replace them with OSError\u2014but it doesn\u2019t spell out the precise files or call sites. You can sensibly interpret and implement a global codemod or manual refactor, but some details (e.g. test adjustments, exact scope) will need to be filled in."
    },
    "django__django-10910": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the incorrect behavior, exact versions of Django/psycopg2/Postgres, a minimal model, step-by-step repro with both good (pytz) and bad (datetime.timezone) cases, and references the relevant Postgres docs. There\u2019s no ambiguity about what\u2019s broken or how to verify a fix. This is WELL_SPECIFIED."
    },
    "django__django-10914": {
        "input_bounce": false,
        "trace": "The request clearly states the desired change (default FILE_UPLOAD_PERMISSIONS should be 0o644 and a warning added to the documentation) and provides enough context about the permissions inconsistency to guide an implementation. While you\u2019ll need to determine the exact code locations and add tests/docs, the scope and requirements are sufficiently defined for a meaningful PR."
    },
    "django__django-10939": {
        "input_bounce": true,
        "trace": "The report outlines a bug (MediaOrderConflictWarning and inlines.js loading before jQuery when using custom widgets, inlines, and filter_horizontal), but it lacks concrete reproduction steps, code samples, Django version info, and a clear statement of the expected behavior. Without these details it\u2019s unclear how to reproduce the problem or what the precise fix should be."
    },
    "django__django-10973": {
        "input_bounce": true,
        "trace": "The issue gives only a high-level suggestion (\u201cuse subprocess.run and PGPASSWORD\u201d) without showing the existing code to change, where in django.db.backends.postgres.client it lives, what behavior to preserve, or what tests to add. You can infer the goal but there\u2019s insufficient detail to craft a precise PR without more context."
    },
    "django__django-10989": {
        "input_bounce": false,
        "trace": "The report includes a clear error trace, reproduction steps, the exact character causing the issue (U+2026), and even the specific line in runserver where the ellipsis is used. The fix\u2014replacing the horizontal ellipsis with '...'\u2014is unambiguous. A PR can directly search for and replace all occurrences of \u201c\u2026\u201d in output strings."
    },
    "django__django-10997": {
        "input_bounce": false,
        "trace": "The issue clearly defines the feature request (adding an applied\u2010datetime column to the showmigrations output), explains the use case (switching branches, identifying recently applied migrations), and even references an initial implementation approach. While minor details (exact date formatting or backport policies) remain to be decided, there\u2019s enough here to draft a working PR. It\u2019s not a fully detailed spec with every format nailed down, but it\u2019s sufficiently scoped to start coding."
    },
    "django__django-10999": {
        "input_bounce": false,
        "trace": "The report clearly identifies the exact regex in django/utils/dateparse, explains why negative durations aren\u2019t matching (the lookahead lacks `-?`), and even provides the corrected pattern. This is sufficient to implement the fix and add corresponding tests."
    },
    "django__django-11003": {
        "input_bounce": false,
        "trace": "The report clearly describes the actual vs expected behavior, the form setup (ModelChoiceField with `disabled=True` and an initial value), the error seen on submit, and even points to a related Django bug. While we don\u2019t get a full code snippet or exact API-level instructions on how to fix it, the required change (so that a disabled field with a valid initial choice doesn\u2019t raise a validation error) is clear enough to proceed. There\u2019s enough context to produce a reasonable patch or workaround, so this is REASONABLY_SPECIFIED."
    },
    "django__django-11019": {
        "input_bounce": false,
        "trace": "The report gives a concrete minimal example (3 widgets with specific JS dependencies), shows the current wrong result and warning, and states the desired behavior (correct ordering without spurious warnings). It clearly identifies where in the code (widgets.py) the merge logic and warning are happening. That makes it actionable: implement a proper topological merge of multiple Media objects and emit warnings only on true cycle/contradiction. Therefore it\u2019s well-specified."
    },
    "django__django-11057": {
        "input_bounce": false,
        "trace": "The issue clearly describes the environment (Django 2.1 \u2192 2.2b1), the custom subclassed middleware, the exact error code (admin.E408), and the observed behavior change. It\u2019s obvious that the admin middleware check is too strict and should allow subclasses of AuthenticationMiddleware. The request is specific enough to implement a fix (modify the admin check to use isinstance or issubclass logic), so it\u2019s well-specified."
    },
    "django__django-11062": {
        "input_bounce": false,
        "trace": "The reporter provides the model definition, the exact queryset code they\u2019re running, the full traceback with the SQL error, and the specific Django and database versions. They describe the expected behavior versus the actual error and give a minimal reproducible example. That makes it well-specified and actionable."
    },
    "django__django-11066": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the problematic code location, describes the observed behavior and context (dynamic DB router, missing default DB), and explicitly states the required change (add using=db to the save call). A developer can directly implement and test this fix without further clarification."
    },
    "django__django-11070": {
        "input_bounce": false,
        "trace": "The issue clearly states exactly what HTML autocomplete attributes need to be added (username, email, current-password, new-password) and to which part of Django (contrib.auth builtin forms). It even references an existing pull request and relevant spec links, so it\u2019s straightforward to implement. There\u2019s no ambiguity about what fields or attributes are required."
    },
    "django__django-11087": {
        "input_bounce": false,
        "trace": "The reporter provides detailed reproduction steps, stack traces, the exact SQL queries issued, and even points to the specific Django ORM files and methods involved (the cascading delete in deletion.py). They clearly state the desired change (\u201conly fetch required fields\u201d for delete cascading) and why it matters, so a developer can locate the code, understand what to modify (e.g. switch from a full-object QuerySet to a .only(\u2018pk\u2019) or .values_list call), and write a targeted patch. This is sufficient to begin work on a PR."
    },
    "django__django-11088": {
        "input_bounce": false,
        "trace": "The bug is clearly described with reproduction steps (models, migrations, commands), exact traceback, Django versions, and even a proposed code change location. It\u2019s straightforward to implement and test a fix in the specified method."
    },
    "django__django-11095": {
        "input_bounce": false,
        "trace": "The request clearly states the desired API change: introduce a new ModelAdmin.get_inlines(request, obj=None) hook (defaulting to self.inlines) and refactor get_inline_instances to use it instead of copying its for\u2010loop logic. The scope and implementation approach are well defined, so one can confidently draft a patch. While one would add docs and tests, the core requirement is unambiguous."
    },
    "django__django-11099": {
        "input_bounce": false,
        "trace": "The report clearly identifies the two validators (ASCIIUsernameValidator and UnicodeUsernameValidator in contrib.auth.validators), explains the exact regex bug (use of ^\u2026$ allowing trailing newline), and even provides the precise replacement pattern (\\A\u2026\\Z). An engineer can directly implement and test this change."
    },
    "django__django-11115": {
        "input_bounce": false,
        "trace": "The user describes a clear problem (the AlreadyRegistered exception when a model is double-registered in Django admin) and a desired outcome (including more context\u2014such as which app or admin class previously registered the model\u2014to avoid manual bisecting). While the precise format of the extra details isn\u2019t fully spelled out, there\u2019s a sensible, implementable interpretation (e.g. look up the existing entry in the admin\u2019s registry and include its class or module name in the error message). Thus the issue is reasonably specified for a developer to work on a solution."
    },
    "django__django-11119": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a specific behavior: Engine.render_to_string() ignores the engine\u2019s autoescape setting by not passing it into the Context constructor. A successful solution simply needs to update render_to_string() to pass the engine.autoescape flag (and any related settings) when creating the Context. The request is concrete and unambiguous."
    },
    "django__django-11129": {
        "input_bounce": true,
        "trace": "The report describes a general scenario (updating via an F expression on an annotated field that requires a join) and the resulting confusing DatabaseError, but it doesn\u2019t include a self-contained repro or specific expected vs. actual error messages. Without the attached minimal test or clear specification of the desired unified error text, it\u2019s unclear exactly what change or behavior constitutes a successful fix."
    },
    "django__django-11133": {
        "input_bounce": false,
        "trace": "The report clearly shows the failing behavior, provides minimal reproducible code samples, and states the expected outcome. An engineer can identify that HttpResponse should accept memoryview objects (treat them as bytes) and implement the necessary conversion. Therefore it is well-specified."
    },
    "django__django-11138": {
        "input_bounce": false,
        "trace": "The report clearly describes the environment (Django settings, MySQL backend), shows exact code samples and SQL queries, points out the incorrect behavior (wrong timezone conversion in DATE lookups), references the relevant docs and source line, and specifies the expected outcome. All needed details are present for a developer to reproduce and fix the issue."
    },
    "django__django-11141": {
        "input_bounce": false,
        "trace": "The issue clearly states what needs to change (remove the obsolete __file__ check on the migrations package) and why (pkgutil.iter_modules() already handles namespace packages). It even references the exact commits/PRs involved. There\u2019s a straightforward implementation path and tests to adjust, so it\u2019s well specified."
    },
    "django__django-11149": {
        "input_bounce": false,
        "trace": "The report clearly describes a regression where users with only view permissions can still add/remove items via an admin TabularInline on an auto-created M2M through model. It gives minimal repro code and the expected behavior (inlines should be read-only for view-only users). While it doesn\u2019t spell out every testing detail, there\u2019s enough here to reproduce and implement a fix. This makes the issue reasonably specified."
    },
    "django__django-11155": {
        "input_bounce": false,
        "trace": "The issue clearly defines exactly what new settings to add (LANGUAGE_COOKIE_SECURE, LANGUAGE_COOKIE_HTTPONLY, LANGUAGE_COOKIE_SAMESITE), their default values, and where they should apply (the language cookie). It even references the existing behavior and where to hook in, so a developer can write the necessary code in the set_language view or middleware. This makes it well-specified for implementation."
    },
    "django__django-11163": {
        "input_bounce": false,
        "trace": "The issue clearly states the current behavior (fields=[] returns all fields) and the desired behavior (fields=[] should return {}). It pinpoints the exact code conditional (`if fields and f.name not in fields`) and proposes the precise change (`if fields is not None and f.name not in fields`). This is enough to implement and test the fix unambiguously."
    },
    "django__django-11166": {
        "input_bounce": false,
        "trace": "The issue clearly describes the undesired hard dependency on django.contrib.sessions in the admin app, why it\u2019s a problem (blocking alternate session backends), and even proposes a concrete implementation change (remove the INSTALLED_APPS check, add a middleware-based check using SessionMiddleware). The goal and solution approach are unambiguous and actionable."
    },
    "django__django-11169": {
        "input_bounce": false,
        "trace": "The issue clearly describes what needs to be added\u2014catching import errors (ModuleNotFoundError or ViewDoesNotExist) for custom error handlers and emitting a new system check code (urls.E008) with a specified message. While the exact code location and helpers aren\u2019t spelled out, anyone familiar with Django\u2019s check framework and the existing url checks (#29642) can locate and extend that logic. Thus, it\u2019s reasonably specified for implementation."
    },
    "django__django-11170": {
        "input_bounce": true,
        "trace": "The report describes a UnicodeDecodeError in Django\u2019s debug template, pinpoints an ellipsis character change, and offers two workarounds (reverting to three dots or explicitly opening the file with utf-8). But it never clearly states the desired fix: should Django templates be read with a forced utf-8 encoding or should the character be reverted? It also lacks reproduction steps, environment details, and a clear specification of the expected behavior. As written, it\u2019s more a question about historical intent than a concrete bug report. Therefore it\u2019s too ambiguous to implement a PR."
    },
    "django__django-11177": {
        "input_bounce": true,
        "trace": "The issue describes an intermittent autoreloader failure after upgrading to Django 2.2 but provides no concrete repro steps, environment details (host OS/inotify config), logs, or minimal example. The root cause is unclear, and it\u2019s ambiguous what change in the Django codebase must be addressed, so you can\u2019t confidently propose or implement a fix."
    },
    "django__django-11179": {
        "input_bounce": false,
        "trace": "The report pinpoints a specific bug in Django\u2019s deletion logic, references the exact file and line range, and clearly states the desired behavior (clear the instance\u2019s PK after delete when there are no related objects). While the exact code snippet and tests aren\u2019t provided, the change is easily inferable and the location is unambiguous. This is reasonably specified for a PR."
    },
    "django__django-11185": {
        "input_bounce": true,
        "trace": "The issue statement is extremely brief and lacks concrete examples, steps to reproduce the problem, details about the model hierarchy, or what specifically \u201cpreserve all parent reverse relationships\u201d entails in practice. Without sample models, expected vs. actual behavior, or more context on the partial fix in #27407, there\u2019s too much ambiguity to write a meaningful fix."
    },
    "django__django-11194": {
        "input_bounce": true,
        "trace": "The issue merely states \u201callow specifying a Feed language different from settings.LANGUAGE_CODE\u201d with no details on the API (attribute or parameter name, defaults, behavior, etc.) or examples of how it should work. There\u2019s no clear specification beyond \u201cI couldn\u2019t find a way, so here\u2019s my patch link,\u201d so a developer cannot implement a robust solution without further clarification or reviewing the linked PR. It is therefore too vague to act on directly."
    },
    "django__django-11206": {
        "input_bounce": false,
        "trace": "The issue clearly states the current behavior, shows concrete examples, and describes the desired change: when decimal_pos is provided and the value is too small to represent, always output a fixed\u2010point string of zeros rather than switch to exponential notation. While it doesn\u2019t prescribe the exact code changes, it\u2019s straightforward to locate the cutoff logic in utils.numberformat.format and adjust it, so the spec is sufficient for a meaningful solution."
    },
    "django__django-11211": {
        "input_bounce": false,
        "trace": "The issue clearly outlines model definitions, reproduction steps, and what\u2019s going wrong (GenericForeignKey prefetch returns None when the primary key is a UUID). While it lacks environment/version details, it provides enough code and steps to reproduce and understand the expected behavior, making it reasonably specified."
    },
    "django__django-11214": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (CheckConstraint with a Q(...__in=range()) keeps flipping because range is serialized to a tuple), includes a minimal reproduction repo, shows the broken migration output, and even outlines possible correct fixes. There\u2019s no ambiguity about the problem or the goal\u2014preventing spurious Remove/Add migrations\u2014so it\u2019s well-specified."
    },
    "django__django-11216": {
        "input_bounce": false,
        "trace": "The issue clearly describes what\u2019s happening (multiple hashed files accumulating), why it\u2019s a problem, and even suggests an API (a keep_intermediate_files flag on HashedFilesMixin) to control cleanup. The scope of the change is obvious: after writing the final hashed file, remove older intermediate hashes when the flag is False. While implementation details (exact code locations) aren\u2019t spelled out, the desired behavior is sufficiently defined for a meaningful PR."
    },
    "django__django-11239": {
        "input_bounce": false,
        "trace": "The issue clearly states exactly what\u2019s missing (sslcert and sslkey support in the dbshell command for PostgreSQL), shows how Django\u2019s DATABASES setting already supports these options, and points to the trivial change required (forwarding those two parameters when invoking psql). It\u2019s immediately clear where to make the change and how to verify it, so it\u2019s well-specified."
    },
    "django__django-11260": {
        "input_bounce": false,
        "trace": "The report clearly identifies the problem (inspectdb is generating a unique ForeignKey where it should use OneToOneField) and the symptom (fields.W342 warnings). While it could benefit from example schemas or code snippets, the high-level requirement\u2014update inspectdb to detect unique FKs as one-to-one relations\u2014is unambiguous. A developer familiar with inspectdb\u2019s codegen can reasonably implement and test the fix."
    },
    "django__django-11265": {
        "input_bounce": false,
        "trace": "The issue provides a concrete reproducible test case, the exact error message and stack trace, and even pinpoints the suspect function (`split_exclude`). With full access to the codebase and knowledge of Django\u2019s ORM internals, one can write a fix to carry annotations through `exclude`. This is enough information to attempt a proper solution."
    },
    "django__django-11270": {
        "input_bounce": false,
        "trace": "The request clearly identifies that the \u2018startapp\u2019 command currently only validates the app name, not the target directory name, and that invalid directory names render the app un-importable. It even suggests reusing the existing app-name validation logic. While the exact validation rules and tests need to be drawn from the existing code, there\u2019s a straightforward, sensible interpretation of what to implement. Hence it\u2019s reasonably specified."
    },
    "django__django-11276": {
        "input_bounce": false,
        "trace": "The issue clearly calls for replacing Django\u2019s custom escape implementation with the stdlib html.escape, provides rationale, links, perf data and notes the one semantic change (hex vs decimal entity). It\u2019s straightforward to implement, test and document, though you\u2019ll need to handle or explicitly accept the single\u2010quote encoding change and update tests/docs accordingly. Thus it\u2019s reasonably specified."
    },
    "django__django-11278": {
        "input_bounce": false,
        "trace": "The request clearly states what needs to be done\u2014add a system check that ensures constraint and partial index names are unique at the database scope\u2014but it leaves out the concrete location, error messaging, and specific API details. There\u2019s a sensible interpretation of where and how to implement this (e.g., in Django\u2019s checks framework), so it\u2019s not entirely vague, but it does require filling in implementation details."
    },
    "django__django-11279": {
        "input_bounce": false,
        "trace": "The request clearly defines the API change (supporting '%(app_label)s' and '%(class)s' in the name of BaseConstraint/Index), how those placeholders should be resolved (lowercased model class name and app label), and the goal (allowing named constraints in abstract models). There aren\u2019t exhaustive details on every edge case or test, but it\u2019s a straightforward feature extension that a Django contributor could implement from this description alone."
    },
    "django__django-11281": {
        "input_bounce": true,
        "trace": "The issue simply states a general goal (use typographic punctuation) without specifying the scope (which files/strings), how to apply the changes (manually, via a script or linter), or acceptance criteria. It\u2019s unclear what a complete solution would entail."
    },
    "django__django-11292": {
        "input_bounce": false,
        "trace": "The request clearly defines what\u2019s needed\u2014expose the existing `skip_checks` hook as a CLI flag for management commands\u2014though it leaves some implementation details (e.g. exactly which commands or how to register the flag in tests/docs) to the contributor\u2019s judgment. A Django core contributor can reasonably infer how to add the `--skip-checks` argument to `BaseCommand` and update relevant commands and documentation, so the spec is adequate for a meaningful PR."
    },
    "django__django-11299": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, its context (SQLite/Oracle migrations with OR/AND in CheckConstraint), includes minimal reproducible code, the generated SQL, the failure message, and the exact expected SQL. A developer can reproduce the issue and know exactly what needs to change."
    },
    "django__django-11333": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (duplicate URLResolver construction due to differing urlconf argument before and after set_urlconf), why it occurs, and even sketches a straightforward fix (normalize get_resolver\u2019s argument to settings.ROOT_URLCONF before memoization). All necessary context and intended behavior are specified for a meaningful pull request."
    },
    "django__django-11354": {
        "input_bounce": false,
        "trace": "The reporter provides a clear reproduction case with minimal models and code, identifies the root cause in Query.get_aggregation, and even suggests a precise conditional change. The desired behavior and fix are unambiguous, making this issue WELL_SPECIFIED."
    },
    "django__django-11377": {
        "input_bounce": false,
        "trace": "The issue clearly describes a crash in the deprecation warning when using F expressions in Meta.ordering, provides sample model code, the exact traceback, a hacky workaround, and even a regression test link. While the overall code context isn\u2019t shipped with the issue, it\u2019s straightforward to identify that the warning builder must stringify or repr() each ordering element correctly and generate valid .order_by() syntax. A developer can sensibly interpret and implement a solution from the information given."
    },
    "django__django-11396": {
        "input_bounce": true,
        "trace": "The report shows a runtime error when ordering by a constant annotation, but it doesn\u2019t spell out the expected SQL or desired behavior, nor give enough context (Django version, target behavior, edge cases) to directly implement a fix. There\u2019s ambiguity around how constants should be handled in ORDER BY, so it\u2019s unclear what a complete solution entails."
    },
    "django__django-11400": {
        "input_bounce": false,
        "trace": "The report pinpoints exactly where in the code the ordering is being clobbered or omitted (with links to the relevant lines), states the expected behavior (fall back to Meta.ordering or respect ModelAdmin.ordering) and describes how to surface the missing ordering parameters. A developer can come up with a clear patch to restore the fallback to model._meta.ordering in RelatedFieldListFilter and pass through ordering to get_choices in RelatedOnlyFieldListFilter without further clarification."
    },
    "django__django-11405": {
        "input_bounce": true,
        "trace": "The issue description points out a mutability bug with reverse() altering the original ordering but doesn\u2019t clearly specify the intended correct behavior or the precise code change needed (e.g. where to clone lists, what the API contract should be, whether tests or code should change). There\u2019s no detail on the expected immutability guarantees or how reverse() should behave internally, making the requirements ambiguous."
    },
    "django__django-11417": {
        "input_bounce": false,
        "trace": "The issue clearly states what needs changing (use email.headerregistry.parser.get_mailbox instead of email.utils.parseaddr in sanitize_address) but leaves implementation details (imports, Python version handling, tests) up to the developer. There\u2019s enough direction to start work, but not full specification of edge cases or testing requirements."
    },
    "django__django-11423": {
        "input_bounce": false,
        "trace": "The issue comes with a minimal reproducible example, clear steps to reproduce, expected vs. actual behavior, and even pointers to where the caching goes wrong. It\u2019s fully detailed for a developer to write a fix or patch against Django\u2019s GenericRelation/prefetch logic."
    },
    "django__django-11428": {
        "input_bounce": false,
        "trace": "The report clearly outlines how to reproduce the error, the root cause (raise_last_exception attempts to reinstantiate a custom\u2010signature exception with only one arg), and its regression point. It doesn\u2019t prescribe an exact fix (e.g. fallback to original exception when signature mismatch), but there\u2019s an obvious, practical way forward. This makes the issue reasonably specified for someone to implement a solution."
    },
    "django__django-11433": {
        "input_bounce": false,
        "trace": "The issue describes a concrete problem (fields with model defaults can\u2019t be overridden via cleaned_data if they aren\u2019t submitted in the form) and the desired behavior (allow cleaned_data to take precedence over model defaults). It cites the relevant code area via a PR comment link and clearly states what\u2019s wrong and what should change, even though implementation details are left to the developer. There is enough information to sketch and implement a solution."
    },
    "django__django-11446": {
        "input_bounce": false,
        "trace": "The report clearly shows the current vs. expected output, the Django version, the DEBUG modes, and even example HTML. It\u2019s obvious what change is needed (wrap the default error response in a full HTML skeleton)."
    },
    "django__django-11451": {
        "input_bounce": false,
        "trace": "The issue clearly describes the specific unwanted database query in ModelBackend.authenticate when username is None, shows the existing code, explains why it\u2019s a problem, and proposes an exact fix (early return when username or password is None). The requirements for a successful solution are unambiguous."
    },
    "django__django-11477": {
        "input_bounce": true,
        "trace": "The issue description is very high-level and lacks critical details such as code examples, expected vs. actual behavior, examples of the URL patterns, or the relevant test case. Without concrete inputs, outputs, or error messages, it\u2019s unclear how translate_url() is misbehaving or what the correct behavior should be."
    },
    "django__django-11490": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates the incorrect behavior with reproducible examples and points to the relevant code in compiler.py. It\u2019s obvious what the ORM should be doing (resetting or updating the selected columns for each values()/values_list() call), but it doesn\u2019t prescribe exactly how to implement that fix. You\u2019d need to inspect the Query and QuerySet internals to apply the change. Hence it\u2019s not fully spelled out, but there\u2019s enough information to work towards a solution."
    },
    "django__django-11514": {
        "input_bounce": false,
        "trace": "The request clearly states that the never_cache decorator should include the \u201cCache-Control: private\u201d directive in its response headers to prevent CDN caching. The goal and required change are unambiguous, and the existing code location (never_cache decorator) is known in the Django codebase. This is sufficient to implement a precise fix."
    },
    "django__django-11517": {
        "input_bounce": false,
        "trace": "The issue clearly describes the failing scenario in call_command with subparsers, includes code examples, error messages, and desired usage. While it doesn\u2019t prescribe the exact implementation fix, it gives enough detail to understand what\u2019s broken and what correct behavior looks like, making it reasonably specified for a developer to attempt a solution."
    },
    "django__django-11525": {
        "input_bounce": false,
        "trace": "The request clearly identifies the broken behavior (passing a list of email strings instead of (name, email) tuples), the desired change (validate and raise an early error when ADMINS/MANAGERS is mis-formatted), and the context (mail_admins/mail_managers). While it doesn\u2019t call out the exact exception class or tests, the intended format and point of failure are clear enough to implement a fix following existing conventions (e.g. raising ImproperlyConfigured)."
    },
    "django__django-11527": {
        "input_bounce": false,
        "trace": "The report clearly states that the command should error out (or at least inform the user) when no sequence-reset SQL is generated, and even suggests raising CommandError when statements is empty. The bonus request to detect backend support is an extra but not blocking. While exact message wording isn\u2019t nailed down, the goal and location in code are obvious, so there\u2019s enough here to write a PR."
    },
    "django__django-11532": {
        "input_bounce": false,
        "trace": "The report clearly states the problem (Message-ID header crashes on non-ASCII hostname with non-Unicode encoding), gives steps to reproduce, points to the exact code locations, shows the traceback, and even suggests the expected behavior and a test case. It\u2019s unambiguous what change is needed (convert the domain to punycode before header generation)."
    },
    "django__django-11543": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (runserver with --nothreading never closes a keep-alive socket, blocking further connections), the environment, and the expected behavior (close the connection so new requests aren\u2019t starved). While it doesn\u2019t prescribe specific code changes, it\u2019s straightforward to locate the WSGI server loop in Django\u2019s base HTTP server and enforce a connection close when threading is disabled. "
    },
    "django__django-11551": {
        "input_bounce": false,
        "trace": "The issue includes a clear description of the bug (admin.E108 on PositionField after Django upgrade), the exact code path involved, a reference to the problematic commit, a detailed truth matrix of expected behavior, and a proposed corrected implementation. A developer can directly use this information to implement and test a fix. Therefore it is WELL_SPECIFIED."
    },
    "django__django-11555": {
        "input_bounce": false,
        "trace": "The reporter provides a clear description of the failure, a stack trace pointing to the exact problem (an OrderBy object passed where a string is expected), and even a minimal reproducible test repository. There\u2019s no ambiguity about what\u2019s broken or where; a developer can clone the repo, run the tests, and see the error. That makes it well-specified."
    },
    "django__django-11559": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproduction repository, a clear description of what\u2019s failing (an OrderBy object showing up instead of a string in get_order_dir), when it happens (during test DB setup with multi-table inheritance), and points to the exact place in code where the assumption breaks. That is sufficient to attempt a targeted fix."
    },
    "django__django-11560": {
        "input_bounce": false,
        "trace": "The issue clearly describes the broken behavior (ExtractYear on DurationField producing an invalid date comparison SQL) and the desired outcome (raise a ValueError when using Extract on DurationField). It provides a concrete example and enough context to implement a check in the Extract_* transformer code. While it doesn\u2019t spell out every code detail, there\u2019s a straightforward, sensible interpretation for a fix."
    },
    "django__django-11564": {
        "input_bounce": true,
        "trace": "The request is high-level and lacks concrete requirements or an implementation plan. It\u2019s unclear how to pass the dynamic SCRIPT_NAME into the storage layer, how to handle contexts without a request, or what backward-compat guarantees are needed. There aren\u2019t acceptance criteria or tests, so it\u2019s vague what a \u201csuccessful\u201d solution looks like."
    },
    "django__django-11584": {
        "input_bounce": false,
        "trace": "The report gives a reproducible scenario (specific Django versions, Dockerfile, docker-compose, full traceback), describes exactly when and where the error occurs, and isolates it to the new 2.2.3 code path in django/utils/translation/reloader.py. Although you\u2019d have to look up the upstream Django source to author the patch, everything you need to reproduce and verify a fix is provided."
    },
    "django__django-11591": {
        "input_bounce": false,
        "trace": "The issue clearly defines the goal\u2014strictly enforce the doc\u2010stated limitation of only LIMIT, OFFSET, and ORDER BY after union(), intersection(), and difference()\u2014and to raise a descriptive error otherwise. While the exact list of disallowed methods and the precise exception class/message need filling in, there\u2019s a sensible interpretation of what to implement. Thus it\u2019s reasonably specified."
    },
    "django__django-11592": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the missing propagation of FileResponse.block_size into the wsgi.file_wrapper call, provides precise code references for both FileResponse and the WSGI handler, and states exactly what needs to change. A patch can be written directly from this description."
    },
    "django__django-11603": {
        "input_bounce": false,
        "trace": "The ticket clearly states the goal (enable DISTINCT on Avg and Sum, mirroring prior behavior) and points to the analogous change in #28658; a maintainer familiar with the aggregate-function classes can identify which flags or methods to update. It isn\u2019t a fully detailed step-by-step spec (e.g. class names aren\u2019t spelled out), but it\u2019s straightforward to interpret in context."
    },
    "django__django-11605": {
        "input_bounce": false,
        "trace": "The report clearly states the current shallow validation only catches direct window expressions on the left side of a filter, and it provides minimal code examples showing missing cases (window on the right side, nested in arithmetic). The requirement\u2014to recursively detect any Window expression in filter() and raise a NotSupportedError early\u2014is unambiguous and implementable."
    },
    "django__django-11612": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (double\u2010quoting of user\u2010provided quoted db_table names in SQLite3 migrations), shows the exact broken SQL, a minimal reproduction (a quoted db_table with a ForeignKey), and where in the code the bad SQL is generated (sqlite3/schema.py). The desired outcome\u2014support for quoted names without syntax errors\u2014is also obvious. It\u2019s straightforward to write a fix that strips existing quotes or otherwise normalizes the table name before quoting."
    },
    "django__django-11618": {
        "input_bounce": false,
        "trace": "The report clearly identifies the problematic code path (the broad OSError catch in ManifestFilesMixin.read_manifest), demonstrates the issue (PermissionError being swallowed), and even suggests specific remedies (rethrow, narrow exception handling, or add logging). While you\u2019d have to choose which approach to adopt and the exact logging semantics, there\u2019s enough detail to write a targeted patch. Any of the suggested fixes can be implemented in a straightforward way."
    },
    "django__django-11622": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (unhelpful TypeError when invalid data is passed to numeric fields) and the desired outcome (display the field name in the exception). While implementation details (exact exception type, message format, and which methods to patch) are not spelled out, a Django core contributor can reasonably infer that the change belongs in the Field.to_python() or related casting logic for AutoField/FloatField/IntegerField. This is sufficient for a meaningful attempt at a solution."
    },
    "django__django-11630": {
        "input_bounce": false,
        "trace": "The report clearly states the Django upgrade introduced a new validation error (E028) when two models in different apps/databases share the same db_table, gives the exact error, the Django versions involved, and the intended behavior (allow same table names on separate databases). While we don\u2019t have full router code or settings, there\u2019s a clear actionable problem and expected outcome, so it\u2019s reasonably specified for a developer to propose a solution (e.g. adjust validation to respect database routers or add an opt\u2010out)."
    },
    "django__django-11638": {
        "input_bounce": false,
        "trace": "The issue clearly states the context (Django 2.2 test client now errors on None in POST data), the desired change (include offending key and value in the exception message), and even provides a reference PR. While formatting details aren\u2019t spelled out, the requirement is clear enough to implement a meaningful fix. In other words, it\u2019s not fully boilerplate but has a sensible interpretation for a solution."
    },
    "django__django-11669": {
        "input_bounce": true,
        "trace": "The request identifies an inconsistency (TemplateView injecting kwargs into context while ListView does not) and a desired outcome (stop automatically adding kwargs), but gives no detail on which kwargs, how to handle backward compatibility, test coverage, or other generic views. It lacks scope, design decisions, or implementation guidance, making it ambiguous how to proceed."
    },
    "django__django-11680": {
        "input_bounce": false,
        "trace": "The report precisely shows a reproducible case (creating a UUID-`default` PK, calling `save()` vs `create()`/`save(force_insert)`), the unwanted extra `UPDATE`, and the desired behavior (only an `INSERT`). It even links the upstream Django ticket. There\u2019s no ambiguity about what\u2019s broken or what \u201csuccess\u201d looks like, so it\u2019s well-specified."
    },
    "django__django-11692": {
        "input_bounce": false,
        "trace": "The report clearly shows reproducible code, the exact error, and the desired capability (using OuterRef inside a union in a Subquery). We know what to fix (allow OuterRef to survive through union/| in a Subquery) even though details like the exact SQL backend or Django version aren\u2019t spelled out. There\u2019s a sensible interpretation of the bug and how a PR could verify and resolve it, so it\u2019s reasonably specified."
    },
    "django__django-11695": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the problem (too many requests on each key press) and the intended solution (use Select2\u2019s ajax.delay option to rate-limit). Although it doesn\u2019t spell out default delay values or configuration details, there\u2019s a sensible, straightforward interpretation of what needs to be implemented. It\u2019s therefore reasonably specified."
    },
    "django__django-11701": {
        "input_bounce": false,
        "trace": "The report clearly reproduces a crash in the Django admin when a NUL byte is passed as the search query, and provides full environment and traceback. It\u2019s obvious that the admin search should not crash on a null character (i.e. the NUL should be stripped or cause a no\u2010results response), so an implementer can sensibly proceed to sanitize q before building the SQL. Some details (e.g. exactly where/how to strip) are left to the engineer, but the core problem and desired outcome (\u201cno crash on NUL, treat it as harmless\u201d) are clear."
    },
    "django__django-11728": {
        "input_bounce": false,
        "trace": "The issue clearly describes a specific bug in replace_named_groups(): the final named capture isn\u2019t processed if the pattern doesn\u2019t end with a slash. An explicit example is given, along with a workaround and a pointer to the downstream use case. While the exact implementation details aren\u2019t in the description, the root cause (regex only matching groups followed by \u2018/\u2019) and the expected behavior (also match groups at end of string) are unambiguous. A PR can therefore be scoped to extend the regex to handle end-of-input as well as a trailing slash."
    },
    "django__django-11734": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example, shows exactly what works (filter with OuterRef) vs what fails (exclude or ~Q with OuterRef), and provides the exact error. The expected behavior is clear (exclude should work like filter), so a developer can directly write a fix and verify against the provided test. "
    },
    "django__django-11740": {
        "input_bounce": false,
        "trace": "The reporter provides a minimal reproducible example (two apps, model definitions before and after change), the exact behavior (makemigrations produces no dependency on testapp2 so ForeignKey can\u2019t be resolved), Django version, traceback, and even an attached sample project. There\u2019s a clear expected outcome (autogenerated migration should declare a dependency on testapp2) versus the observed. This is sufficient to attempt and validate a solution."
    },
    "django__django-11742": {
        "input_bounce": false,
        "trace": "The issue clearly states the problem (no validation that max_length covers the longest choice value) and what\u2019s needed (a check to enforce max_length \u2265 longest choice). While it doesn\u2019t name the exact file or API hook\u2014e.g. adding a system check in Field.check()\u2014that is common knowledge in the Django codebase. A developer can sensibly implement the required check, so it\u2019s reasonably specified."
    },
    "django__django-11749": {
        "input_bounce": false,
        "trace": "The issue clearly reproduces the error, pinpoints the faulty behavior in Django\u2019s call_command (only required top\u2010level args are passed, ignoring required mutually exclusive groups), and shows the parser setup. It\u2019s straightforward to write a fix that also picks up required group actions. This is well specified."
    },
    "django__django-11751": {
        "input_bounce": false,
        "trace": "The issue clearly identifies exactly which security settings need to be turned on by default (SECURE_CONTENT_TYPE_NOSNIFF, SECURE_BROWSER_XSS_FILTER, and X_FRAME_OPTIONS='DENY') in the project template, and even suggests updating the global defaults through a deprecation period. There\u2019s no ambiguity around what code needs to change (the startproject settings template and default settings), so it\u2019s well-specified."
    },
    "django__django-11754": {
        "input_bounce": false,
        "trace": "The issue clearly states what needs to change (making the hardcoded ExceptionReporter in technical_500_response configurable), how to expose it (via a new DEFAULT_EXCEPTION_REPORTER setting and handler500 parameter), and adds documentation requirements. While you\u2019ll need to fill in some details (exact API and default behavior), the scope and steps are well defined and actionable within the Django codebase."
    },
    "django__django-11772": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current problems in make_template_fragment_key (unneeded quoting, MD5/FIPS compliance, inefficiency), provides a concrete SHA256-based solution with performance data, and even links to a PR and test updates. While it leaves some room for deciding if and how to migrate other MD5-based cache keys, the core task and proposed changes are well laid out. There\u2019s a sensible path forward without major ambiguity."
    },
    "django__django-11790": {
        "input_bounce": false,
        "trace": "The report clearly states what is wrong (the username field on AuthenticationForm no longer sets the maxlength HTML attribute), points to the specific commit that regressed it, and links to discussion threads for context. A developer can locate the form in code, add the missing maxlength attribute (using the field\u2019s max_length), and write a test for it. This is sufficiently detailed for a meaningful fix."
    },
    "django__django-11797": {
        "input_bounce": false,
        "trace": "The issue includes a clear, minimal repro with code snippets, shows expected vs. actual SQL, and describes exactly what\u2019s wrong (GROUP BY on the wrong column). You can reproduce and know what fix is needed."
    },
    "django__django-11808": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the specific method (__eq__ in django/db/models/base.py), describes the incorrect behavior (returning False instead of NotImplemented for unknown types), cites the Python data model expectations, and explains the desired change (return NotImplemented so that reverse equality can be tried). This is directly actionable."
    },
    "django__django-11810": {
        "input_bounce": false,
        "trace": "The report provides a minimal, reproducible example (models, test code, console output), describes the expected vs. actual behavior, and even points to the underlying clone mechanism. It\u2019s clear what needs to be fixed (make select_related/prefetch_related truly immutable), so it\u2019s well-specified."
    },
    "django__django-11815": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (Django migrations serializing enum.value instead of enum.name), provides minimal reproducible code, shows the broken migration output and the desired output, and specifies why it matters (translations break enum lookup). A fix is straightforward: adjust the migration serializer to use Enum.name (e.g. Status['GOOD']) instead of Enum.value. The goal and scope are unambiguous."
    },
    "django__django-11820": {
        "input_bounce": false,
        "trace": "The report clearly identifies the specific error (models.E015) triggered by using a related field\u2019s primary key in Meta.ordering (e.g. 'option__pk'), and even points to the regression commit. While it doesn\u2019t spell out the precise code change, it gives enough context to reproduce the failure and know that ordering by a related pk should be allowed. This makes it reasonably specified for a fix."
    },
    "django__django-11829": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current wrong behavior, cites the RFC, gives examples of expected usage (merging multiple no-cache field-names into a list and having True override any named fields), and even references a related ticket. The requirements for patch_cache_control are specific enough to implement a correct fix."
    },
    "django__django-11848": {
        "input_bounce": false,
        "trace": "The report clearly states which function is wrong, cites the RFC requirement, describes the existing hard-coded cutoff (0\u201369 \u2192 2000\u20132069, 70\u201399 \u2192 1970\u20131999) and specifies the correct behavior (interpret two\u2010digit years by comparing against the current date with a 50-year future window). There\u2019s no ambiguity about what needs to change or how to validate it."
    },
    "django__django-11880": {
        "input_bounce": false,
        "trace": "The report pinpoints the exact method (__deepcopy__ in django/forms/fields.py) and the underlying issue (error_messages isn\u2019t deep-copied), provides code references, describes the expected behavior, and even ties it to specific Django versions. This is enough detail to draft a precise fix (e.g. amend __deepcopy__ to deepcopy the error_messages dict)."
    },
    "django__django-11883": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired behavior change (have cache.delete() return a success flag), points out how each backend can determine success (row counts or delete counts), and even references how existing clients already expose this. A developer familiar with the cache backends can implement this directly. No key requirements are missing."
    },
    "django__django-11885": {
        "input_bounce": false,
        "trace": "The request clearly describes the enhancement: in Django\u2019s deletion Collector, detect multiple fast-path DELETE queries targeting the same DB table and merge them into a single DELETE with OR\u2019d conditions (or IN for PKs). It gives model examples and before/after SQL. While you must dig into Django\u2019s Collector logic to implement, the goal and behavior are unambiguous, so it\u2019s reasonably specified."
    },
    "django__django-11891": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (ConditionalGetMiddleware always returns 304 due to a stale ETag for x-sendfile responses) and the desired behavior (don\u2019t return 304 when the Last-Modified timestamp has changed). While the exact code changes aren\u2019t spelled out step by step, the scope and fix are well defined, making it reasonably specified."
    },
    "django__django-11893": {
        "input_bounce": false,
        "trace": "The issue clearly states that Django\u2019s DateTimeField should accept ISO 8601 strings with a 'T' separator (YYYY-MM-DDTHH:MM:SS), but currently only parses strings with a space separator. While it doesn\u2019t specify the exact code location or Django version, it\u2019s straightforward to interpret that the parsing logic needs to be extended to accept 'T'. This is a sensible, actionable change."
    },
    "django__django-11894": {
        "input_bounce": false,
        "trace": "The issue clearly describes a mismatch between Django\u2019s handling of SameSite=None (it omits the attribute entirely) and Chrome\u2019s requirement for an explicit \u201cSameSite=None\u201d attribute for cross-site cookies. There\u2019s a straightforward fix: in set_cookie and set_signed_cookie, treat None as a valid value and emit \u201cSameSite=None\u201d instead of dropping the attribute. Although it doesn\u2019t call out specific files or lines, the behavior and change are unambiguous, so a developer familiar with Django\u2019s cookie machinery can implement it."
    },
    "django__django-11903": {
        "input_bounce": false,
        "trace": "The report clearly describes the current behavior in fetch_command (checking only DJANGO_SETTINGS_MODULE), the gap (not accounting for settings.configure()), and the desired change (also check settings.configured). The scope and fix are unambiguous and actionable."
    },
    "django__django-11905": {
        "input_bounce": false,
        "trace": "The requirement is clear: in the `__isnull` lookup implementation, validate that the provided RHS is strictly a boolean, and raise an appropriate error (e.g. FieldError) if it isn\u2019t. Tests should be added to cover non-boolean inputs. This is sufficiently concrete for implementation."
    },
    "django__django-11916": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a performance bottleneck in Django\u2019s prefetch_related implementation (the eager creation of related QuerySets via manager.all()), provides profiling data, and outlines two high-level strategies (assigning to a list or lazy-instantiating the QuerySet). The desired outcome\u2014introducing a proxy or lazy QuerySet so that manager.all() calls during prefetch don\u2019t build full QuerySet objects until needed\u2014is clear. While the precise API or class changes aren\u2019t spelled out in code, there\u2019s enough context and direction to formulate a concrete implementation plan. Therefore this ticket is reasonably specified for an engineer familiar with the codebase to draft a PR."
    },
    "django__django-11951": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the specific lines of code in Django\u2019s bulk_create and bulk_update methods, describes the discrepancy (batch_size override vs. minimum-of-two logic), and suggests exactly how to align bulk_create with bulk_update\u2019s behavior. A developer can directly implement the proposed min(batch_size, max_batch_size) logic, so it\u2019s well-specified."
    },
    "django__django-11964": {
        "input_bounce": false,
        "trace": "The issue clearly describes a reproducible bug, provides minimal code and failing tests, and specifies the desired behavior (the enum\u2019s string conversion should yield its .value). While it doesn\u2019t pinpoint exactly which method to patch, it\u2019s straightforward to interpret and implement a fix, so it\u2019s reasonably specified."
    },
    "django__django-11999": {
        "input_bounce": false,
        "trace": "The report clearly shows the behavior change (get_FIELD_display no longer overridden by a user method), includes a minimal reproducer, and states the expected behavior. While you\u2019ll need to dig into Django\u2019s ModelBase/Field contribute_to_class logic to implement the fix, the goal and reproduction are unambiguous. Thus it\u2019s reasonably specified."
    },
    "django__django-12009": {
        "input_bounce": true,
        "trace": "The issue describes the duplicate scripts in detail and points to the setup.py inputs causing them, but it never specifies which of the two scripts should be kept (or under what conditions), how to handle backward compatibility, or what the exact desired packaging change is. Without clear acceptance criteria or a concrete decision on which entry to drop, it\u2019s ambiguous what a correct solution would be."
    },
    "django__django-12039": {
        "input_bounce": false,
        "trace": "The ticket includes clear before/after examples, identifies the precise code location (`ddl_references.py` line 87), explains the root cause (col_suffixes contains empty strings instead of being empty), and states the exact expected SQL formatting. A PR to adjust whitespace handling can be scoped and tested directly against these examples without further clarification."
    },
    "django__django-12050": {
        "input_bounce": false,
        "trace": "The issue clearly describes a specific undesired behavior\u2014lists being coerced to tuples in Query.resolve_lookup_value due to changes in PR #30687\u2014and states the expected behavior (preserve the input iterable type). It points to the affected code path and the breakage observed with ORM field types like PickledField. While it doesn\u2019t include file paths or code snippets, there\u2019s enough context to locate the method, understand what needs changing, and write tests to verify the fix. Thus, it\u2019s reasonably specified for a meaningful solution."
    },
    "django__django-12062": {
        "input_bounce": false,
        "trace": "The issue clearly states a goal (disable all migrations during tests) and even suggests where to hook into the code (MigrationLoader.migrations_module()). However, it leaves out implementation details such as how to wire up the new setting in the DATABASES config, defaults, and test coverage. There\u2019s enough guidance to start a sensible implementation but some details will need to be defined."
    },
    "django__django-12073": {
        "input_bounce": false,
        "trace": "The issue clearly states what needs to change (replace InvalidQuery in two code paths with FieldDoesNotExist and FieldError) and to add a deprecation shim. While it doesn\u2019t spell out exact file names or warning messages, an experienced Django contributor can locate the current InvalidQuery uses and implement the proposed behavior. The intent and scope are unambiguous, but some details (exact warning APIs, test updates) would need to be filled in, so it\u2019s reasonably specified."
    },
    "django__django-12091": {
        "input_bounce": false,
        "trace": "The issue clearly identifies exactly which API to deprecate (HttpRequest.is_ajax), why it should be deprecated, and points to precedent in Flask. While it omits the exact version tag and warning text, a Django engineer can fill in those blanks following the project\u2019s deprecation policy. This is sufficient to move forward with a meaningful solution."
    },
    "django__django-12113": {
        "input_bounce": false,
        "trace": "The report contains a clear description of what\u2019s happening (SQLite \u201cdatabase is locked\u201d when using persistent test DBs with --keepdb), the exact reproduction steps (diff to tests, runtests command), the full traceback, and the expected outcome (tests should pass). That gives a concrete, actionable bug to reproduce and address. Hence it\u2019s WELL_SPECIFIED."
    },
    "django__django-12121": {
        "input_bounce": false,
        "trace": "The issue describes a clear scenario, the intended behavior, the current workaround, and two concrete proposals (catch ValueError in _reverse_with_prefix or update the docs). While it doesn\u2019t point to exact line numbers, someone familiar with Django\u2019s URL resolver can identify where to add the try/except or update documentation. There\u2019s enough detail to draft a meaningful patch or doc change."
    },
    "django__django-12125": {
        "input_bounce": false,
        "trace": "The bug is clearly described with minimal example code, the exact incorrect behavior is shown, and the expected behavior is obvious (nested class paths preserved). There\u2019s enough detail to start diagnosing and fixing makemigrations\u2019s import path logic."
    },
    "django__django-12143": {
        "input_bounce": false,
        "trace": "The issue pinpoints the exact file and line, explains the root cause (using raw prefix in a regex), and even suggests the straightforward fix (wrap prefix in re.escape). It\u2019s clear what code change is needed and where to look for any other similar patterns, making it well-specified for an implementation."
    },
    "django__django-12148": {
        "input_bounce": false,
        "trace": "The report clearly identifies a specific mismatch: FlatPage.get_absolute_url() is producing a raw URL path (omitting any SCRIPT_NAME or URL prefix), whereas reverse() (and the flatpage template tag) correctly include the configured prefix. The task\u2014update get_absolute_url() to use Django\u2019s reverse() (or otherwise account for the URL prefix) so that admin links match the prefix\u2014is obvious given the codebase. Some implementation details must be worked out against the existing URLconf, but there\u2019s a single, unambiguous goal and straightforward path to completion."
    },
    "django__django-12153": {
        "input_bounce": false,
        "trace": "The report clearly describes the environment (no default DB), points to the exact migration file and line causing the crash, includes the traceback, and explains why it fails. It\u2019s straightforward to propose a change in the migration to specify the database alias or guard against a missing default, so it\u2019s well-specified."
    },
    "django__django-12155": {
        "input_bounce": false,
        "trace": "The report clearly outlines the bug\u2014docstrings without a blank first line cause a zero indent calculation, leading to a rendering error. It shows the offending code in trim_docstring, reproduces the error, and even offers a precise one-line change to skip the first line. That makes it straightforward to implement a fix."
    },
    "django__django-12161": {
        "input_bounce": false,
        "trace": "The issue clearly describes a missing feature\u2014evaluating callable values in through_defaults before applying them (rather than storing the callable itself). It references existing patterns in get_or_create and model field defaults, explains the current wrong behavior, and states the desired behavior. While you\u2019d need to locate the through_defaults implementation and write appropriate tests, the core requirement and expected outcome are unambiguous.\n"
    },
    "django__django-12172": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (async\u2010unsafe checks blocking notebook usage), the desired feature (a global flag/env var to disable the check), and the rationale (reduce boilerplate in notebooks). It doesn\u2019t spell out exact names or code locations, but there\u2019s a straightforward interpretation of how to add a setting or env var to bypass the existing check. That makes it reasonably specified for an implementation proposal."
    },
    "django__django-12187": {
        "input_bounce": true,
        "trace": "The ticket describes a real problem (staticfiles manifest is publicly exposed) and a high-level goal (\u201cAllow configuration of where to save staticfiles manifest\u201d), but it does not specify any concrete API, setting names, defaults, or how this should behave across different storage backends (local vs S3). There are no acceptance criteria or examples of the desired configuration syntax. In its current form, an implementer would have to make too many assumptions, so the request is vague."
    },
    "django__django-12193": {
        "input_bounce": false,
        "trace": "The report clearly describes the broken behavior, its cause (CheckboxInput.get_context mutating the shared attrs dict), and even points to the exact code location. A developer can reproduce the bug, understand the root cause, and implement a fix (e.g. copying attrs before modifying)."
    },
    "django__django-12198": {
        "input_bounce": false,
        "trace": "The issue clearly states what\u2019s broken (the sensitive_variables decorator isn\u2019t preserving the wrapped function\u2019s signature, causing inspect.getcallargs to misbehave and break custom backends) and what the desired outcome is (decorate authenticate without altering its signature). While implementation details aren\u2019t spelled out, the goal and context are clear enough to craft a targeted fix, so this is REASONABLY_SPECIFIED."
    },
    "django__django-12209": {
        "input_bounce": false,
        "trace": "The report clearly describes model definitions, pre- and post-change behavior, a minimal reproducible example, the expected vs. actual outcome, and even a suggested direction (only treat as INSERT when no explicit PK was provided). While it doesn\u2019t include patch code, it gives enough detail to implement and test a fix against the Django save logic. Thus it\u2019s reasonably specified."
    },
    "django__django-12212": {
        "input_bounce": false,
        "trace": "The report provides full tracebacks, pinpoints the exact file and line numbers in Django\u2019s Python serializer (`django/core/serializers/python.py` around lines 139\u2013142), explains why `pk` is unassigned (because `field_value` can be None), and even suggests the minimal code change (`for pk in field_value or []:`) to handle the case. All the information needed to reproduce and patch the bug is present."
    },
    "django__django-12225": {
        "input_bounce": false,
        "trace": "The request pinpoints a single error code (admin.E202) in Django\u2019s admin, describes the exact circumstances that trigger it (an inline with multiple foreign keys to the same parent), and states precisely how the message should change (recommend specifying fk_name). That is enough context to locate the check in contrib/admin/options.py and adjust the error text accordingly."
    },
    "django__django-12231": {
        "input_bounce": false,
        "trace": "The report clearly identifies where the problem lies (the related manager\u2019s set() logic), provides a reproducible scenario (form data as strings vs. pks as ints), and suggests the desired behavior (coerce or validate inputs before diffing). However, it leaves open how Django should treat string inputs (auto-convert vs. error) and doesn\u2019t specify API contract changes in detail, so some design decisions remain. Overall it\u2019s actionable with sensible assumptions."
    },
    "django__django-12237": {
        "input_bounce": false,
        "trace": "The report includes a minimal repro (model, slugify call), shows the exact unexpected output and the ValidationError, analyzes the root cause in Django\u2019s slugify implementation, cites environments (Django, Python versions), and even proposes a concrete patch. That makes it sufficiently detailed for a direct fix."
    },
    "django__django-12262": {
        "input_bounce": false,
        "trace": "The ticket clearly describes the broken behavior with concrete examples (wrong exception for keyword\u2010only args with defaults and duplicate keywords), shows expected vs. actual, and scopes the problem to Django\u2019s template tag parsing (simple_tag and inclusion_tag). An implementer can locate the signature\u2010parsing code and fix it accordingly. This is well\u2010specified."
    },
    "django__django-12273": {
        "input_bounce": false,
        "trace": "The issue includes concrete example code, a clear description of the unexpected behavior (resetting the PK on a multi-table inherited model does not cause a new record to be created), and the Django version. While it's not an end-to-end repro, there\u2019s enough detail to interpret the problem and propose a solution. Therefore it\u2019s reasonably specified."
    },
    "django__django-12276": {
        "input_bounce": false,
        "trace": "The report clearly identifies the widget (FileInput), the existing method (use_required_attribute on ClearableFileInput), and the desired behavior (drop the required attribute when there is initial data). It even points to the exact source line. A developer has a concrete change to make, so the issue is well\u2010specified."
    },
    "django__django-12286": {
        "input_bounce": false,
        "trace": "The issue clearly states the unexpected behavior (E004 raised for sublanguages like de-at despite a base language being available), provides reproducible settings and error messages, references expected behavior per Django docs, and even contrasts with a working case. It\u2019s straightforward to locate and adjust the E004 check logic accordingly, so the request is well-specified."
    },
    "django__django-12299": {
        "input_bounce": false,
        "trace": "The ticket clearly lays out the incorrect behavior (update/delete silently ignores part of a combined QuerySet) and the desired remedy (raise a descriptive error when calling update()/delete() on a union/intersection/difference QuerySet). While it doesn\u2019t specify exact exception class or message text, it gives a concrete repro and the precise operations to guard against. That provides enough to implement a meaningful fix without further clarification."
    },
    "django__django-12304": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (Django templates auto\u2010call callable enum classes and break), gives a concrete example, and even proposes the precise change (add do_not_call_in_templates = True to the Choices classes). It\u2019s straightforward to implement and verify, so it\u2019s well\u2010specified."
    },
    "django__django-12308": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (JSONField values shown as Python dict repr when readonly in the admin), gives an example, identifies the exact location for a patch (django.contrib.admin.utils.display_for_field), and even proposes using JSONField.prepare_value rather than json.dumps. It\u2019s straightforward to implement and test. "
    },
    "django__django-12313": {
        "input_bounce": false,
        "trace": "The issue includes clear reproduction steps (initial models, commands run), the exact behavior seen, error trace, and the expected behavior (case-only renames should be detected as RenameModel). There\u2019s enough detail to reproduce, diagnose, and implement a fix in Django\u2019s migration autodetector."
    },
    "django__django-12325": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible code snippet, the exact exception message, the variant that triggers the error versus the one that works, and a clear question about expected behavior (field order shouldn\u2019t matter when parent_link=True). A developer can meaningfully reproduce, diagnose, and propose a fix from this description."
    },
    "django__django-12360": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (permission codenames can exceed the 100-char limit when model names are long), gives an example, and asks for a Django system check to catch or warn about it. While the exact check ID/message format isn\u2019t spelled out, there\u2019s enough context and precedent in Django\u2019s checks framework to implement it unambiguously."
    },
    "django__django-12364": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the code location (the _get_deterministic_ordering method in Django's admin ChangeList), the current behavior (only unique_together is checked), and the desired behavior (also detect UniqueConstraint instances without conditions). It even points to the relevant PR for context. A developer can implement this by inspecting model._meta.constraints for UniqueConstraint entries with no conditions and treating their fields just like unique_together. This is a concrete, specific change."
    },
    "django__django-12394": {
        "input_bounce": false,
        "trace": "The issue clearly reproduces a specific error (TypeError due to treating an itertools.chain as subscriptable) and points to the exact code location. Even though it doesn\u2019t include a full patch or desired code snippet, it\u2019s straightforward to infer that the fix is to materialize the chain into a list (or otherwise avoid indexing the chain directly). The requirements for a fix are therefore clear enough to implement."
    },
    "django__django-12396": {
        "input_bounce": false,
        "trace": "The issue includes a clear description of the bug, how to reproduce it (with sample settings and commands), the observed traceback, and the expected behavior (that all test databases should be prefixed with test_ even when running a subset of tests). A patch could be written to ensure DiscoveryRunner.setup_databases handles all aliases, so this is well-specified for a meaningful implementation."
    },
    "django__django-12406": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior and the desired change (remove the blank radio option when blank=False on the model foreign key). It includes code examples, rendering output, and the expected result, so a contributor can directly implement and test the change."
    },
    "django__django-12407": {
        "input_bounce": false,
        "trace": "The issue clearly describes the desired behavior change (using select_template to allow fallbacks in the {% include %} tag), shows before/after shell examples, even points to the specific line to change, and notes minor complications. A developer can implement and test this without further clarification."
    },
    "django__django-12419": {
        "input_bounce": false,
        "trace": "The request clearly states that the default value for SECURE_REFERRER_POLICY should be changed to \u201csame-origin\u201d in Django 3.x, with accompanying doc and test updates. While it doesn\u2019t call out every single file or test case, there\u2019s a straightforward, conventional place (global settings, docs, and existing tests) to make the change. It\u2019s unambiguous what behavior is expected, so the issue is reasonably specified."
    },
    "django__django-12453": {
        "input_bounce": false,
        "trace": "The report pinpoints the exact code location, describes the failure mode, and even provides a concrete patch diff.  It\u2019s clear what change is needed (wrapping deserialize loop in a transaction) and where to apply it, making it well\u2010specified for implementation."
    },
    "django__django-12464": {
        "input_bounce": false,
        "trace": "The report clearly identifies exactly where in the SQLite backend (lines 60\u201364 of django/db/backends/sqlite3/operations.py) a `NotSupportedError` is being raised for `DISTINCT` on aggregates that SQLite actually does allow (e.g. `GROUP_CONCAT(expr)`). It even provides a minimal custom `GroupConcat` implementation to reproduce it and points to the underlying SQLite documentation. While you\u2019ll still need to decide precisely how to adjust or remove that check (and add a test), there\u2019s no ambiguity about what change is needed: alter or remove the `NotSupportedError` guard so that one\u2010expression aggregates marked `allow_distinct=True` can emit `DISTINCT` in SQLite. That makes it reasonably specified for a developer to write the patch and tests."
    },
    "django__django-12469": {
        "input_bounce": false,
        "trace": "The report clearly states the feature (admin date_hierarchy monthly view) and the incorrect behavior (an extra day from the prior month shows up for non-UTC time zones). While it lacks full repro steps or environment/version details, the root issue and its context (timezone boundary handling) are unambiguous, and a developer familiar with the date_hierarchy code can make a sensible fix and write a test. It\u2019s not perfectly detailed, but it\u2019s sufficient to start coding a solution."
    },
    "django__django-12470": {
        "input_bounce": false,
        "trace": "The issue clearly describes the model setup, shows the exact SQL generated versus the expected SQL, and pinpoints that inherited ordering from the parent\u2019s Meta isn\u2019t being applied in descending order. There\u2019s a concrete reproduction case and a precise statement of expected behavior, so it\u2019s well-specified."
    },
    "django__django-12477": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (fields.E310/E311 checks ignore UniqueConstraint), provides a reproducible example, and specifies the desired change (make those checks consider UniqueConstraint without conditions). There\u2019s enough detail to implement and test the fix."
    },
    "django__django-12484": {
        "input_bounce": false,
        "trace": "The report clearly states what the current behavior is, shows the config that triggers it, and specifies the desired hint text and context (Django\u2019s system check for auth.E002). While it doesn\u2019t include file paths or exact function signatures, it\u2019s a minor feature request with an unambiguous goal: add a hint pointing out which field needs to be removed from REQUIRED_FIELDS. That makes it reasonably specified for implementation."
    },
    "django__django-12496": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproduction (models, create() call), shows the expected vs. actual SQL, and specifies the environment (Python/Django/PostgreSQL). That is enough detail to start diagnosing and fixing the extra UPDATE when a parent has a custom PK."
    },
    "django__django-12503": {
        "input_bounce": false,
        "trace": "The report clearly describes the missing flags behavior, the expected vs. actual behavior, points to the faulty conditional in the code, and even includes a PR with the fix. The requirements for a solution are unambiguous."
    },
    "django__django-12504": {
        "input_bounce": false,
        "trace": "The request clearly states that the logout link must be converted to a CSRF-protected action (e.g. switch from a GET link to a POST form with CSRF token). Although it doesn\u2019t point to specific files or framework APIs, the change is a standard, well-understood practice\u2014enough to implement a solution."
    },
    "django__django-12508": {
        "input_bounce": false,
        "trace": "The request clearly describes a new CLI flag (-c) for manage.py dbshell to run a single SQL statement directly, with examples and expected behavior. Implementation details (argument naming, backend-specific handling) are left open but are reasonably inferable. Thus it\u2019s not fully specified down to every edge case, but it\u2019s sufficiently clear to build a working feature."
    },
    "django__django-12513": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the argument to be deprecated (providing_args on Signal), why it\u2019s purely documentational, and that it should be removed (or at least deprecated) along with updating docs. While it doesn\u2019t spell out version timelines or warning text, those are standard deprecation details that can be filled in by project policy. There\u2019s a straightforward implementation path: add a deprecation warning in Signal.__init__, drop the parameter, update docs/tests."
    },
    "django__django-12517": {
        "input_bounce": false,
        "trace": "The report clearly describes the inconsistency (two different timestamp formats in runserver logs), identifies the code paths involved (WSGIRequestHandler vs. WSGIServer), and even suggests the desired approach (use %(asctime)s everywhere or make the formats configurable). While you\u2019d need to dive into Django\u2019s runserver implementation to apply the change, the scope and goal are clear and actionable without further clarification."
    },
    "django__django-12518": {
        "input_bounce": false,
        "trace": "The issue clearly describes the failure modes (ambiguous prefix error, KeyError when targeting a specific migration), provides a reproduction repo, and states two concrete desires: 1) catch and surface a friendly error message, and 2) allow `sqlmigrate` to emit SQL for migrations that were included in a squash. While the low\u2010level implementation details (exact loader API changes, message wording) are left to the implementer, the scope and expected behaviors are clear enough to start coding. A sensible interpretation is straightforward, so I\u2019d label this REASONABLY_SPECIFIED."
    },
    "django__django-12519": {
        "input_bounce": false,
        "trace": "The report clearly shows the regression, reproduces the bad vs. expected SQL, and pinpoints that a subquery annotation is dropped from the GROUP BY when multiple annotations are present. It\u2019s sufficient to locate the relevant compiler code and add the missing grouping expression."
    },
    "django__django-12532": {
        "input_bounce": false,
        "trace": "The issue clearly states exactly what needs to be done\u2014change the error message key in ModelMultipleChoiceField from \u201clist\u201d to \u201cinvalid_list\u201d to match MultipleChoiceField\u2014so it\u2019s straightforward to implement in the codebase."
    },
    "django__django-12553": {
        "input_bounce": false,
        "trace": "The request clearly defines what needs to change (increase the default salt size in Django\u2019s BasePasswordHasher from ~71 bits to ~131 bits), cites a specific PR with the proposed patch, and provides authoritative references. It\u2019s straightforward where and how to implement the change, so it\u2019s well-specified."
    },
    "django__django-12588": {
        "input_bounce": true,
        "trace": "The issue is just a brief feature request without details on the new option\u2019s name, flags, behavior nuances, or test coverage. While you can guess at the intent\u2014adding a CLI flag to remove content types for apps no longer in INSTALLED_APPS\u2014there\u2019s no specification of how it should work, what edge cases to cover, or how success is measured. It\u2019s too sparse to start coding unambiguously."
    },
    "django__django-12591": {
        "input_bounce": false,
        "trace": "The report clearly identifies the offending commit, the specific system check (E130) being triggered, and the desired outcome (allow per-ModelAdmin overrides of built-in actions). It even points to relevant code locations and a workaround. Although implementation details are left up to the contributor, there\u2019s enough context to craft a solution."
    },
    "django__django-12613": {
        "input_bounce": false,
        "trace": "The issue clearly describes the failure point when the XML serializer encounters a JSONField (a Python object rather than a string), shows the traceback, and implies the need to serialize JSONField values to string (e.g. via json.dumps) before passing to xml.characters. While it doesn\u2019t spell out the exact code change, there is a straightforward, sensible fix in xml_serializer.handle_field to detect JSONField and call value_to_string or json.dumps. Thus it\u2019s reasonably specified."
    },
    "django__django-12627": {
        "input_bounce": false,
        "trace": "The issue clearly states that make_password should reject non-bytes and non-str inputs by raising TypeError, outlines why, and refers to existing behavior in validate_password. There\u2019s a direct, unambiguous code change (input type check and error raise) and corresponding test updates, so it\u2019s well-specified."
    },
    "django__django-12663": {
        "input_bounce": false,
        "trace": "The issue includes a clear reproduction (models, test case, traceback) and identifies a regression in handling SimpleLazyObject in queryset filters. While it doesn\u2019t explicitly spell out \u201cthe fix is to unwrap lazy objects before type coercion,\u201d the expected behavior (no error, test passes) is implied and there\u2019s a sensible path to a solution. Thus it\u2019s reasonably specified."
    },
    "django__django-12669": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (order_by rejecting uuid fields due to missing '-' in ORDER_PATTERN) and even suggests the exact regex change. While it leaves open questions about compatibility with other backends, the immediate fix and its implementation scope are unambiguous. Thus, the issue is reasonably specified for a targeted patch."
    },
    "django__django-12671": {
        "input_bounce": false,
        "trace": "The request calls out a specific function in Django\u2019s management OutputWrapper (`self.stdout.write()` and `self.stderr.write()`), describes the current failure (missing positional `msg`), and defines the desired behavior (allow no-argument calls to emit just a newline). While it doesn\u2019t include code samples or version details, the change is narrowly scoped and clear enough\u2014an experienced engineer could locate the method, add a default empty message, and add the newline logic. This is reasonably specified."
    },
    "django__django-12708": {
        "input_bounce": false,
        "trace": "The report clearly identifies the failure scenario (removing an index_together when the same fields are in unique_together), shows the traceback location, and spells out the desired behavior (allow dropping the index without touching the unique constraint, and avoid needless index re\u2010creation). While you\u2019ll need to dive into Django\u2019s schema editor code to implement it, there\u2019s a concrete bug to fix and a clear goal\u2014making the issue reasonably specified for a solution."
    },
    "django__django-12713": {
        "input_bounce": true,
        "trace": "The issue states a desired change (\u201callow overriding widget in formfield_for_manytomany\u201d) but provides no examples, no code or API details, no version context or reproduction steps, and no clear expected behavior. It\u2019s unclear how the override should work or differ from the ForeignKey case, so you can\u2019t meaningfully implement a fix without further clarification."
    },
    "django__django-12733": {
        "input_bounce": false,
        "trace": "The request clearly identifies the specific function (sql_flush) in the PostgreSQL backend and the exact SQL change (use a single TRUNCATE \u2026 RESTART IDENTITY query instead of separate queries). An experienced engineer can locate sql_flush(), adjust the SQL it emits for PostgreSQL, and test the performance benefit. The scope and desired outcome are unambiguous."
    },
    "django__django-12734": {
        "input_bounce": false,
        "trace": "The report clearly describes the model change (increasing max_length on a primary-key CharField), the generated migration, and the missing schema change (the join table\u2019s FK column remains old length). The expected behavior (cascade the length change into the M2M table) is obvious, so a developer can reproduce and address it without further details."
    },
    "django__django-12741": {
        "input_bounce": false,
        "trace": "The issue clearly states that the method signature should drop the redundant \u201cusing\u201d parameter (now inferred via self.connection.alias) and shows current and desired signatures, plus mentions existing internal usages. There\u2019s a straightforward refactoring task\u2014update the method signature and adjust all callers and references\u2014so it\u2019s well-specified."
    },
    "django__django-12747": {
        "input_bounce": true,
        "trace": "The report clearly identifies an inconsistency in QuerySet.delete\u2019s return format when zero rows are deleted, but it doesn\u2019t specify which behavior is the desired standard (always empty dict vs. always include zero\u2010valued model keys). It also omits details like Django version and where exactly to change the code. Without a clear specification of the intended behavior and implementation context, it\u2019s not well enough defined to implement a fix."
    },
    "django__django-12748": {
        "input_bounce": true,
        "trace": "The issue statement is very minimal: it simply says \u201cAdd support to reset sequences on SQLite\u201d with a link to the internal sqlite_sequence table, but gives no context on where or how sequences are currently managed in the codebase, what interfaces or APIs to modify, what behavior or tests are expected, or any examples. Without knowledge of the existing code structure or requirements, the request is ambiguous and under-specified."
    },
    "django__django-12754": {
        "input_bounce": false,
        "trace": "The issue clearly describes a reproducible error case with code samples, migration operations, and the expected operation ordering. It specifies the desired behavior (removing the field from the base model before creating it on the subclass) and points to the part of the system (the migration autodetector) that needs to change. This is sufficient to implement and test a solution."
    },
    "django__django-12771": {
        "input_bounce": false,
        "trace": "The request is clear in its intent\u2014to change ModelState.fields (and similarly .indexes and .constraints) from a List[Tuple[str, Field]] to a Dict[str, Field] now that insertion ordering is guaranteed. You know where these attributes live, why the change is needed, and what the desired end state is. Some implementation details (tests, serialization, backward compatibility) will need to be filled in during coding, but there\u2019s a sensible interpretation of the requirements and a straightforward path forward."
    },
    "django__django-12774": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (in_bulk only checks field.unique, not UniqueConstraint), provides a minimal repro and traceback, and states the desired change (recognize UniqueConstraint as making a field unique). That is sufficient to implement a fix."
    },
    "django__django-12796": {
        "input_bounce": false,
        "trace": "The issue clearly states the current behavior (makemigrations always runs loader.check_consistent_history and thus requires a live DB), pinpoints the code location, and specifies the desired enhancement (add a command\u2010line flag to skip the consistency check or gracefully handle a missing connection). While implementation details like exact flag naming can be decided by the contributor, the scope and acceptance criteria are unambiguous and actionable."
    },
    "django__django-12821": {
        "input_bounce": false,
        "trace": "The issue clearly states the problem (some admin JS files are minified and some are not), the suggested change (stop minifying the admin\u2019s own JS files, only keep vendored libraries minified), and points to the relevant documentation. While it doesn\u2019t spell out every code change needed, it is precise enough for a contributor to implement the build process changes and remove or ignore the minified admin assets. There\u2019s a clear objective and rationale, so it\u2019s reasonably specified."
    },
    "django__django-12830": {
        "input_bounce": false,
        "trace": "The user clearly describes current behavior (initial and POST form counts get capped at a hardcoded 1000 via max_num) and wants a new parameter, absolute_max, on formset_factory to control that cap explicitly. While low\u2010level implementation details (e.g. precedence rules, exact API signatures) aren\u2019t spelled out, the overall change and where it must hook into the BaseFormSet logic are clear enough for an experienced Django contributor to implement. Hence it\u2019s reasonably specified."
    },
    "django__django-12851": {
        "input_bounce": true,
        "trace": "The issue gives only a high-level demand (\u201cremove ifequal\u201d) without any context: which template language, where in the codebase, how to handle backward compatibility or tests, or what specific changes are needed. There\u2019s no spec on usage, dependencies, or migration path. It\u2019s unclear what a successful solution would look like, so it\u2019s too vague to implement directly."
    },
    "django__django-12855": {
        "input_bounce": false,
        "trace": "The ticket clearly requests that the alias function `django.conf.urls.url()` be deprecated in favor of `django.urls.re_path()`. While it doesn\u2019t specify exact versioning or deprecation schedule, the goal (mark the function deprecated, emit warnings, update docs/tests) is unambiguous and can be sensibly implemented."
    },
    "django__django-12856": {
        "input_bounce": false,
        "trace": "The issue clearly describes the missing validation (fields named in UniqueConstraint aren\u2019t checked for existence) and references the expected behavior (raise E012 as unique_together does). An experienced Django contributor can locate the analogous unique_together checks in the codebase, add the same validation to UniqueConstraint, and write tests based on the provided demonstration. While it doesn\u2019t hand-hold through exact file paths, the requirements and expected outcome are unambiguous."
    },
    "django__django-12858": {
        "input_bounce": false,
        "trace": "The issue clearly describes the error (models.E015 being raised for lookups in Meta.ordering), the expected behavior (order_by('\u2026__isnull') should be permitted), the relevant relationships (supply\u2192product\u2192parent), and even the upstream change (#29408) that introduced the regression. A developer can locate the system check in django/core/checks/model.py and update it to allow non-transform lookups like __isnull in ordering. There\u2019s sufficient detail to scope and implement the fix without further clarification."
    },
    "django__django-12869": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the bug (collectstatic skips staticfiles checks), the desired behavior (run finder.check() and surface errors), and an outline of where to hook it in, but it leaves out details like exact error handling, test cases, and integration points. There\u2019s enough context to craft a patch, though some implementation specifics must be filled in."
    },
    "django__django-12906": {
        "input_bounce": false,
        "trace": "The issue clearly describes what changed (the implicit use of the request variable in admin templates), why it needs documenting, and where those changes should go (release notes with a deprecation warning, admin docs, and a system check warning). While you\u2019ll need to locate the exact files/sections in the codebase, the scope and requirements are sufficiently laid out to author a PR."
    },
    "django__django-12910": {
        "input_bounce": true,
        "trace": "The issue describes a high-level design idea (replace a boolean flag with a tag-based attribute) but gives no concrete guidance on where and how to implement it in the codebase, how to handle backwards compatibility, what tests or documentation updates are needed, etc. It\u2019s unclear what exactly the PR should change and how to validate it, so it\u2019s too vague for a meaningful implementation attempt."
    },
    "django__django-12915": {
        "input_bounce": false,
        "trace": "The report clearly identifies the missing async entry point on StaticFilesHandlerMixin (so ASGIStaticFilesHandler lacks get_response_async), shows the resulting traceback, and implies the needed behavior (mirror the existing sync get_response). There\u2019s enough context to infer the correct implementation pattern (e.g. wrap or reimplement get_response_async) from similar Django handlers, even though it doesn\u2019t spell out every line of code. A PR can be drafted from this."
    },
    "django__django-12928": {
        "input_bounce": false,
        "trace": "The ticket clearly spells out the feature request (add an `autoreload` flag alongside `cache_templates` in the TEMPLATES settings, defaulting to DEBUG, so that template changes flush the cache without restarting the server) and even points to a related patch (#25788) for guidance. While you\u2019d still need to fill in the implementation details in the template\u2010loader code (file\u2010watching, cache\u2010clearing logic, tests, etc.), the overall goal and API are unambiguous and actionable."
    },
    "django__django-12933": {
        "input_bounce": false,
        "trace": "The report clearly states the current behavior (clearsessions writes to stderr if clear_expired() isn\u2019t implemented) and the desired change (raise CommandError instead). It identifies exactly which command and method are affected and what the replacement behavior should be, so a developer can implement the fix without additional information."
    },
    "django__django-12957": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the exact file (contrib/gis/templates/gis/admin/openlayers.js) and the precise change needed (apply the Django `|safe` filter to float values to prevent localized decimal separators from breaking JavaScript). A developer can locate the floats in that template and wrap them with `|safe` without additional context."
    },
    "django__django-12961": {
        "input_bounce": false,
        "trace": "The report includes concrete model/code examples, the specific failing statement, the exact error message, and the expected vs. actual behavior. It even cites related tickets. There\u2019s enough detail to reproduce the problem and implement a fix to support expression-based ordering (nulls_last) on union() querysets. This is WELL_SPECIFIED."
    },
    "django__django-12965": {
        "input_bounce": false,
        "trace": "The report clearly lays out the regression: bulk delete() went from a plain DELETE to a subquery-based DELETE, which breaks LOCK TABLES and is slower. It\u2019s obvious that a fix must special\u2010case unfiltered deletes (or alias the subquery) to restore the old DELETE behaviour. While it doesn\u2019t spell out the API change line\u2010by\u2010line, there\u2019s a clear, sensible interpretation of what a successful solution entails."
    },
    "django__django-12973": {
        "input_bounce": false,
        "trace": "The issue clearly explains the scenario (missing/incorrect middleware order), shows the existing errors, and describes the desired change (add a hint to the E410 message advising to insert 'django.contrib.sessions.middleware.SessionMiddleware' before 'django.contrib.auth.middleware.AuthenticationMiddleware'). While it doesn\u2019t provide exact wording or code locations, it\u2019s straightforward to infer where and how to update the system check, so it\u2019s reasonably specified."
    },
    "django__django-12983": {
        "input_bounce": false,
        "trace": "The report clearly describes the current behavior, desired behavior, and gives concrete examples of input vs. actual and expected output. A developer can directly implement the change (e.g. stripping '-' and '_' before/after slug generation). This is enough to write a meaningful fix."
    },
    "django__django-13012": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact SQL emitted, the error raised, and the correct behavior versus incorrect behavior. It clearly identifies the bug\u2014constants wrapped in ExpressionWrapper still end up in GROUP BY\u2014and explains that they should be omitted just like plain Value() annotations. That\u2019s enough detail to implement and test a fix in the ORM compiler."
    },
    "django__django-13023": {
        "input_bounce": false,
        "trace": "The report clearly identifies the bug (TypeError raised instead of ValidationError when passing a dict to DecimalField.to_python()), explains why it\u2019s a problem, and even points to a PR that shows the intended fix (catch TypeError and wrap it as a ValidationError). There\u2019s little ambiguity about the desired behavior or scope of the change."
    },
    "django__django-13028": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates a reproducible bug in Django 3.0.7: naming a model field \u201cfilterable\u201d collides with Django\u2019s internal filterable check and raises NotSupportedError. It provides code samples, the exact traceback, and a simple workaround (renaming the field). From this information, a contributor can locate the offending check_filterable/\u2018filterable\u2019 attribute logic in Django\u2019s Query code and implement a fix or add documentation. The requirements for success\u2014restore the ability to filter on a ForeignKey whose related model has a BooleanField named \u201cfilterable\u201d\u2014are unambiguous."
    },
    "django__django-13030": {
        "input_bounce": false,
        "trace": "The issue clearly defines a reproducible problem (NULL values ending up in the SQL IN list during prefetch), gives example models and queries, and states the exact desired behavior (filter out NULL IDs before building the IN clause). An experienced Django contributor would know where to hook in, write the necessary code change, and add tests. This is sufficiently detailed to be tackled without further clarification."
    },
    "django__django-13033": {
        "input_bounce": false,
        "trace": "The ticket provides minimal reproducible models, Django versions, exact querysets, and both the actual and expected SQL output. The root cause is clearly identified (self-referential FK triggering an extra JOIN and incorrect default ordering). It\u2019s unambiguous what the correct behavior should be, so the issue is well-specified."
    },
    "django__django-13066": {
        "input_bounce": false,
        "trace": "The issue clearly describes what\u2019s wrong (Django\u2019s Argon2PasswordHasher is pinned to argon2i with outdated cost/parallelism parameters) and what needs to be done (add support for argon2id, make it the default variety, and bump memory_cost to 102400 and parallelism to 8 in line with upstream argon2-cffi changes). All the necessary context, links, and expected outcomes are provided."
    },
    "django__django-13077": {
        "input_bounce": false,
        "trace": "The report clearly describes the failure mode (django-admin runserver on Windows failing due to stripped \u201c.exe\u201d in sys.argv[0] by console-script wrappers), gives a reproducible error message, and even points to the code locations (the regex and utils/autoreload.py) where a fix (re-adding \u201c.exe\u201d) makes it work. While it lacks precise environment/version matrix, there\u2019s enough detail to draft and test a patch that fixes argv[0] handling on Windows. Thus it\u2019s reasonably specified for an initial PR."
    },
    "django__django-13085": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior, the desired change (skip msgfmt when the .mo file is newer than its .po), and even notes where in compilemessages.py to insert the mtime checks or how to handle is_writable. While test coverage details aren\u2019t spelled out, the functional requirement is unambiguous, and a developer can go ahead and implement it."
    },
    "django__django-13089": {
        "input_bounce": false,
        "trace": "The report provides a clear backtrace and points to the exact lines in _cull where fetchone() may return None, and even suggests the intended guard behavior. While it doesn\u2019t spell out every detail (e.g. exact behavior when there are no rows to cull), it\u2019s straightforward to implement a check for None before subscripting. This is enough to meaningfully attempt a fix."
    },
    "django__django-13109": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (ForeignKey.validate using the default manager filters out archived objects), shows a minimal repro, points to the exact lines in code to change, and even suggests switching to _base_manager. There\u2019s no ambiguity in what to change or how to verify success, so it\u2019s well-specified."
    },
    "django__django-13111": {
        "input_bounce": false,
        "trace": "The request is focused and actionable: add support for the ISO week-number specifier (%V) in WeekArchiveView by updating the list of accepted week formatters and adjusting _date_from_string error handling or year directive handling. While it leaves some implementation details (e.g. whether to remap %Y to %G or just improve the error message), there\u2019s a clear precedent in the code (other archive views) and a specific change to make, so it\u2019s reasonably specified."
    },
    "django__django-13112": {
        "input_bounce": false,
        "trace": "The report clearly describes the Django version change (3.0 \u2192 3.1b1), gives the exact error, shows the model, INSTALLED_APPS entry with mixed-case name, and the AppConfig. It\u2019s straightforward to reproduce and to know what needs fixing, so it\u2019s well-specified."
    },
    "django__django-13115": {
        "input_bounce": false,
        "trace": "The issue clearly states that when a UniqueConstraint is marked deferrable and also given index-specific parameters (namely include or opclasses), we should raise an error and document that incompatibility. A developer familiar with the codebase can identify where UniqueConstraint is defined, add the validation check in its __init__ or migration operation construction, choose an appropriate exception (e.g. ValueError), and update the documentation. All necessary details (which parameters to check, when to error, and that documentation is required) are provided."
    },
    "django__django-13121": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates a failing DurationField expression on SQLite/MySQL with a minimal code snippet and full traceback. While it omits deeper background (e.g. how SQLite/MySQL currently store durations), it\u2019s straightforward to reproduce and implement the needed conversion logic. There\u2019s enough detail to start working on a fix without further clarification."
    },
    "django__django-13128": {
        "input_bounce": false,
        "trace": "The ticket clearly describes the failing use case (subtracting two DateTimeFields via F-expressions plus a zero timedelta) and the desired behavior (infer a DurationField output without needing an ExpressionWrapper). While it doesn\u2019t spell out the exact code changes, it\u2019s a concrete bug/feature request with a specific example and expected result, so a contributor can sensibly implement it."
    },
    "django__django-13158": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear steps to reproduce, and a precise description of expected vs. actual behavior. Although it doesn\u2019t mention the Django version, it\u2019s still straightforward to reproduce and diagnose the union() vs. OR behavior in a ModelMultipleChoiceField, so a meaningful solution attempt can be made."
    },
    "django__django-13162": {
        "input_bounce": false,
        "trace": "The request is clear in intent (use the merged migration names instead of a timestamp) and gives concrete examples. While there are minor open choices (separator character, whether to strip numeric prefixes), there\u2019s a straightforward, \u201ceasiest\u201d implementation path: simply join the conflicting migration filenames with underscores. Thus it\u2019s reasonably specified for a developer to start coding without further clarification."
    },
    "django__django-13170": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired feature (allow nested relations in FilteredRelation conditions), provides an example of the current error, and indicates expected behavior. While implementation details are not fleshed out, there\u2019s no ambiguity about what success looks like."
    },
    "django__django-13192": {
        "input_bounce": false,
        "trace": "The report clearly identifies the failing code path (sanitize_address \u2192 Header.encode), the Python change that broke it, and the user-visible symptom (errors on names >75 chars). While it doesn\u2019t prescribe the exact code change, it\u2019s straightforward to infer that Django must adjust its header encoding (e.g. overriding Header\u2019s maxlinelen or disabling folding) so that long display names no longer generate invalid newlines. This is sufficient context to craft a concrete solution."
    },
    "django__django-13195": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (delete_cookie() drops the SameSite attribute), shows reproductions and warnings, and proposes exactly how delete_cookie should be adjusted (accept/preserve samesite and secure flags). The required change is unambiguous and actionable."
    },
    "django__django-13199": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (delete_cookie() drops the SameSite attribute), shows reproductions and warnings, and proposes exactly how delete_cookie should be adjusted (accept/preserve samesite and secure flags). The required change is unambiguous and actionable."
    },
    "django__django-13212": {
        "input_bounce": false,
        "trace": "The issue clearly defines the desired behavior\u2014built-in validators should include the input value in the ValidationError context so that messages can reference %(value)s\u2014and even points to a doc example. While you\u2019d need to enumerate the specific validators to update, the goal and implementation approach are unambiguous. This makes the ticket reasonably specified for a real code change."
    },
    "django__django-13218": {
        "input_bounce": false,
        "trace": "The issue clearly states what needs to change (remove the obsolete __file__ check on the migrations package) and why (pkgutil.iter_modules() already handles namespace packages). It even references the exact commits/PRs involved. There\u2019s a straightforward implementation path and tests to adjust, so it\u2019s well specified."
    },
    "django__django-13220": {
        "input_bounce": false,
        "trace": "The request is clear enough to implement an __eq__ override on ValidationError: compare the stored error messages (and/or message_dict) as unordered collections rather than by insertion order. While some details (e.g. handling of codes/params) aren\u2019t spelled out, the core requirement (order-independent equality of messages) is straightforward to interpret and implement."
    },
    "django__django-13230": {
        "input_bounce": false,
        "trace": "The ticket clearly defines what needs to be changed\u2014add a comments (or item_comments) argument to feed.add_item() in syndication.views and render it in the output feed\u2014so there\u2019s no ambiguity about the desired API or functionality."
    },
    "django__django-13240": {
        "input_bounce": false,
        "trace": "The issue clearly states the current behavior (raising ImproperlyConfigured at settings initialization if SECRET_KEY is missing) and the desired change (defer that exception until someone actually accesses Settings.SECRET_KEY). The use case is spelled out, and an experienced Django developer can locate the relevant code (in django/conf) and implement the deferred check. While it doesn\u2019t point to exact lines of code, it gives a precise change requirement that can be reasonably interpreted and implemented."
    },
    "django__django-13250": {
        "input_bounce": false,
        "trace": "The issue clearly states the problem (nested JSONField __contains/__contained_by on SQLite doesn\u2019t work), provides a set of concrete failing examples (test cases), and outlines the desired behavior. While it doesn\u2019t prescribe the exact implementation approach (SQL vs. Python emulation) or performance constraints, the expected outcomes are clear from the tests. This makes it reasonably specified for someone familiar with Django\u2019s JSONField to attempt a solution."
    },
    "django__django-13251": {
        "input_bounce": false,
        "trace": "The report clearly describes the unexpected TypeError when filtering on a BooleanField named `negate`, gives minimal reproduction steps (model definition and filter call), shows the exact error message, and notes a temporary workaround. There\u2019s enough detail to understand and fix the naming conflict in Django\u2019s filter() implementation."
    },
    "django__django-13265": {
        "input_bounce": false,
        "trace": "The report clearly lays out the scenario (model with order_with_respect_to and an index on the automatically added _order field), shows the generated migration ops ordering, and identifies the failure condition (AddIndex on _order runs before the AlterOrderWithRespectTo that creates the column). While you\u2019d still need to know some Django internals to implement the fix, the desired behavior and problem point are unambiguous. It\u2019s not missing any critical details about what change is required\u2014just the precise code location in Django\u2019s migration auto-generation to adjust the op order\u2014so it\u2019s reasonably specified."
    },
    "django__django-13267": {
        "input_bounce": false,
        "trace": "The report includes a minimal repro (code snippet), the exact error trace, version info (Django 1.8 vs 1.9.8), and pointers to the code that changed behavior. The scope (instantiating an abstract model with a string FK) and expected vs. actual behavior are clear, making it actionable."
    },
    "django__django-13279": {
        "input_bounce": false,
        "trace": "The report clearly identifies the regression (session format change in commit #31274) and the desired behavior (fallback to the legacy encode when DEFAULT_HASHING_ALGORITHM is 'sha1'). While it omits low-level details (exact file locations, test cases), there\u2019s a straightforward, reasonable interpretation of what needs to be implemented: add a conditional branch to use the old encoding path for sha1 sessions. Thus it\u2019s actionable."
    },
    "django__django-13281": {
        "input_bounce": false,
        "trace": "The issue clearly outlines the changed behavior, provides a minimal reproducible test case, identifies the relevant commit, and even suggests the specific fix (making Model.copy do a deep-copy of its fields_cache). There\u2019s no ambiguity about what\u2019s broken or what a correct solution should look like."
    },
    "django__django-13287": {
        "input_bounce": false,
        "trace": "The report clearly describes the scenario (an app with default_app_config but no apps.py or an empty apps.py), shows the exact tracebacks, and even points to the regression change. While it doesn\u2019t prescribe the precise code change, it provides full context and reproduction steps, making it reasonably specified for an implementer to diagnose and fix the unbound local error."
    },
    "django__django-13295": {
        "input_bounce": false,
        "trace": "The reporter clearly describes the problem (silent drop of non-concrete update_fields), points at the exact code paths in Django\u2019s Model.save(), and even suggests a specific fix (raise an error when update_fields includes a non-concrete field).  There\u2019s no ambiguity about the expected behavior or where to implement it, so this is well specified for a meaningful PR."
    },
    "django__django-13297": {
        "input_bounce": false,
        "trace": "The report includes: a minimal reproduction, version numbers (Django 3.0 vs 3.1, Python 3.7, SQLite), the exact error message and backtrace, and the observed difference in type (SimpleLazyObject vs str). It\u2019s clear what\u2019s broken, where it happens, and what a correct behavior would look like (kwargs values being real strings), so you can start drafting a patch or workaround immediately."
    },
    "django__django-13300": {
        "input_bounce": false,
        "trace": "The issue clearly describes current vs. desired SQL output for Exists() subqueries and gives a concrete use case (reducing query size). It\u2019s straightforward to implement a change so that Exists() emits SELECT 1 when there are no required output columns. There may be some edge cases to consider (\u201cwhere possible\u201d), but overall it\u2019s well enough specified to attempt a solution without further clarification."
    },
    "django__django-13301": {
        "input_bounce": false,
        "trace": "The report clearly identifies the command (createsuperuser), the mode (interactive), the incorrect behavior (validation query always runs on the default DB instead of the one passed via --database), and the desired change (have the default username validation run against the specified database). This is sufficient to write a fix."
    },
    "django__django-13315": {
        "input_bounce": true,
        "trace": "The report describes a general problem (duplicate entries when using limit_choices_to with a Q object on a ForeignKey involving joins) but gives no concrete code examples, reproduction steps, or details on the failure mode beyond a vague regression test reference. It\u2019s not clear exactly where or how to apply a fix without further context or the actual test/patch. Thus it\u2019s too underspecified to act on directly."
    },
    "django__django-13321": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the failure (invalid legacy session data triggering a BadSignature/Incorrect padding and causing a 500), the stack trace down to Django\u2019s session decode routines, and the context (upgrading to Django 3.1, stale cookie on staging). While it doesn\u2019t mandate an exact patch, it\u2019s clear what must be done (catch legacy\u2010decode errors and fall back to an empty session). This is enough to craft and verify a fix."
    },
    "django__django-13325": {
        "input_bounce": false,
        "trace": "The issue clearly identifies which backend methods need to call self.validate_key(key) and requests adding corresponding tests. While it doesn\u2019t spell out exact code snippets or test details, it\u2019s straightforward to locate those methods in the codebase and add the validation and unit tests. Thus it\u2019s reasonably specified for a developer to implement a correct fix."
    },
    "django__django-13341": {
        "input_bounce": true,
        "trace": "The report describes the problem and desired change (stop auto-injecting URL kwargs, and remove the SimpleLazyObject issue), but it doesn\u2019t specify exactly how TemplateView.get_context_data should be modified (e.g. drop .update(self.kwargs) entirely, or cast values, and how to handle backwards compatibility). That leaves too much ambiguity for a clear PR."
    },
    "django__django-13343": {
        "input_bounce": false,
        "trace": "The issue clearly states what\u2019s wrong (callable storage is being evaluated during deconstruction), what the correct behavior should be (preserve the callable reference, just like upload_to), and even points to existing code paths for guidance. There\u2019s enough context to implement, test, and verify the fix in Django\u2019s FileField.deconstruct without further clarification."
    },
    "django__django-13344": {
        "input_bounce": false,
        "trace": "The report clearly states the environment (Django 3.1, ASGI/uvicorn), the exact behavior observed (first middleware\u2019s process_response sees a coroutine, downstream ones see HttpResponse), and provides minimal reproducible steps. The expected versus actual behavior is unambiguous, so you can craft a fix or deeper investigation based on this description."
    },
    "django__django-13346": {
        "input_bounce": false,
        "trace": "The issue clearly describes a mismatch in behavior between an __in lookup and an exact lookup on a JSONField key transform, gives example queries and results, and states the expected behavior. While details like Django/DB versions are missing, there\u2019s a clear bug to fix and enough context to implement and test a solution. A sensible interpretation of the required fix is available without further clarification."
    },
    "django__django-13347": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (non\u2010string dict keys short\u2010circuit value recursion), pinpoints the code location, and states the expected behavior (sanitize nested values regardless of key type). A PR can be written directly against that."
    },
    "django__django-13354": {
        "input_bounce": false,
        "trace": "The report includes clear reproduction steps, the exact failure scenario, the expected vs. actual behavior, and even points to the specific component (MigrationOptimizer) where the logic is wrong. A developer can write a regression test and update the optimizer logic accordingly. Therefore it\u2019s well-specified."
    },
    "django__django-13363": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (TruncDate/TruncTime ignore the passed tzinfo and always use the global timezone), points to the exact offending code lines, shows the expected behavior and example, and even references the similar method to follow. All the information needed to implement and test the fix is present."
    },
    "django__django-13369": {
        "input_bounce": false,
        "trace": "The report includes a minimal repro (code snippet), the exact error/traceback, the Django versions (3.1 worked, 3.2 broken), and the expected behavior (multiplying a constant by an AutoField should just work). That is enough detail to write a failing test and implement a fix, so it\u2019s WELL_SPECIFIED."
    },
    "django__django-13371": {
        "input_bounce": false,
        "trace": "The report clearly identifies a reproducible bug (PicklingError on django.db.models.query.Row instances returned by values_list(named=True)), shows example code and error, and states the desired outcome (Row should be pickleable so things like cacheops will work). It\u2019s straightforward for a developer to locate the Row class and add or adjust its __reduce__ implementation (or module assignment) to support pickling. This is a well\u2010scoped, self\u2010contained fix."
    },
    "django__django-13386": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal\u2014convert max_age to an integer in set_cookie()\u2014and even points out RFC requirements and why it matters. However, it leaves open key policy decisions (how to handle floats with nonzero decimals, whether to round or truncate, and what to do on conversion failure). Those questions would need to be answered before a PR could be finalized. Thus it\u2019s not fully specified but has a sensible interpretation."
    },
    "django__django-13401": {
        "input_bounce": false,
        "trace": "The report clearly describes the current behavior (fields from different concrete models compare equal due to only using creation_counter), the desired change (include the field\u2019s model in __eq__, __hash__, and adjust __lt__), and even points to where the behavior lives (Field.__eq__/__hash__/__lt__). We can write the PR directly against django.db.models.fields.Field, update the comparator methods and adjust any tests for ordering. This is sufficiently precise to implement without further clarification."
    },
    "django__django-13406": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example (model, code snippet), shows the exact traceback, describes expected vs. actual behavior, and cites the relevant docs. It\u2019s clear what\u2019s wrong (pickled Query losing its values()/annotate behavior) and what a correct solution should restore (returning dicts, not broken model instances)."
    },
    "django__django-13410": {
        "input_bounce": false,
        "trace": "The issue clearly describes the incorrect return logic (using ret == 0 when flock returns None on success), explains the failure mode (always returning False), and even provides a proposed diff to fix it. All requirements for a solution are present."
    },
    "django__django-13417": {
        "input_bounce": false,
        "trace": "The report clearly states the unexpected behavior, provides minimal reproduction steps and SQL examples, and specifies the expected vs. actual values of .ordered. There\u2019s no ambiguity about what needs to change: .ordered should reflect the absence of an ORDER BY after a GROUP BY, despite Meta.ordering being set. This is sufficient to begin implementation."
    },
    "django__django-13431": {
        "input_bounce": false,
        "trace": "The report includes a minimal model, exact ORM call, generated SQL, resulting error, and the expected SQL. It\u2019s clear what\u2019s broken and what the correct behavior should be, so it\u2019s well specified."
    },
    "django__django-13447": {
        "input_bounce": false,
        "trace": "The issue clearly states what needs to change\u2014include the actual model class in the app_list context dict and make the private _build_app_dict method public for reuse. While it doesn\u2019t show the exact code, it\u2019s a straightforward API tweak in Django\u2019s AdminSite, so it\u2019s sufficiently specified to implement."
    },
    "django__django-13449": {
        "input_bounce": false,
        "trace": "The report clearly describes the environment (Django 3.0.7, SQLite), shows a minimal model and query that triggers the bug, includes the exact SQL being generated versus what\u2019s desired, and even points to the workaround (using output_field). There\u2019s no ambiguity about what needs fixing (the placement of the CAST relative to OVER for DecimalField in window functions)."
    },
    "django__django-13454": {
        "input_bounce": false,
        "trace": "The issue clearly shows the model definition, the exact error message, and the goal (using EmptyFieldListFilter on a GenericForeignKey). It outlines current behavior, expected behavior, and a specific extension point (adding empty_strings_allowed support to GenericForeignKey). While there\u2019s room for choice in implementation details, there\u2019s enough context to propose and build a concrete fix."
    },
    "django__django-13460": {
        "input_bounce": true,
        "trace": "The issue describes a problem (TypeError when passing floats to blocktrans/gettext) and suggests two possible approaches, but it doesn\u2019t specify which approach to take, what the exact behavior or message should be, or how to handle edge cases. The requirements are open-ended and ambiguous, making it unclear what a complete solution would entail."
    },
    "django__django-13466": {
        "input_bounce": false,
        "trace": "The report includes clear code examples, steps to reproduce (both via CLI and call_command), the exact error traceback, and the expected behavior (that --flag should work when calling via call_command). It\u2019s straightforward what needs fixing (handling store_true flags in call_command with mutually exclusive groups), so it\u2019s well-specified."
    },
    "django__django-13490": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, explains the unexpected behavior (get() after difference() incorrectly raises MultipleObjectsReturned), specifies the context (Django versions, Python versions), and clearly states the desired outcome (raise a descriptive error when using get() after union/intersection/difference). There\u2019s a clear path to implement: detect combined QuerySets in QuerySet.get() and raise a NotSupported or descriptive error. This makes it WELL_SPECIFIED."
    },
    "django__django-13495": {
        "input_bounce": false,
        "trace": "The report clearly identifies the missing timezone conversion in the TruncDay implementation for DateField, points to the exact code path (as_sql), and shows the generated SQL vs. the desired behavior. While it doesn\u2019t spell out the exact patch in code, there\u2019s a straightforward, sensible way to add the tzinfo handling (e.g. by calling datetime_trunc_sql and then casting to date), so it\u2019s sufficiently specified to implement a fix."
    },
    "django__django-13512": {
        "input_bounce": false,
        "trace": "The issue clearly describes what\u2019s wrong (Django admin\u2019s JSONField widget uses json.dumps with default ensure_ascii=True, escaping Chinese chars) and even points to a concrete fix (use json.dumps(..., ensure_ascii=False)). The exact behavior, reproduction steps, and desired behavior are all stated, so it\u2019s well-specified."
    },
    "django__django-13513": {
        "input_bounce": false,
        "trace": "The report points to a specific function in a known file, describes the incorrect behavior, cites PEP 415, and even provides a clear code snippet of the desired change. It\u2019s straightforward to implement and test in the debug error view."
    },
    "django__django-13516": {
        "input_bounce": false,
        "trace": "The issue clearly describes a specific problem (flush() on stdout/stderr in Django management commands not emitting incremental output during a long migration) along with the current versus expected behavior. While it doesn\u2019t include every detail (e.g., Django version, OS, minimal repro code), there is a sensible interpretation of what needs to be fixed\u2014ensure that flush() actually forces output to appear immediately. This is enough to start investigating and producing a meaningful solution."
    },
    "django__django-13528": {
        "input_bounce": false,
        "trace": "The report clearly describes the incorrect behavior (US-style separators leaking through after chaining floatformat to intcomma in a German locale), provides input, observed output, and expected output, and references the Django version. While it doesn\u2019t prescribe the exact code change, there\u2019s enough context to reproduce and fix the bug. Thus it is reasonably specified."
    },
    "django__django-13530": {
        "input_bounce": false,
        "trace": "The issue gives a concrete model setup, a precise code snippet showing how to reproduce the invalid SQL, and the actual versus expected behavior (it worked before Django 3.1). You can reproduce the bug, write a test, and implement a fix for KeyTransform ordering SQL generation. While it doesn\u2019t spell out the exact SQL to be generated, it\u2019s clear enough what\u2019s going wrong and what needs to be fixed."
    },
    "django__django-13537": {
        "input_bounce": false,
        "trace": "The report clearly states what\u2019s broken (dbshell ignores the charset in DATABASES[...]['OPTIONS']), under what conditions (MySQL with utf8), and even includes a proposed patch to inspect and forward the charset setting. While we\u2019d still want to review exact diff and add tests or extend to other backends, there\u2019s a straightforward fix to implement and verify. Hence it\u2019s reasonably specified."
    },
    "django__django-13551": {
        "input_bounce": false,
        "trace": "The report clearly describes the sequence that leads to a stale but still-valid reset token after an email change, pins the exact code location (PasswordResetTokenGenerator._make_hash_value()), and even proposes the precise change (include user.email in the hash). While it notes that AbstractBaseUser doesn\u2019t require an email field, this is a straightforward edge-case to handle (e.g. using getattr). Overall, it\u2019s unambiguous what needs to be done for a correct fix."
    },
    "django__django-13553": {
        "input_bounce": false,
        "trace": "The issue provides clear reproduction steps, SQL error examples across databases, and a concrete proposal for behavior (make union a no-op when there\u2019s only one non-empty queryset). It\u2019s specific enough to implement and test the fix."
    },
    "django__django-13556": {
        "input_bounce": true,
        "trace": "The issue describes that calling transaction.on_commit(None) currently crashes with a TypeError and suggests either preventing registration of None or making it a no-op. However, it doesn\u2019t specify which behavior is preferred (fail-fast vs. silent skip), nor outline the exact API change or desired error message/behavior. That ambiguity makes it unclear what a successful solution should look like."
    },
    "django__django-13560": {
        "input_bounce": false,
        "trace": "The report pinpoints a clear bug (exception repr shows an itertools.chain object instead of the actual items) and the intended fix (materialize the iterator into a list or tuple so the repr is informative) is obvious. While implementation details aren\u2019t spelled out, there\u2019s a straightforward, sensible way to correct it, so the spec is reasonably complete."
    },
    "django__django-13568": {
        "input_bounce": false,
        "trace": "The request points to a specific Django system check (E003) and provides the code path and desired behavior. It clearly describes the current behavior (error triggered when USERNAME_FIELD isn\u2019t unique=True), the alternative approach (using UniqueConstraint in Meta.constraints), and the proposed change (modify the check to recognize UniqueConstraint on the USERNAME_FIELD). There\u2019s no ambiguity about where or how to implement this fix."
    },
    "django__django-13569": {
        "input_bounce": false,
        "trace": "The report provides a clear minimal reproduction with models, sample data, expected vs. actual behavior, dumped SQL, and even a proposed patch. It\u2019s unambiguous what\u2019s wrong and how to test a fix, so it\u2019s well-specified."
    },
    "django__django-13578": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the exact location in django/forms/formsets.py, describes the current behavior and the desired change (include form._errors in the raised ValidationError message), and even supplies example errors. A developer can jump in and implement this enhancement without needing further clarification."
    },
    "django__django-13589": {
        "input_bounce": false,
        "trace": "The issue provides a minimal reproducible example (model definitions, test case, exact steps with line markers), shows the actual vs. expected behavior, and clearly states the desired change (auto-updating the foreign key field when the related object is saved after assignment). There\u2019s no ambiguity about what\u2019s failing or what the fix should aim for, making it well-specified."
    },
    "django__django-13590": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, root cause, and exact code change needed (use argument unpacking when re-instantiating namedtuples in resolve_lookup_value). There\u2019s no ambiguity about where or how to apply the fix."
    },
    "django__django-13606": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the exact function to change (sql.Query.split_exclude), explains the current behavior (using NOT IN), and specifies the desired behavior (use NOT EXISTS instead). There\u2019s no ambiguity about what to implement\u2014just a straightforward swap of the SQL construct\u2014so it\u2019s well-specified."
    },
    "django__django-13615": {
        "input_bounce": true,
        "trace": "The issue mixes two different goals (adding a warning vs. normalizing locale codes), doesn\u2019t define what makes a code \u201ccorrect,\u201d and provides no concrete rules or acceptance criteria for normalization or warning behavior. It\u2019s unclear what inputs are valid, what transformations should occur, or what output/warning should look like."
    },
    "django__django-13616": {
        "input_bounce": true,
        "trace": "The issue describes a vague desire to improve an error message or adjust default LOCALE_PATHS behavior but does not specify exactly what change is required or where. There\u2019s no concrete acceptance criterion or code location, only general ideas (better wording, include manage.py directory). This leaves too much ambiguity about the intended solution."
    },
    "django__django-13620": {
        "input_bounce": false,
        "trace": "The issue clearly describes what\u2019s happening (nargs='+\u2019 in an exclusive required group blows up when passed as a list or repeatedly), shows code examples, and implicitly states the desired behavior (accept a Python list or multiple --foo flags and yield the full list). There\u2019s enough detail to attempt a fix, though not every edge case or desired API nuance is spelled out. Hence it\u2019s reasonably specified."
    },
    "django__django-13658": {
        "input_bounce": false,
        "trace": "The report clearly identifies exactly where the wrong program name is used (in the CommandParser constructor) and what change is needed (pass prog=self.prog_name). There\u2019s no ambiguity about desired behavior or context, so it\u2019s ready for implementation."
    },
    "django__django-13660": {
        "input_bounce": false,
        "trace": "The issue clearly points out where and why the `exec` call in the Django shell command loses the `django` name inside functions, shows the failing code block, and even suggests passing a fresh globals dict to `exec`. While the exact shape of that dict (e.g. including `__builtins__`) is left to the implementer, there\u2019s a clear location and intent for the fix. This is enough to drive a concrete PR, so it\u2019s reasonably specified."
    },
    "django__django-13665": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates the bug with a minimal code example, shows exactly where the wrong manager is used (serialize_db_to_string using _default_manager), and states the desired behavior (use base_manager instead). There\u2019s no ambiguity about what change is required to fix the issue."
    },
    "django__django-13667": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior of QuerySet.exists(), the desired SQL transformation for union queries, and why it\u2019s needed. It provides concrete examples and constraints (only union, not intersection/difference). With knowledge of Django\u2019s QuerySet and SQL compiler, one can implement the optimization. Thus it is well-specified for a meaningful solution."
    },
    "django__django-13670": {
        "input_bounce": false,
        "trace": "The issue clearly states the inconsistency in zero-padding for years < 1000 when using the \u2018y\u2019 format character in Django\u2019s dateformat.y(). It provides concrete examples against both Python\u2019s datetime.strftime and PHP\u2019s date(), specifies the expected behavior, and even links to a PR with a proposed fix. Requirements are unambiguous and sufficient to implement and verify a solution."
    },
    "django__django-13682": {
        "input_bounce": false,
        "trace": "The report clearly describes the problem (passing a CBV class instead of its .as_view()), where in the code to hook (django.urls.path()), what check to add (detect subclass of View type), and even gives the exact error message to raise. There\u2019s no ambiguity about the desired outcome or location of the change."
    },
    "django__django-13684": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the faulty code in django/db/utils.py (load_backend), shows the unwanted behavior (swallowing the original ImportError and giving a misleading \u2018not available\u2019 message), and proposes a specific change to the error text and conditional display of the \u201cTry using\u2026\u201d suggestion. While the exact code changes aren\u2019t spelled out step-by-step, there\u2019s a straightforward, sensible interpretation of what needs to be done."
    },
    "django__django-13689": {
        "input_bounce": false,
        "trace": "The report clearly shows the Django ORM calls, the resulting SQL, and the discrepancy (GROUP BY using the base field instead of the ExpressionWrapper expression). It provides reproduction steps, the SQL output, and the expected behavior. This is sufficient to craft a fix or further tests."
    },
    "django__django-13691": {
        "input_bounce": false,
        "trace": "The report clearly describes the environment (Django 3.1.3, SQLite only), the exact operation (`.values('my_json_field__position')`), the failure mode (TypeError when the JSON path value is numeric), and shows the full traceback. You can identify the broken code path (JSONField.from_db_value always calling json.loads on whatever is returned, even floats) and craft a patch to handle non-string values. This is well-scoped and actionable."
    },
    "django__django-13693": {
        "input_bounce": false,
        "trace": "The report includes a full traceback, environment info, reproduction steps, root\u2010cause analysis and even a proof\u2010of\u2010concept patch. It\u2019s clear what API to change (get_child_arguments) and how (cast Path objects to str)."
    },
    "django__django-13708": {
        "input_bounce": false,
        "trace": "The request clearly defines the feature: a new durable=True flag on transaction.atomic() that enforces a top\u2010level commit (i.e. raises if nested), ensuring durability. While implementation details (exact error class, tests, docs updates) will need filling in, there\u2019s a sensible interpretation and path to a solution."
    },
    "django__django-13710": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (inline admin uses the model\u2019s verbose names), the desired change (if an InlineAdmin specifies verbose_name but not verbose_name_plural, derive the plural from the inline\u2019s verbose_name by default), and even references existing tests in the submitted patch. It\u2019s obvious where in the admin options code the defaults for verbose_name_plural need updating, so a PR could be authored without needing further clarification."
    },
    "django__django-13714": {
        "input_bounce": false,
        "trace": "The report clearly describes the exact configuration, Django version, error message, and repro steps (missing DB file leading to a misleading JSONField error). It specifies the expected vs. actual behavior, and the root cause (bad filepath hidden by a JSON extension check). An engineer can reproduce and implement a more appropriate file-not-found check or error message before the JSONField check, so it\u2019s sufficiently detailed for a solution."
    },
    "django__django-13722": {
        "input_bounce": true,
        "trace": "The request identifies the need for a new hook method on InlineModelAdmin to supply initial formset data, drawing analogy to get_changeform_initial_data. However, it omits critical details\u2014method name, signature, expected return structure, integration points, and handling of the list-based formset data. Without these specifics, multiple plausible implementations exist, making the issue too ambiguous for a direct solution."
    },
    "django__django-13741": {
        "input_bounce": false,
        "trace": "The issue identifies a concrete change (setting disabled=True by default on ReadOnlyPasswordHashField), explains why (so clean_password isn\u2019t required, preventing unintended edits), points to the relevant code path and docs, and has a clear success criterion. This is actionable without further clarification."
    },
    "django__django-13743": {
        "input_bounce": false,
        "trace": "The user clearly identifies the function to change (is_broken_pipe_error in django/core/servers/basehttp.py) and the desired behavior (treat ConnectionAbortedError the same as BrokenPipeError). This is a straightforward, targeted fix with no major ambiguities or additional requirements."
    },
    "django__django-13744": {
        "input_bounce": false,
        "trace": "The issue clearly states what needs to be done (deprecate the old MemcachedCache backend in Django 3.2, remove it in 4.1), why (python-memcached is unmaintained and there\u2019s a pymemcache alternative), and references relevant PRs/issues. A developer can proceed by adding deprecation warnings, updating docs and tests, and scheduling removal. There\u2019s enough detail to implement a solution."
    },
    "django__django-13768": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the exact function to modify (Signal.send_robust), the specific change to make (add a logger.exception() in its except block), and the rationale behind it. That gives a precise scope for implementation without ambiguity."
    },
    "django__django-13773": {
        "input_bounce": false,
        "trace": "The issue clearly describes a reproducible scenario (a specific sequence of RenameField operations causing a conflict when squashing migrations), provides a test migration file, outlines the expected vs. actual behavior, and even pinpoints the likely root cause in the optimizer logic. This is sufficient for a developer to write a targeted fix."
    },
    "django__django-13774": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (prefetch_related_objects skips already processed model instances when those instances are reused, because it flags them as \"fetched\" via a to_attr check). It even points to the exact code paths and explains what the expected behavior should be (to apply the to_attr to each instance, even if it's been seen before). While there\u2019s no full repro snippet, there\u2019s enough detail\u2014code pointers, clear reproduction scenario, and an expected outcome\u2014to craft a meaningful fix or test. Therefore it is reasonably specified."
    },
    "django__django-13786": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, pinpoints the exact code location, shows the incorrect behavior and the desired behavior, and even cites the Django version tested. There\u2019s enough detail to write a targeted fix and tests, making it well-specified."
    },
    "django__django-13791": {
        "input_bounce": false,
        "trace": "The report includes concrete examples of actual vs. expected behavior, pinpoints the problematic code location, and explains the root cause and desired outcome. You can reproduce the bug, know where to fix it, and understand how to verify success."
    },
    "django__django-13794": {
        "input_bounce": false,
        "trace": "The report clearly describes a concrete bug (the 'add' template filter throws a TypeError when combining a normal string with a lazy string proxy) and what the expected behavior should be (string concatenation should work, forcing evaluation of the lazy proxy). There\u2019s enough information to write a fix in the filter implementation (e.g. wrap inputs with force_text) and add tests, even if some implementation details (exact coercion function, test framework) must be inferred from the existing codebase. Hence it\u2019s reasonably specified."
    },
    "django__django-13797": {
        "input_bounce": true,
        "trace": "This is a high\u2010level feature request (\u201cadd fixtures compression support in dumpdata\u201d) but gives no details on how to select compression (e.g. flags or file extensions), which formats to support, or how it should behave. Additional specification is needed to implement and test the feature."
    },
    "django__django-13807": {
        "input_bounce": false,
        "trace": "The report clearly describes the reproduction steps, shows the exact error and stack trace, pinpoints the faulty code lines in the SQLite backend (missing quoting of table names in PRAGMA statements), and even lists the affected versions. A patch can be written to properly quote the table names, so the issue is well\u2010specified."
    },
    "django__django-13808": {
        "input_bounce": false,
        "trace": "The issue clearly describes the desired feature: support PostgreSQL service aliases (via pg_service.conf) in Django\u2019s DATABASES settings, without duplicating the database name, and suggests possible CONFIG formats (either as an OPTIONS key or a new SERVICE key). While there are some minor implementation details left (e.g. exact integration points in Django\u2019s backend code, validation errors, docs), the intent and scope are well defined and unambiguous. A developer can reasonably proceed with coding and PR submission."
    },
    "django__django-13809": {
        "input_bounce": false,
        "trace": "The request to add a `--skip-checks` flag to the `runserver` command is clear in intent (skip the built-in system checks), and points to exactly where the change lives and why it\u2019s needed. However, it doesn\u2019t spell out the precise API contract (short/long flag names, docs/tests updates, reload behavior, etc.), leaving some implementation details to the contributor. This makes it reasonably specified rather than fully precise."
    },
    "django__django-13810": {
        "input_bounce": false,
        "trace": "The report clearly describes the problem, its steps to reproduce (with a sample project), the observed vs. expected behavior, and even pinpoints the relevant Django code path. A maintainer can reproduce, trace, and propose a fix or documentation update without further clarification."
    },
    "django__django-13814": {
        "input_bounce": false,
        "trace": "The issue pinpoints a specific function and line in django/template/backends/django.py, explains the unwanted behavior (swallowing the ImportError and raising InvalidTemplateLibrary), provides reproduction steps and stack traces, and even suggests the intended behavior (allow the original ImportError to propagate). This is clear and actionable."
    },
    "django__django-13820": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior in MigrationLoader.load_disk, the problem (skipping non-namespace packages lacking __file__), and a concrete proposal (only skip when __file__ is missing and __path__ isn\u2019t a list). The code location is specified, and the change is narrowly scoped. This is sufficient to implement the requested fix."
    },
    "django__django-13821": {
        "input_bounce": false,
        "trace": "The request (\u201cDrop support for SQLite < 3.9.0\u201d) clearly states the goal\u2014raise the minimum SQLite version to 3.9.0, update any version checks, docs, CI, and remove legacy fallbacks\u2014but it doesn\u2019t list specific files or steps. An experienced Django contributor can reasonably work out what to change, but the details (which version\u2010check routines, docs sections, tests, CI configs, etc.) aren\u2019t spelled out. Thus it\u2019s reasonably specified."
    },
    "django__django-13822": {
        "input_bounce": false,
        "trace": "The issue clearly describes the erroneous E305 validation being raised when using related_name='+' on many-to-many fields across models with the same name in different apps. It includes a minimal reproduction repository and spells out the expected behavior (i.e. no error when related_name='+' is used). This is sufficiently precise to attempt a fix."
    },
    "django__django-13837": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current limitation in django.utils.autoreload.get_child_arguments, pinpoints the exact behavior to change (detect python -m <pkg> via __main__.__spec__.parent), and even provides the algorithm and rationale. With access to the codebase it\u2019s straightforward to implement and verify the fix as described."
    },
    "django__django-13841": {
        "input_bounce": false,
        "trace": "The issue clearly defines the problem (module\u2010level use of __file__), enumerates the exact modules affected, and even proposes specific fixes (with linked commits). The scope is well\u2010delimited and the required changes are detailed, so it is well\u2010specified."
    },
    "django__django-13884": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (set_language unquotes %26 into &), provides a minimal Django test reproducing it, and states the expected behavior. That makes it well-specified and actionable."
    },
    "django__django-13915": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal (dropping support for Python 3.6 and 3.7) and points to the relevant policy and version timelines. However, it doesn\u2019t spell out the exact steps or scope (e.g., updating setup/config, CI, documentation, code removal). A contributor can infer the necessary changes but will need to fill in those details. Thus it\u2019s reasonably specified."
    },
    "django__django-13924": {
        "input_bounce": true,
        "trace": "The report states a high-level bug (deferred SQL errors still mark migrations as applied) but lacks repro steps, error context, or guidance on where/how to handle the deferred SQL execution in the codebase. Without knowing the existing transaction flow or intended behavior, it\u2019s unclear what changes are needed for a fix. Thus the issue is too vague to act on meaningfully."
    },
    "django__django-13925": {
        "input_bounce": true,
        "trace": "The report describes a warning about inherited primary keys in Django 3.2 alpha and asserts it\u2019s a bug, but it doesn\u2019t include any code samples, model definitions, or specific steps to reproduce. Without at least a minimal example showing how the primary key is declared on the base class, how the subclass is defined, and how the check logic in Django is falling short, it\u2019s impossible to craft a precise fix. We don\u2019t know exactly which parts of Django\u2019s model-checking logic need changing. More details (reproducer, code snippets, expected vs. actual behavior) are required."
    },
    "django__django-13933": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the missing interpolation of the invalid choice value in ModelChoiceField\u2019s default_error_messages and points to the relevant code snippets. It proposes adjusting the error message and passing the value parameter in the ValidationError. While exact lines aren\u2019t spelled out, it\u2019s a straightforward, self-contained change that can be implemented without further clarification."
    },
    "django__django-13952": {
        "input_bounce": false,
        "trace": "The report clearly identifies that the migrate command\u2019s pre/post signal emitters don\u2019t take a stdout parameter, so their verbose output always goes to sys.stdout (polluting it in tests). It indicates where the bug happens, what behavior is expected (signals should write to the provided stdout), and even points to a related PR discussion. While you\u2019ll need to look at the signal\u2010emitting functions and the call_command implementation to apply the change, there\u2019s a clear, actionable scope. Hence it\u2019s reasonably specified."
    },
    "django__django-13964": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear description of expected vs actual behavior, model definitions, and step-by-step reproduction. There\u2019s sufficient detail to diagnose and implement a fix."
    },
    "django__django-13992": {
        "input_bounce": false,
        "trace": "The report gives a concrete repro (code snippet), the exact SQL that\u2019s being generated, the database feature in play (PostgreSQL\u2019s DISTINCT ON), and clearly states the undesirable outcome and desired behavior (either raise an informative error or actually generate the intended per-post delete). That\u2019s all the detail you need to write a test case and implement the fix, so the request is well-specified."
    },
    "django__django-14007": {
        "input_bounce": false,
        "trace": "The report clearly describes the unexpected behavior (the from_db_value hook isn\u2019t applied on insert/returning), includes minimal reproducible examples, and specifies the expected behavior (that returned values should be passed through the field\u2019s converters). There is no ambiguity about what needs to be changed. "
    },
    "django__django-14011": {
        "input_bounce": false,
        "trace": "The issue clearly describes a regression in LiveServerTestCase\u2019s threaded server support (DB connections left open, race on shutdown), gives reproduction steps, environment, related commits/issues, and a workaround. It\u2019s not a complete patch spec, but there\u2019s a clear target for a fix (ensure each thread/server closes DB connections or waits for shutdown), so you can meaningfully work on it."
    },
    "django__django-14014": {
        "input_bounce": true,
        "trace": "The issue statement is too brief and lacks any context or details about the environment, the specific introspection tool or code in use, examples of current vs. expected behavior, steps to reproduce, or SQLite version. Without that information it\u2019s unclear what changes would satisfy the request or how to verify a solution."
    },
    "django__django-14016": {
        "input_bounce": false,
        "trace": "The report reproduces a concrete error with minimal code, shows the failing and passing cases, and clearly states the desired outcome (allow Q(x__in=dict_keys) to work). There\u2019s enough detail to locate the bug in Q\u2019s combination logic and implement a fix, even though the exact patch isn\u2019t prescribed. Hence it\u2019s reasonably specified."
    },
    "django__django-14017": {
        "input_bounce": false,
        "trace": "The report includes a minimal repro, the current behavior and the expected behavior (commutativity of &/| between Q and Exists). It even points to the missing __rand__ implementation on Q or the need to return NotImplemented instead of raising in __and__, so it\u2019s clear what change is needed. This is WELL_SPECIFIED."
    },
    "django__django-14019": {
        "input_bounce": true,
        "trace": "The issue states that the __repr__ methods for several constraint/index classes should be \u201cconsistent,\u201d but it does not specify what the target format is or which existing implementation should be the canonical style. A developer would need to make assumptions about the desired output without further guidance, making the request too vague for a precise implementation."
    },
    "django__django-14030": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the incorrect use of never_cache on instance methods (login/logout) in Django\u2019s AdminSite and explicitly calls out the need to wrap those methods with method_decorator. It even references the exact views and the prior ticket. An implementer can locate AdminSite.login and AdminSite.logout in django/contrib/admin and apply method_decorator(never_cache)."
    },
    "django__django-14034": {
        "input_bounce": false,
        "trace": "The report includes minimal but sufficient context: subclass code, actual vs. expected behavior, and a clear \u201cfail/pass\u201d example. It\u2019s clear what the user wants (respect per-subfield \u201crequired=True\u201d even when the parent field\u2019s required=False), and there\u2019s no ambiguity about the success criteria. While you\u2019d need to dig into Django\u2019s MultiValueField.clean logic to implement it, the ask itself is concrete and testable."
    },
    "django__django-14043": {
        "input_bounce": false,
        "trace": "The issue clearly states the problem (dbshell leaking passwords via env vars), the desired feature (generate a temporary .pgpass file and set PGPASSFILE for PostgreSQL), and even points to an example implementation in django-dbbackup. While low-level details (exact file permissions, placement in the codebase) are left for implementation, the overall approach and scope are well enough defined to start a meaningful PR."
    },
    "django__django-14053": {
        "input_bounce": false,
        "trace": "The report clearly states which component (HashedFilesMixin.post_process) is misbehaving, shows exact command output vs. expected, explains why duplicate yields are harmful, and what the correct behavior should be (only yield each file once, with its final hash). A developer can locate the method, see where yields occur across multiple passes, and change it to suppress intermediate/duplicate yields. This is sufficiently detailed for a straightforward fix."
    },
    "django__django-14071": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug in the admin.E002 check, pinpoints the function to change (_check_raw_id_fields_item), explains that get_field will match on attname, and even gives the expected new guard (field.name == field_name) and the correct error call. All needed context is present or easily inferred from Django\u2019s admin checks, so it\u2019s well-specified."
    },
    "django__django-14077": {
        "input_bounce": false,
        "trace": "The issue clearly describes the model and field (JSONField), the exact query being run, concrete results on PostgreSQL versus SQLite, and the expected behavior. It includes environment details (Python, Django, SQLite versions) and a minimal reproducible example. Everything needed to diagnose and implement a fix is present."
    },
    "django__django-14089": {
        "input_bounce": false,
        "trace": "The issue clearly states what is missing (support for reversed() via a __reversed__ method) and how to implement it (add __reversed__ to iterate in reverse order). That is straightforward with no ambiguity about requirements or behavior."
    },
    "django__django-14122": {
        "input_bounce": false,
        "trace": "The issue clearly states that ordering fields from Meta.ordering are still being added to the GROUP BY clause (after a prior commit only removed them from ORDER BY), and that this leads to incorrect aggregation. It references the specific commit, ticket, and a PR with a failing test case. While it doesn\u2019t spell out the exact code patch, there is enough context\u2014what to detect (Meta.ordering fields), where (group-by generation), and how (exclude them)\u2014to make a sensible, implementable fix. Hence it\u2019s reasonably specified."
    },
    "django__django-14140": {
        "input_bounce": false,
        "trace": "The report clearly shows the current deconstruct behavior, reproduces the error with a non-tuple child (Exists expression), and even sketches two viable fixes: remove the single-child special case or guard by checking for 2-tuples.  The desired behavior (deconstruct with args for non-keyword children) is unambiguous, so a developer can implement and test a fix directly."
    },
    "django__django-14151": {
        "input_bounce": false,
        "trace": "The issue pinpoints a clear and narrow bug: an unhandled ValueError from urlparse in CsrfViewMiddleware when parsing a malformed Referer. It identifies the exact file/line, gives an example header, and implies the expected fix (catch the exception and treat it as an invalid header). That\u2019s concrete enough to implement and test."
    },
    "django__django-14155": {
        "input_bounce": false,
        "trace": "The issue clearly states the problem\u2014ResolverMatch.__repr__ shows a functools.partial object instead of the underlying function and its preset args/kwargs\u2014and proposes unwrapping partials in ResolverMatch.__init__. While it doesn\u2019t spell out every line of code or test, the requirement is straightforward and there\u2019s a sensible implementation path."
    },
    "django__django-14164": {
        "input_bounce": false,
        "trace": "The report clearly states the current behavior, gives minimal code examples, and defines the expected idempotent output. A developer has enough context to implement the normalization (uppercasing the region part) and ensure to_locale(to_locale(x)) returns the same. No major gaps remain."
    },
    "django__django-14170": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, shows reproduction steps with SQL differences, explains expected vs. actual behavior, and even points to a PR that corrects the tests and implementation. It\u2019s unambiguous what needs to change (stop using BETWEEN for the __iso_year lookup and use EXTRACT instead), so it\u2019s well-specified."
    },
    "django__django-14182": {
        "input_bounce": false,
        "trace": "The request clearly states that Django\u2019s existing Round function should accept an optional precision argument (round to a specified number of decimal places) and notes that all supported backends have a native two-argument ROUND function. There\u2019s enough context to implement by extending the Round class API (e.g. add a second parameter/default of 0 and adjust arity) and updating SQL compilation. While minor API details (named vs positional parameter) aren\u2019t explicitly prescribed, an experienced developer can sensibly fill them in."
    },
    "django__django-14199": {
        "input_bounce": false,
        "trace": "The report clearly identifies a reproducer (using Value(1, output_field=DecimalField()) on SQLite), pinpoints the offending function (`create_decimal_from_float`) and describes the failure scenario. There\u2019s enough here to reproduce and understand what needs to change, although stack traces and version details are missing. It\u2019s not fully fleshed out, but there\u2019s a sensible interpretation of the required fix."
    },
    "django__django-14238": {
        "input_bounce": false,
        "trace": "The report clearly outlines the bug: custom subclasses of BigAutoField/SmallAutoField aren\u2019t recognized by DEFAULT_AUTO_FIELD\u2019s subclass check. It includes reproduction steps, error traceback, and even pinpoints the faulty method (AutoFieldMeta.__subclasscheck__) and suggests the needed change (allow BigAutoField/SmallAutoField subclasses). This is precise enough for a direct fix."
    },
    "django__django-14266": {
        "input_bounce": false,
        "trace": "The report clearly describes the upgrade path, shows the traceback, and even includes the problematic cookie contents. You can reproduce the error and infer that the message storage should catch or otherwise handle malformed (legacy) cookies instead of crashing. However, the desired fix (e.g. discard or migrate invalid cookies) isn\u2019t explicitly stated. So while there is enough information to propose and implement a plausible solution, some specifics of the intended behavior are left to interpretation."
    },
    "django__django-14267": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug in Q.deconstruct, provides reproducible examples showing the crash, and even suggests how to fix it (removing the special-case or adding a length check). The desired behavior (no crash when deconstructing single-child Q with non-subscriptable child) is unambiguous and actionable."
    },
    "django__django-14271": {
        "input_bounce": false,
        "trace": "The report comes with a minimal reproducible example (including a GitHub repo), the exact commands to run, Django versions tested, the SQL emitted in both working (3.1) and broken (3.2) cases, and the resulting traceback. It clearly states the expected vs. actual behavior, so a contributor can dive right in and diagnose/fix the subquery\u2013union bug."
    },
    "django__django-14311": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current broken behavior (when using python -m foo.bar.baz the autoreloader drops the last part) and points to the commit that partially fixed a related case. Although it doesn\u2019t spell out exactly which lines to change, the desired outcome and affected code path are clear enough for a developer to locate and implement a fix. Therefore it\u2019s reasonably specified."
    },
    "django__django-14313": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproduction (models, admin configuration), clear steps to reproduce, the exact error traceback, Django version details, and even a comparison of versions that work vs fail. This gives enough context to understand and address the bug in the admin delete action when using .distinct() via a many-to-many search field."
    },
    "django__django-14315": {
        "input_bounce": false,
        "trace": "The ticket clearly explains the symptom (runshell dropping os.environ), the root cause (postgresql client returning an empty dict instead of None), and even points to the problematic commit. While you\u2019ll need to inspect the linked commit and code to implement the precise fix (e.g. change the env fallback to test \u201cis not None\u201d rather than truthiness), the desired behavior and location are unambiguous. This is reasonably well-specified for a practical fix."
    },
    "django__django-14324": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a regression, provides a minimal reproduction (a self-referential ManyToManyField), shows the actual vs expected related_name, and even points to the specific commit where behavior changed. There\u2019s no ambiguity about what must be fixed."
    },
    "django__django-14334": {
        "input_bounce": false,
        "trace": "The report clearly describes the scenario: with settings.LANGUAGES containing both \u201czh-hans\u201d and \u201czh-hant\u201d, a request header of \u201czh-Hant-HK\u201d is incorrectly matched to the first entry (\u201czh-hans\u201d) rather than to \u201czh-hant\u201d. It even points to the offending function (get_supported_language_variant), so there\u2019s enough context to write failing and passing tests and implement a fix. While some details (e.g. Django version) could help, you can reasonably reproduce and correct this behavior based on the description."
    },
    "django__django-14336": {
        "input_bounce": false,
        "trace": "The report clearly identifies the inconsistent alias conventions (\u2018Col%d\u2019 vs \u2018col%d\u2019), points to the exact code locations, and shows a failing SQL example. It\u2019s unambiguous what needs to change (make both alias generators use the same casing), even if the chosen case (upper or lower) must be picked. This is enough to draft a concrete fix."
    },
    "django__django-14349": {
        "input_bounce": true,
        "trace": "The report clearly identifies failing tests and the root cause (Python now strips LF/CR/tabs early), but it doesn\u2019t state which behavior Django should adopt (reject early or accept silently). Without a decision on the expected outcome, it\u2019s ambiguous what a successful fix looks like."
    },
    "django__django-14351": {
        "input_bounce": false,
        "trace": "The issue gives a clear, reproducible example of the bug (Django 3.2\u2019s Q(...__in) generating a multi\u2010column subquery instead of a single\u2010column PK subquery), shows the broken vs. working SQL, and describes the desired behavior (mirror __id__in semantics). All necessary context is provided to craft a fix in Django\u2019s query compiler, so it is well\u2010specified."
    },
    "django__django-14368": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (ISO-8601 datetimes with spaces before timezone), gives examples, points to the exact code location in django.utils.dateparse, and even suggests two concrete solution paths (use python-dateutil or inline parsing). While implementation details (exact regex change vs. dependency) are left to the author, there\u2019s enough context to craft a meaningful pull request."
    },
    "django__django-14372": {
        "input_bounce": false,
        "trace": "The issue clearly describes the regression (Django 3.2.1 change), pinpoints the cause (FileField.pre_save passing full paths instead of basenames), provides steps to reproduce, and even links to a proposed PR. It\u2019s straightforward to verify and implement the fix."
    },
    "django__django-14373": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the `DateFormat.Y()` specifier\u2019s behavior (missing zero-padding for years <1000), states the expected outcome (always a four-digit, zero-padded year), and points to a specific component (`django.utils.dateformat.DateFormat`). There\u2019s enough detail to locate the code and implement the fix."
    },
    "django__django-14376": {
        "input_bounce": false,
        "trace": "The issue clearly states which parameters are deprecated (\u2018db\u2019 and \u2018passwd\u2019), where in the code (django/db/backends/mysql/base.py, lines 202\u2013205) they\u2019re used, what the new names are (\u2018database\u2019 and \u2018password\u2019), and that supported Django versions already require a mysqlclient version that accepts the new names. Implementing the change is straightforward and unambiguous."
    },
    "django__django-14382": {
        "input_bounce": false,
        "trace": "The issue clearly describes the error scenario, pinpoints the exact file and line where the bug occurs, and even provides a concise code change (using rstrip on the target path) that would resolve the problem. It\u2019s straightforward to implement and test."
    },
    "django__django-14387": {
        "input_bounce": false,
        "trace": "The reporter provides the exact model, queryset-combining function, database actions, SQL output, and expected vs. actual behavior. There\u2019s enough code and repro steps to trace through Django\u2019s OR-merge logic and write a fix or test. This is well-specified."
    },
    "django__django-14395": {
        "input_bounce": false,
        "trace": "The report clearly identifies a regression in CacheHandler.all that now forces creation of every cache even if unneeded, describes the old vs new behavior, and even provides a minimal patch showing the desired \u201cexists_only\u201d approach. While it doesn\u2019t include formal tests or full API discussion, it\u2019s straightforward to interpret: revert .all to only return already\u2010created caches (or use an exists_only flag) to restore the prior behavior. That makes it reasonably specified for a PR."
    },
    "django__django-14396": {
        "input_bounce": true,
        "trace": "The request simply states \u201cchange the default protocol to HTTPS\u201d and suggests a deprecation timeline, but it lacks concrete details on which versions, what the timeline should be, how deprecation warnings should be emitted, testing requirements, and other implementation specifics. There\u2019s room for multiple interpretations, so it\u2019s too vague for a straightforward PR."
    },
    "django__django-14399": {
        "input_bounce": false,
        "trace": "The request is to enhance the Django Hypercorn ASGI docs with guidance on serving static files\u2014specifically by recommending and demonstrating the use of WhiteNoise. While the exact text or code snippets aren\u2019t spelled out, the goal is clear (add a section to the ASGI/Hypercorn docs), there is precedent (existing WhiteNoise usage patterns in Django), and the scope (documentation updates) is moderate. Thus, it\u2019s reasonably specified: a developer can sensibly interpret what\u2019s needed and draft an appropriate docs patch."
    },
    "django__django-14404": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the function (catch_all_view), describes the incorrect behavior (using request.path_info, which drops FORCE_SCRIPT_NAME), and states the desired behavior (use request.path). A patch is even linked. This is well-specified."
    },
    "django__django-14411": {
        "input_bounce": false,
        "trace": "The issue clearly describes exactly what\u2019s wrong (the \u2018for\u2019 attribute on the label is pointing at non\u2010labelable output) and what needs to change (remove or omit the \u2018for\u2019 attribute for ReadOnlyPasswordHashWidget). There\u2019s no ambiguity about the scope or desired behavior, so it\u2019s well\u2010specified."
    },
    "django__django-14416": {
        "input_bounce": false,
        "trace": "The issue description clearly outlines the problem scenario (cached redirects based on Accept-Language), identifies the root cause (missing Vary header), and even suggests the fix (add a Vary header). There is no ambiguity about what a successful solution entails."
    },
    "django__django-14430": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates the problem with concrete examples (matched vs. unmatched vs. empty-list queries), shows the current vs. expected behavior, even points to the exact code paths (EmptyResultSet in lookups.py and get_aggregation in query.py) and suggests how the exception handler might be extended for Coalesce. There\u2019s no missing context and the fix scope is narrow and obvious. This is WELL_SPECIFIED."
    },
    "django__django-14434": {
        "input_bounce": true,
        "trace": "The description is very minimal and lacks context such as code snippets, function signatures, expected vs. actual behavior, and where to make changes. It\u2019s unclear how to reproduce the problem or what the correct handling should be, making it too vague to act on."
    },
    "django__django-14441": {
        "input_bounce": true,
        "trace": "The report merely notes that get_image_dimensions() crashes on missing files but gives no context\u2014no code references, language, library, or desired behavior (exception vs return value). Without knowing the expected API contract or environment, there\u2019s ambiguity about how to handle non\u2010existent images. Thus the issue is too vague for a clear implementation."
    },
    "django__django-14447": {
        "input_bounce": true,
        "trace": "The issue describes two potential related changes (avoiding the second COUNT(*) by passing the prior count into _cull, and lowering cull frequency with a new setting), but leaves key details unspecified: which change(s) are required, what defaults or semantics a new setting should have, how to handle edge cases (e.g. rowcount vs actual final count), and what test coverage or performance targets must be met. There\u2019s no clear acceptance criteria or precise specification, so it\u2019s not sufficiently defined for a straightforward implementation."
    },
    "django__django-14451": {
        "input_bounce": false,
        "trace": "The issue clearly states what needs to change (make empty elements self-closing by passing the new XMLGenerator argument) and where (the SimplerXMLGenerator used in syndication feeds). It even links to a PR showing the exact patch. There\u2019s little ambiguity about the desired behavior or implementation steps."
    },
    "django__django-14453": {
        "input_bounce": false,
        "trace": "The reporter clearly describes the bug (a misspelling of the required urlpatterns variable leading to a confusing error), the expected improvement (a specific hint when urlpatterns is misspelled), and even links to a PR with an implementation. The scope and desired behavior are unambiguous, so this is WELL_SPECIFIED."
    },
    "django__django-14463": {
        "input_bounce": false,
        "trace": "The request clearly defines the desired feature\u2014adding support for table- and column-level comments via new model/Meta options\u2014but leaves out implementation details (supported backends, SQL syntax, integration with migrations/tests). There is a sensible interpretation of the goal, but significant gaps remain, making it reasonably specified rather than fully or impossibly specified."
    },
    "django__django-14471": {
        "input_bounce": false,
        "trace": "The ticket clearly describes the existing behavior in CsrfViewMiddleware, where a badly formatted CSRF cookie triggers unnecessary token generation and comparison. It lays out the intended behavior (rejecting requests immediately in process_view, preserving old behavior in process_request), references the related exception type (InvalidTokenFormat) and points to where changes should occur (_get_token(), process_request(), process_view()). This is precise enough to implement without further clarification."
    },
    "django__django-14480": {
        "input_bounce": true,
        "trace": "The issue simply states a desire to \u201cadd logical XOR support to Q() and QuerySet()\u201d and links to a couple of SO threads, but it does not specify the API (e.g. operator syntax vs method), expected SQL output for each backend, how to handle SQLite\u2019s lack of XOR, nor give concrete examples/tests of the desired behavior. There are too many unspecified details on implementation, API decisions, and backend handling to make a clear plan. As written it\u2019s too vague to implement without further clarification."
    },
    "django__django-14493": {
        "input_bounce": false,
        "trace": "The report gives a clear reproduction (custom storage subclass with max_post_process_passes = 0), shows the exact traceback, links to the relevant code, pinpoints the root cause (substitutions never initialized when the loop isn\u2019t entered), and even explains the motivation. That makes it straightforward to implement a fix (e.g. initialize substitutions or short-circuit when max passes is zero)."
    },
    "django__django-14495": {
        "input_bounce": false,
        "trace": "The report clearly lays out the steps to reproduce, the observed error, and the desired behavior (allow migrating to replaced migrations or at least stop prompting about migrations you can\u2019t actually run and surface a nicer error). An engineer familiar with Django\u2019s migration loader and executor could craft a PR to include replaced migrations in the node graph or adjust the ambiguity and error handling. While there\u2019s room for multiple implementation approaches, the requirements and failure modes are sufficiently detailed to get started."
    },
    "django__django-14500": {
        "input_bounce": false,
        "trace": "The ticket clearly describes a specific bug/behavior in Django\u2019s MigrationExecutor: when you unapply a squashed migration while the original migration files still exist, the executor wrongly marks the squash record as unapplied instead of just the originals. Although it lacks code snippets or exact line numbers, the expected outcome is unambiguous\u2014only the replaced (original) migrations should be unapplied. An engineer familiar with Django migrations can locate the relevant executor logic, write a test reproducing the faulty behavior, and adjust the rollback logic accordingly. Thus it is reasonably specified."
    },
    "django__django-14508": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example, the exact error, Django versions tested, and a clear \u2018ask\u2019 (emit a warning when a subclass field hides a @property from a base model). You could implement this by detecting name collisions in the model metaclass or init and issuing a warning, so while you\u2019ll make some design choices around where/what warning to raise, the problem and desired behavior are clear."
    },
    "django__django-14513": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem\u2014showmigrations currently marks a squashed migration as applied if its replaced migrations have run, even though the squashed migration itself isn\u2019t recorded. It asks for a distinct \u201csoft-applied\u201d indicator in the showmigrations output and notes that planner changes may be needed. While the exact symbol or formatting isn\u2019t specified, the goal and detection logic are clear enough to begin implementing and iterate on the UI choice. Thus it\u2019s reasonably specified."
    },
    "django__django-14534": {
        "input_bounce": false,
        "trace": "The report clearly identifies the exact class and method (BoundWidget.id_for_label), shows the offending code, describes the expected behavior versus the current behavior, and even suggests the precise one-line change to return the attrs['id'] instead of the autogenerated id. With that level of detail, you can directly write a patch that satisfies the issue."
    },
    "django__django-14539": {
        "input_bounce": false,
        "trace": "The report clearly states the bug (urlize splitting on HTML escape sequences and grabbing trailing punctuation) and gives a minimal example with expected vs. actual output. A developer can reproduce the failure and knows exactly how to adjust the URL-parsing logic to include \u2018&lt;\u2019 as part of the URL and exclude the \u2018!\u2019 from the link text. That is enough to produce a focused fix."
    },
    "django__django-14559": {
        "input_bounce": false,
        "trace": "The request clearly states that bulk_update() should mirror update() by returning the number of rows matched, points to the exact code location, and even suggests summing the return values of the internal update() calls. No important details are missing, making it straightforward to implement."
    },
    "django__django-14580": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example (models.py and generated migration), the exact error message, expected vs. actual behavior, and even pinpoints the likely faulty module (django.db.migrations.writer). It\u2019s clear what needs fixing (add the missing import), so the issue is well-specified."
    },
    "django__django-14584": {
        "input_bounce": false,
        "trace": "The issue clearly states the need to include the database alias in Django\u2019s SQL logging output for multi-db routing, so there\u2019s a sensible, straightforward change (tweak the logger format in BaseDatabaseWrapper). However, it lacks concrete examples or exact formatting requirements, so some interpretation is needed. This makes it reasonably specified but not fully detailed."
    },
    "django__django-14602": {
        "input_bounce": true,
        "trace": "The issue states a general goal\u2014to tighten the regex to reject some currently \u2018invalid\u2019 inputs\u2014but does not specify exactly which inputs should be considered invalid or provide a concrete list of formats to allow or disallow. It leaves the determination of valid/invalid cases up to ad-hoc exploration. Without clear acceptance criteria or examples of forbidden cases, it\u2019s too ambiguous to implement a precise change."
    },
    "django__django-14608": {
        "input_bounce": false,
        "trace": "The request is clear: in Django\u2019s FormSet implementation, add a CSS class named \u201cnonform\u201d to the <ul> wrapper for non-form errors (just as Form.non_field_errors adds \u201cnonfield\u201d), and update the documentation accordingly. The scope and desired change are unambiguous, and a direct mirror of existing behavior for forms, so it\u2019s well enough specified to implement."
    },
    "django__django-14631": {
        "input_bounce": false,
        "trace": "The issue clearly spells out what methods to update, where to centralize logic (in a new BoundField.did_change method), and how changed_data and _clean_fields should be refactored to use BoundField. It also points to the specific test that needs adjustment. While you\u2019ll need to inspect the existing code for details, there\u2019s a concrete refactoring plan and success criteria, making it reasonably specified."
    },
    "django__django-14634": {
        "input_bounce": true,
        "trace": "The issue statement is too brief and lacks critical context: it doesn\u2019t specify the framework (e.g., Django?), where and how the mixin should be applied, what the success message API should look like, or any acceptance criteria. There\u2019s no information on existing code or expected behavior beyond the high-level goal, so it\u2019s unclear how to proceed without clarification."
    },
    "django__django-14641": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the exact lines of code in BoundField.initial() that need to be moved, and specifies precisely under which block in BaseForm.get_initial_for_field() they should be placed. The desired refactoring is unambiguous and actionable based on the provided links and context."
    },
    "django__django-14667": {
        "input_bounce": false,
        "trace": "The report clearly defines the current vs. expected SQL behavior, gives concrete model/field examples, and specifies the precise semantics that only().defer() chaining should support. There\u2019s no ambiguity about what needs to change in QuerySet.defer()/only() logic to drop previously selected fields. This is WELL_SPECIFIED."
    },
    "django__django-14672": {
        "input_bounce": false,
        "trace": "The report gives a precise description of the bug (unhashable list in through_fields), includes a minimal repro, points to the Django class and method (ManyToManyRel in reverse_related.py), shows the stack trace, and even prescribes the fix (wrap through_fields in make_hashable). That is enough to write a PR to apply the missing make_hashable call."
    },
    "django__django-14681": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproduction, exact settings, steps to reproduce across scenarios, observed vs expected behavior, and error messages. It\u2019s clear what needs fixing \u2013 storage failures are being misreported as CSRF errors \u2013 so the issue is well-specified."
    },
    "django__django-14725": {
        "input_bounce": false,
        "trace": "The issue clearly describes the need for a formset option to prevent creation of new objects (an \"edit-only\" mode). While it doesn\u2019t spell out the exact API or validation behavior, the goal is unambiguous and implementable by adding a flag (e.g. can_add=False) that rejects extra forms. Thus it\u2019s reasonably specified."
    },
    "django__django-14730": {
        "input_bounce": false,
        "trace": "The issue clearly states that an error should be raised when a developer supplies a related_name on a symmetrical ManyToManyField (including self-referential relations where symmetrical defaults to True). While exact error type and message aren\u2019t specified, the intent and conditions are unambiguous and there is a sensible implementation path (e.g. add a validation check in ManyToManyField's initialization or checks), so it\u2019s reasonably specified."
    },
    "django__django-14733": {
        "input_bounce": false,
        "trace": "The request clearly refers to the existing ordering_widget/get_ordering_widget pattern introduced in Django 3.0 and asks for an analogous deletion_widget/get_deletion_widget. While it doesn\u2019t spell out every line of code, the intent and pattern are unambiguous and can be implemented by mirroring the ordering widget approach. This is sufficiently specified for an engineer to draft a PR."
    },
    "django__django-14751": {
        "input_bounce": false,
        "trace": "The issue clearly states the problem (makemigrations outputs to stdout, no programmatic list of created files) and the desired outcome (print paths of created migration files in a script\u2010friendly way). While it doesn\u2019t prescribe exact flag names or output format, it\u2019s straightforward to interpret and implement (e.g. add a --script-friendly or --output-files option that emits file paths, and redirect progress output to stderr). Thus, it\u2019s reasonably specified: you can design a suitable CLI flag and output format to satisfy the request without further clarification."
    },
    "django__django-14752": {
        "input_bounce": false,
        "trace": "The request clearly outlines the existing behavior in AutocompleteJsonView.get(), shows exactly where to introduce a new method hook (serialize_result), and provides concrete before-and-after code snippets. The goal\u2014adding an extension point for custom result serialization\u2014is unambiguous and straightforward to implement. Thus the issue is WELL_SPECIFIED."
    },
    "django__django-14765": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a single, localized change: in ProjectState.__init__, drop the guard/conversion for real_apps and instead assert it\u2019s already a set when non-None. While you\u2019ll need to locate the ProjectState class in migrations/state.py and adjust the initialization logic, the intended behavior and placement of the change is unambiguous. Thus there is enough detail to make a meaningful code update without further clarification."
    },
    "django__django-14771": {
        "input_bounce": false,
        "trace": "The issue clearly describes the environment (Windows, winpty), the reproduction steps, the observed behavior (reloader subprocess drops -X utf8, resulting in different file-encoding), and the desired behavior (child should inherit \u2013X options). Although it doesn\u2019t point to the exact code location, there\u2019s a clear, actionable requirement \u2013 modify the auto-reloader to include sys._xoptions when spawning subprocesses. This is a well-defined change request."
    },
    "django__django-14779": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug scenario, provides minimal reproductions (with and without other parameters), shows the exact traceback and code location (parse_bits in library.py), and states the expected vs actual behavior. All necessary details are present to implement a fix, so the ticket is well-specified."
    },
    "django__django-14785": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, how to reproduce it (including Django version, database backend, model definition, and exact traceback), and the context in which it fails. While it doesn\u2019t prescribe the exact fix (e.g., how NaN should round-trip in DecimalField), it\u2019s straightforward to infer the expected behavior (treat NaN as a valid Decimal('NaN') rather than erroring). Thus it\u2019s sufficiently specified to implement and test a solution."
    },
    "django__django-14787": {
        "input_bounce": false,
        "trace": "The reporter provides a clear example of the failure (AttributeError on functools.partial missing __name__), points to the exact decorator (method_decorator) that needs to preserve the wrapped function\u2019s metadata, and demonstrates expected vs. actual behavior. While it requires knowing where method_decorator lives (e.g. in Django\u2019s utils.decorators), there is a straightforward interpretation of what change is needed (wrap or update_wrapper on the partial)."
    },
    "django__django-14792": {
        "input_bounce": false,
        "trace": "The issue clearly describes the change in behavior between Django 3.1 and 3.2, shows concrete examples of inputs and generated SQL, pinpoints the involved methods (`_get_timezone_name`, `TimezoneMixin.get_tzname`, and `DatabaseOperations._prepare_tzname_delta`), and states the expected vs. actual outcome. This provides enough detail to craft a fix or test case."
    },
    "django__django-14802": {
        "input_bounce": false,
        "trace": "The issue clearly describes the repetitive pattern, proposes a specific helper method signature, and identifies where it should live (the base cache backend). The scope of work\u2014adding the helper, updating existing cache backends to use it, and ensuring tests/documentation\u2014is unambiguous. Hence it\u2019s well-specified."
    },
    "django__django-14832": {
        "input_bounce": false,
        "trace": "The report clearly identifies a specific bug (floatformat always using USE_L10N, ignoring {% localize %} blocks), points to the exact code lines, and states the desired behavior (read use_l10n from the template context or allow forcing an unlocalized format). While it doesn\u2019t spell out every implementation step (e.g. using @contextfilter), a Django maintainer can fill in those details. This makes the issue actionable without further clarification."
    },
    "django__django-14855": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the broken behavior (URL reverse ignoring the custom AdminSite), pinpoints the exact code location (get_admin_url in django.contrib.admin.helpers), and even proposes a concrete patch. Requirements for a successful fix (using the current_app parameter) are unambiguous, so the ticket is well-specified."
    },
    "django__django-14861": {
        "input_bounce": false,
        "trace": "The issue provides a minimal reproducible example (models.py and admin.py), a clear description of expected vs. actual behavior, and the exact validation error. With this detail, a developer can reproduce the bug and propose a fix, so it\u2019s well-specified."
    },
    "django__django-14871": {
        "input_bounce": false,
        "trace": "The bug report clearly states the problem (pt-BR translations not loaded), gives an example, points to the exact code location, and implies the desired behavior (preserve or properly handle subtags). This is enough to go implement a fix."
    },
    "django__django-14880": {
        "input_bounce": false,
        "trace": "The issue clearly identifies where to make the change (RelatedField._check_clashes()), explains exactly what improvement is needed (include the clashing name in the error message), and even notes that tests will need updating. A developer familiar with the codebase can implement and verify these changes without further clarification."
    },
    "django__django-14894": {
        "input_bounce": false,
        "trace": "The report includes minimal model definitions, test data, the exact query code, expected vs. actual results, and even the generated SQL for both cases. That provides all the information needed to reproduce, diagnose, and fix the issue in ORM. It\u2019s a clear, self-contained bug report with a minimal repro, hence it\u2019s WELL_SPECIFIED."
    },
    "django__django-14915": {
        "input_bounce": false,
        "trace": "The issue clearly states the upgrade context, the overriding code, the exact error, and why it occurs (a ModelChoiceIteratorValue isn\u2019t hashable for membership testing against a dict). There\u2019s enough detail to propose a fix (e.g. use the underlying value or key instead), so it\u2019s well-specified."
    },
    "django__django-14919": {
        "input_bounce": false,
        "trace": "The issue clearly describes the discrepancy in how durable atomic blocks are handled between TestCase and TransactionTestCase, why durability checks are currently disabled, and proposes a concrete approach (marking TestCase transactions and adjusting the durability check) along with a PoC patch for reference. The root cause, desired change, and scope are all well-defined, making it straightforward to implement a solution."
    },
    "django__django-14935": {
        "input_bounce": true,
        "trace": "The request is for a makemigrations warning when a field has a callable default (especially on unique fields) because the callable is only invoked once during migration. However, the description omits key details: it doesn\u2019t show the unique=True setting in the example, it doesn\u2019t specify exactly when the warning should fire (all callables vs. only on unique fields), what the warning text should be, or how it should integrate with Django\u2019s checks framework. Without these details a clear implementation cannot be scoped."
    },
    "django__django-14960": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (field.clean is skipped for REQUIRED_FIELDS passed via --flags in interactive mode), points to the relevant code paths (non-interactive validation, get_input_data in interactive), and states the desired outcome (validate the passed values). While it doesn\u2019t include exact code snippets or tests, it provides enough context to reproduce and implement the fix (run validation on CLI-passed values just like interactive inputs)."
    },
    "django__django-14996": {
        "input_bounce": false,
        "trace": "The report includes concrete model definitions, reproduction steps, actual vs. expected SQL output, and a reference to the related issue (#31826). It clearly defines the desired behavior (no SQL operations when a field is renamed but db_column remains the same) and shows why the current behavior is incorrect. This is sufficient to attempt a fix in Django\u2019s migration autodetector."
    },
    "django__django-14997": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example: model definition, migration steps, SQLite backend, and full error trace. The failure is clearly isolated to remaking the table with a unique constraint in SQLite, so an engineer can reproduce and identify the root cause. This is well-specified for a fix."
    },
    "django__django-14999": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired behavior (skip any DB operations when a RenameModel only changes the model name but not the underlying db_table) and what\u2019s currently happening in different backends, but it doesn\u2019t point to the specific code module or API surface to modify. An engineer familiar with Django migrations can infer where to hook into the RenameModel operation\u2019s SQL generation, but some digging into the existing code will be needed. Overall it\u2019s actionable but not fully hand-held."
    },
    "django__django-15018": {
        "input_bounce": false,
        "trace": "The issue describes a concrete, reproducible scenario (a Django management command using a mutually exclusive argparse group with both options sharing the same `dest`), shows the code that works on the command line but fails when using `call_command()`, and clearly states the two failure modes. There\u2019s no missing context about what the command is supposed to do or how it\u2019s being invoked via `call_command`. The expected vs. actual behavior is unambiguous, so you could start implementing or testing a fix right away."
    },
    "django__django-15022": {
        "input_bounce": false,
        "trace": "The issue clearly describes the symptom (exploding JOINs when using multi\u2010word admin searches across a related model), gives models and counts to reproduce the performance blowup, and states that a patch exists to dedupe those joins. While the exact patch code isn\u2019t included, the bug and goal (avoid repeated identical JOIN clauses) are clear enough to implement a fix. This makes the issue reasonably specified for someone familiar with Django\u2019s ORM and admin search logic."
    },
    "django__django-15031": {
        "input_bounce": true,
        "trace": "The issue clearly identifies a problem (the inability to include commas in \u2018__in\u2019 lookup values) and even points to the relevant function (prepare_lookup_value). However, it doesn\u2019t specify how escaped commas should be handled, what syntax or escaping convention to use, or any desired behavior or backward\u2010compatibility guarantees. Without details on the expected API or escaping rules, there\u2019s too much ambiguity to implement a meaningful solution."
    },
    "django__django-15037": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (inspectdb picks the PK instead of a unique field for a FK), gives minimal SQL to reproduce it, and states the expected behavior. That\u2019s enough to start working on a fix and add appropriate tests."
    },
    "django__django-15038": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (using --squashed-name can overwrite an existing migration file, causing inconsistency and CircularDependencyError) and the desired behavior (exit with an error instead of overwriting). There\u2019s enough detail to write a check in the squashmigrations command to detect existing files and abort, making it well-specified."
    },
    "django__django-15044": {
        "input_bounce": false,
        "trace": "The report clearly identifies the broken behavior (the middleware caches a pylibmc client at init and then fails under concurrent access), points to the exact code location, shows a repro, and describes the root cause (thread\u2010unsafe client reuse). You can immediately write a PR that moves the .cache lookup out of __init__ (or otherwise instantiates a fresh client per thread/request). There\u2019s enough here to design and implement a fix without further clarification, though the precise API change can be scoped by reading the referenced code."
    },
    "django__django-15061": {
        "input_bounce": true,
        "trace": "The issue lacks context and concrete requirements. It isn\u2019t clear how the label rendering works in the codebase, what the downstream effects of removing `id_for_label` would be, or what tests or documentation need updates. Without examples of the current behavior and desired output, it\u2019s ambiguous what a successful implementation entails."
    },
    "django__django-15062": {
        "input_bounce": false,
        "trace": "The issue includes a clear description of the problem, minimal reproducible test cases with expected vs. actual SQL, platform-specific behaviors (SQLite vs. MySQL), and even pointers to a related issue (#18247) for guidance on a fix. There\u2019s no ambiguity in what needs to be corrected\u2014the DecimalField annotations with Case/ExpressionWrapper need the same NUMERIC casting as plain Value expressions on SQLite. That makes it WELL_SPECIFIED."
    },
    "django__django-15087": {
        "input_bounce": false,
        "trace": "The issue clearly states which part of the code to change (DatabaseIntrospection.get_relations), what it currently does (complex regex parsing of DDL), and what it should do instead (use PRAGMA foreign_key_list). This gives a concrete target and approach for implementation without major ambiguity."
    },
    "django__django-15098": {
        "input_bounce": false,
        "trace": "The issue includes a clear description of the problem, precise reproduction steps on a fresh Django project, the versions in use, and the exact expected behavior versus actual behavior. This is enough to implement and verify a fix."
    },
    "django__django-15102": {
        "input_bounce": false,
        "trace": "The ticket clearly describes the problem (startproject copies all permission bits, ignoring the user\u2019s umask), gives reproduction steps and the failure scenario, and states the desired behavior (honor the umask when creating project files). A developer can reasonably locate the file-creation logic in startproject and adjust it to respect umask. Thus it\u2019s well-specified."
    },
    "django__django-15103": {
        "input_bounce": false,
        "trace": "The request clearly states the desired change (make the element_id argument optional, omitting the id attribute when not provided) and its impact (no test breakage), but leaves implementation details (e.g. exact file or function signature adjustments) to the developer\u2019s judgment. There\u2019s a sensible interpretation for fulfilling it without major unknowns."
    },
    "django__django-15104": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (a KeyError in Django\u2019s migration autodetector when a custom ForeignKey deconstruct removes the \u2018to\u2019 kwarg), provides a self-contained reproduction test, pinpoints the failing line, and even suggests the exact fix (using pop('to', None) instead of del). There is no ambiguity about the desired behavior or the necessary change."
    },
    "django__django-15108": {
        "input_bounce": false,
        "trace": "The issue clearly describes the inconsistency (Window.order_by not supporting the dash\u2010prefix syntax), points to the existing OrderableAggMixin logic, and even suggests reusing that code in Window.__init__. The desired behavior and a straightforward implementation approach are specified, making it actionable without further clarification."
    },
    "django__django-15111": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (django-admin startapp/startproject uses the default Python-urllib user agent, which some hosts block) and the desired change (set the User-Agent header to Django/DJANGO_VERSION). While it doesn\u2019t pinpoint the exact file location, any Django contributor can locate the URL-fetching code in the startapp and startproject commands and add the custom header. Thus there\u2019s a sensible interpretation and path forward."
    },
    "django__django-15127": {
        "input_bounce": true,
        "trace": "The description is too brief and lacks key details (Django version, override_settings usage example, reproduction steps, expected vs actual behavior in code/tests). Without concrete examples or context, it\u2019s unclear what specifically needs to be changed or how to verify a fix. Therefore it\u2019s too vague to meaningfully address."
    },
    "django__django-15128": {
        "input_bounce": false,
        "trace": "The report provides a concise, minimal reproducible example with Django versions, clear reproduction steps, the exact assertion failure location, analysis of the root cause, and even suggestions for a fix. A developer can take this and work out a solution without needing more clarification."
    },
    "django__django-15135": {
        "input_bounce": false,
        "trace": "The issue clearly describes a reproducible bug (code snippet, expected vs. actual behavior) and even suggests how bulk_update should handle ForeignKey fields (translate \u201cchild\u201d to \u201cchild_id\u201d). With model definitions, example code, and desired outcome all spelled out, it\u2019s actionable and unambiguous."
    },
    "django__django-15139": {
        "input_bounce": false,
        "trace": "The issue gives a clear action\u2014mark the PickleSerializer as deprecated in core, remove it, and extract it to a third-party package\u2014but it omits implementation details such as package naming, deprecation timeline, import shims, and documentation updates. While additional design decisions will be needed, the high-level goal is clear enough for a reasonable feature implementation plan."
    },
    "django__django-15161": {
        "input_bounce": false,
        "trace": "The issue clearly states the intent (use shorter import paths when deconstructing expressions in migrations), points to an existing PR pattern (simplifying F()\u2019s path), and suggests applying the same approach to other expression classes. While it doesn\u2019t enumerate every target class, there\u2019s a straightforward, sensible interpretation: update the deconstruct method (or registry) for each expression in django/db/models/expressions.py to reference django.db.models.<Name> instead of the deeper module path. This is enough to start implementing the change."
    },
    "django__django-15166": {
        "input_bounce": true,
        "trace": "The report indicates that the DatabaseCache backend needs to quote all fields for Snowflake compatibility and references an attached patch, but it doesn\u2019t include the patch, the specific fields or query locations, or details on the code changes needed. Without the patch or more context (file paths, examples of unquoted queries, tests to demonstrate failure), it\u2019s unclear what exactly must be changed. Therefore it is too vague to act on directly."
    },
    "django__django-15180": {
        "input_bounce": false,
        "trace": "The report clearly describes the misuse (passing a string as the `kwargs` positional), shows the failure modes (ValueError deep in resolution, AttributeError on reverse), and states a concrete expectation (type\u2010guard on `kwargs` in `path()`/`re_path()` to raise a `TypeError`). While it doesn\u2019t prescribe the exact wording of the message, it gives a precise enough description of where and what to guard. A maintainer can reasonably implement this."
    },
    "django__django-15202": {
        "input_bounce": false,
        "trace": "The report clearly shows a malformed URL input causing a ValueError deep in the URL parsing logic rather than the form field logic, and the expected behavior is that URLField.clean should catch that and raise a ValidationError. While it doesn\u2019t prescribe the exact code change, there\u2019s a straightforward fix (catch ValueError in clean and re-raise as ValidationError), so it\u2019s sufficiently defined for a meaningful implementation."
    },
    "django__django-15213": {
        "input_bounce": false,
        "trace": "The report clearly shows the two code paths, the actual SQL emitted, and by analogy what\u2019s missing in the negated case (the constant value). It\u2019s straightforward to write a test, reproduce the problem, and implement a fix so ExpressionWrapper handles ~Q() the same as Q()."
    },
    "django__django-15240": {
        "input_bounce": false,
        "trace": "The issue clearly defines the problem (stale entries in django_migrations) and outlines the desired behavior (automatically or manually remove entries whose migration files no longer exist, with an exception for replaced migrations). While it doesn\u2019t spell out exact command names or API details, it provides enough context and edge-case guidance to implement a cleanup feature. This makes it reasonably specified."
    },
    "django__django-15248": {
        "input_bounce": true,
        "trace": "The issue describes a desired feature (propagate delete origin info to signals) and its motivation, but it lacks specifics on the API changes (signal arguments, naming, behavior), implementation approach, and edge cases. Without guidance on how to expose the \"origin\" or integrate with existing signal machinery, important details are left unclear, making it too vague to start a concrete PR."
    },
    "django__django-15252": {
        "input_bounce": false,
        "trace": "The issue clearly describes the existing behavior (MigrationRecorder.ensure_schema always creates the migration table on every DB), the expected behavior (it should respect router.allow_migrate and only create the table on allowed DBs), points to the exact code paths, and outlines what needs to change. There\u2019s a straightforward interpretation of a successful solution."
    },
    "django__django-15268": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (split remove/add operations for unique/index together constraints), gives a concrete example with before-and-after operations, and even points to a failing test case showing the expected behavior. An implementer familiar with Django\u2019s migration autodetector can write code to coalesce consecutive AlterUniqueTogether/AlterIndexTogether ops on the same model into a single final operation. This is well-specified."
    },
    "django__django-15272": {
        "input_bounce": false,
        "trace": "The request clearly specifies the purpose and behavior of the new management command (optimizemigration app_name migration_name), how it should work (read a migration, run the existing optimizer, and overwrite the file), and how it differs from squashmigrations. While it doesn\u2019t spell out every code detail (import paths, error handling policies, etc.), a developer familiar with the codebase can sensibly fill in those gaps and produce a working implementation."
    },
    "django__django-15277": {
        "input_bounce": false,
        "trace": "The issue clearly describes where the unnecessary work occurs (CharField.__init__), why it\u2019s a problem (invalid validator with max_length None and extra overhead), references existing precedent (BinaryField.__init__), provides benchmark numbers, and even outlines the exact change needed. It\u2019s specific enough to implement and test."
    },
    "django__django-15278": {
        "input_bounce": false,
        "trace": "The report clearly shows the failing SQL, the migration call that triggers it, and the SQLite limitation (cannot add a UNIQUE column). It\u2019s unambiguous what\u2019s going wrong (adding a nullable OneToOneField on SQLite), and there\u2019s enough context (Django versions, relevant issue links) to start proposing a schema editor fix to work around SQLite\u2019s ALTER TABLE limitations. Thus it\u2019s reasonably specified."
    },
    "django__django-15280": {
        "input_bounce": false,
        "trace": "The report includes minimal model definitions, a precise failing test case, the expected versus actual SQL queries, and even introspection (`get_deferred_fields()`). The reproduction steps are complete and unambiguous, so one can write a fix or patch against Django\u2019s ORM. This is well-specified for a meaningful attempt."
    },
    "django__django-15292": {
        "input_bounce": false,
        "trace": "The report clearly states what\u2019s wrong (the debug page shows the full class representation rather than its dotted path), gives examples of actual vs expected output, and even points to the regression commit. A developer with access to the code could locate where the view name is rendered in the 404 debug page and adjust it to format class-based views correctly. While it doesn\u2019t spell out the exact function or line of code, it is sufficiently detailed for a meaningful fix."
    },
    "django__django-15297": {
        "input_bounce": false,
        "trace": "The issue provides a clear failing test case, explains the current vs. desired behavior, and even suggests exactly where and how to adjust the code (detect `view_class` in ResolverMatch.__init__). There\u2019s no ambiguity about what needs to change or how to verify the fix."
    },
    "django__django-15315": {
        "input_bounce": false,
        "trace": "The report clearly describes the failing code path, shows a minimal reproducible example, identifies the offending commit (#31750), and states the desired behavior (Field.__hash__ should remain stable so dict lookups don\u2019t break). It even proposes reverting the hash-change logic introduced in that commit. This is precise and actionable."
    },
    "django__django-15316": {
        "input_bounce": true,
        "trace": "The issue merely states that simplify_regex() doesn\u2019t handle non-capturing groups but provides no examples, expected behavior, or reproduction steps. It\u2019s unclear what inputs are failing and what the correct output should be, making it too vague to implement a solution."
    },
    "django__django-15318": {
        "input_bounce": false,
        "trace": "The ticket includes a minimal reproducible example showing the discrepancy, a clear statement of desired unified behavior, and even a link to an existing patch to adapt. It\u2019s sufficiently detailed to implement and test the fix without further clarification."
    },
    "django__django-15320": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, provides minimal reproducible code showing actual vs. expected output, and even suggests the precise fix (setting query.subquery=True in the Subquery constructor). A developer can reproduce, locate the logic in as_sql, implement the change, and verify with the given example."
    },
    "django__django-15324": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates the bug, provides reproduction steps and code, and identifies the root cause (null bytes in the parsed extension leading to a tempfile creation error). However, it doesn\u2019t specify exactly how to handle or sanitize the extension in all cases (strip nulls? reject the file? default to a safe extension?). That leaves a reasonable interpretation for a solution but some details must be defined, so it's REASONABLY_SPECIFIED."
    },
    "django__django-15334": {
        "input_bounce": true,
        "trace": "The issue is essentially a feature request (\u201cmake iterator() respect prefetch_related() by chunking\u201d), but it doesn\u2019t give enough detail on the intended API changes, default behaviors, backward-compatible semantics, or how to integrate with Django\u2019s existing ORM internals. It\u2019s clear at a high level what the user wants, but too ambiguous to start a concrete implementation without follow-up."
    },
    "django__django-15352": {
        "input_bounce": false,
        "trace": "The report clearly states that the session ID must be scrubbed from Django\u2019s error reports (just as other sensitive data is), points to an existing patch and relevant discussions, and provides examples of the leak.  The exact scope (Django\u2019s exception reporter) and the fix (add SESSION_COOKIE_NAME to the scrub list) are unambiguous, making the ticket well-specified."
    },
    "django__django-15368": {
        "input_bounce": false,
        "trace": "The issue provides a clear reproducible example, pinpoints the exact code location (`django/db/models/query.py` around the `isinstance` check), and even suggests concrete fixes (duck-typing or including `F` in the type check). It\u2019s fully clear what to change and how to verify it, making it well-specified."
    },
    "django__django-15375": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, provides exact reproduction steps (including Django version, database backend, code snippet), shows the erroneous SQL and error message, and even the expected workaround. This is sufficient to diagnose and fix the issue."
    },
    "django__django-15380": {
        "input_bounce": false,
        "trace": "The issue provides clear steps to reproduce (renaming a model and field in one makemigrations run), the exact error and stack trace, and even the regression commit. There\u2019s no ambiguity about what\u2019s broken or what the expected behavior is (the autodetector shouldn\u2019t crash), so it\u2019s actionable as-is."
    },
    "django__django-15382": {
        "input_bounce": false,
        "trace": "The report provides a minimal reproducible example, describes the observed vs. expected behavior (the WHERE clause is dropped entirely when filtering on an EXISTS subquery over an empty queryset), and references a related issue for context. While it doesn\u2019t spell out the precise SQL it should emit, there\u2019s enough detail to reproduce the bug, write a test case, and infer the correct behavior."
    },
    "django__django-15388": {
        "input_bounce": false,
        "trace": "The report includes clear reproduction steps, the exact change that triggers the bug, expected vs actual behavior, and a minimal default project setup. That provides enough context to reproduce and debug the issue without further details."
    },
    "django__django-15401": {
        "input_bounce": true,
        "trace": "The issue describes a change in Django\u2019s ORM behavior\u2014preventing unsaved related object instances from being used in filters\u2014and asks what the intended behavior should be and whether it\u2019s documented. However, it doesn\u2019t specify exactly how to enforce this (e.g., warning vs. exception, at which points in the API, deprecation timeline, which relationship types), nor offer implementation guidance or concrete acceptance criteria. As stated, it\u2019s more of a high-level question than a detailed spec for coding, so it\u2019s too vague to begin implementation without further clarification."
    },
    "django__django-15413": {
        "input_bounce": false,
        "trace": "The report clearly states the incorrect logging behavior, points to the existing test and code in BaseHandler.adapt_method_mode, shows what\u2019s expected vs. what\u2019s happening, and even provides a concrete code sketch for the fix. All necessary details (repro steps, test context, code references) are present, making it straightforward to implement and verify a solution."
    },
    "django__django-15414": {
        "input_bounce": false,
        "trace": "The bug is clearly described: bulk_update isn\u2019t marking the queryset as a write operation before retrieving its database, so it routes to db_for_read instead of db_for_write. A fix is straightforward\u2014set self._for_write = True early in bulk_update\u2014so the requirements for a correct solution are clear."
    },
    "django__django-15421": {
        "input_bounce": false,
        "trace": "The report clearly describes the failure with the new default \u201cspawn\u201d start method (missing app registry initialization and DB name prefix), points to the exact function (_init_worker) to patch, and even supplies a working patch. All requirements for a fix are spelled out, making it straightforward to implement and verify."
    },
    "django__django-15423": {
        "input_bounce": false,
        "trace": "The report clearly describes a concrete bug (LazyObject always advertises __getitem__/__iter__ even when the wrapped object doesn\u2019t support them) and gives example code and errors. It\u2019s enough to formulate a patch (stop exposing or delegate existence checks of these methods to the wrapped object), but doesn\u2019t spell out the exact API or code locations to change. There\u2019s a sensible interpretation of what a correct fix looks like, so it\u2019s reasonably specified."
    },
    "django__django-15433": {
        "input_bounce": false,
        "trace": "The report clearly describes the problem, provides a minimal reproduction repository, code samples, and demonstrates the repeated migrations behavior. A developer can clone the repo, run makemigrations, and observe the infinite migration loop. Requirements for a fix are clear."
    },
    "django__django-15438": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (no regional translation leads to English fallback) and the desired behavior (fall back to the generic language code, e.g. \"de\" when \"de-ch\" isn\u2019t found). There\u2019s a straightforward implementation: detect missing locale file and retry with the base language. This is well-specified enough for a direct solution."
    },
    "django__django-15467": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem, gives a minimal reproduction, points to the exact file and line, and even supplies the precise code change needed. It\u2019s straightforward to implement and test."
    },
    "django__django-15474": {
        "input_bounce": false,
        "trace": "The report clearly describes the precise commands, DB alias, migration being rolled back, and the observed vs intended behavior (legacy name field ending up null). While it doesn\u2019t include the exact migration code, it\u2019s obvious what needs to happen (the backwards data migration for 0002 must populate the legacy name on non-default DBs). Therefore it\u2019s reasonably specified and actionable."
    },
    "django__django-15481": {
        "input_bounce": false,
        "trace": "The issue clearly states the current behavior and desired change: allow timedelta for max_age in set_cookie and set_signed_cookie (similar to get_signed_cookie), with examples and expected conversion to seconds. It\u2019s straightforward to implement and test."
    },
    "django__django-15492": {
        "input_bounce": false,
        "trace": "The request clearly defines what to change (add a synchronize_user method mirroring configure_user\u2019s signature and invoke it in authenticate immediately after fetching/creating the user), where in the code to place it, and the intended override behavior. A developer familiar with RemoteUserBackend can implement this without further clarification."
    },
    "django__django-15498": {
        "input_bounce": false,
        "trace": "The request clearly states the expected behavior (empty string for If-Modified-Since should be ignored rather than raising an exception) and even references the commit that introduced the breakage, so it\u2019s straightforward to locate the parsing logic and add a guard for empty input. While it lacks code snippets and tests, the required change is unambiguous and can be sensibly implemented."
    },
    "django__django-15499": {
        "input_bounce": false,
        "trace": "The request clearly states the needed behavior: in the migration optimizer, just as CreateModel+AlterModelOptions are merged into a single CreateModel, CreateModel+AlterModelManagers should also be collapsed to CreateModel. While it doesn\u2019t point to the exact file or function, anyone familiar with Django\u2019s migration optimizer can identify where to add the same merging logic for managers. The goal and scope are unambiguous, so this is reasonably specified."
    },
    "django__django-15503": {
        "input_bounce": false,
        "trace": "The report includes a clear problem statement, a minimal reproducible example (model, test case, expected vs. actual output), versions and backends tested, and a precise description of the lookup methods to fix. It\u2019s straightforward to write a PR to make numeric JSON keys work on the mentioned backends."
    },
    "django__django-15521": {
        "input_bounce": false,
        "trace": "The issue clearly describes the mismatch between DjangoTranslation\u2019s folder naming and makemessages\u2019 strict locale validation, points to the exact commit where the check was introduced, and states that hyphens should only be disallowed in the first section (e.g. \u2018nl_NL\u2019). There\u2019s enough context to locate and adjust the validation logic, so a fix can be scoped out without further clarification."
    },
    "django__django-15525": {
        "input_bounce": false,
        "trace": "The reporter provides a minimal reproducible example including models, managers, natural key definitions, test fixture data, a clear description of steps (loaddata on default vs. non-default DB), and the full stack trace. They even link to a test project for easy reproduction. This is sufficient detail for a meaningful solution attempt."
    },
    "django__django-15526": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the affected function (get_view_on_site_url in contrib/admin/options.py), describes the missing current_app argument causing redirects to the default admin, and even links to a ready-made patch. It\u2019s obvious what change and test are needed for a successful solution."
    },
    "django__django-15554": {
        "input_bounce": false,
        "trace": "The user clearly describes the models and desired query, includes a complete code snippet showing two FilteredRelation aliases on the same relation, and explains the observed vs. expected SQL behavior. It\u2019s unambiguous what the desired fix is (produce two separate JOINs for the two filters), so the issue is well specified."
    },
    "django__django-15560": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (createsuperuser doesn\u2019t catch duplicates when using a UniqueConstraint instead of unique=True), provides a reproducible example, and indicates the expected behavior (validation prior to insertion). While it doesn\u2019t spell out the exact code changes, there\u2019s enough detail to implement a fix in the create_superuser command by inspecting model._meta.constraints. "
    },
    "django__django-15561": {
        "input_bounce": false,
        "trace": "The issue clearly states that for SQLite the AlterField operation should be a no-op when only choices are added/changed, since this change is metadata-only and other backends already skip it. It\u2019s straightforward to locate the AlterField logic in the migrations framework, detect when the only difference is in the field\u2019s .choices, and short-circuit the SQL generation for SQLite. While implementation details (exact methods/classes/files) aren\u2019t spelled out, an engineer familiar with the codebase can reasonably interpret what needs to be done."
    },
    "django__django-15563": {
        "input_bounce": false,
        "trace": "The reporter provides a concrete, minimal reproducible example with models, shell commands, the generated SQL, and the observed vs. expected behavior. It\u2019s clear what\u2019s going wrong (the wrong PK is used in the UPDATE clause) and what the fix should accomplish (apply the update to the Child instances\u2019 parent record via the correct FK). That is enough detail for a developer to locate the relevant QuerySet.update code and implement a patch."
    },
    "django__django-15569": {
        "input_bounce": false,
        "trace": "The issue clearly states what\u2019s wrong (missing cache clear in _unregister_lookup), points to the exact lines in the source, references the analogous code in register_lookup, and even identifies the specific test that needs updating. There\u2019s no ambiguity about what needs to be done."
    },
    "django__django-15572": {
        "input_bounce": false,
        "trace": "The issue clearly describes the symptom (autoreload breaking on an empty-string entry in TEMPLATES['DIRS']), pins down the regression in django/template/autoreload.py, includes repro steps and links to the offending commits. While it doesn\u2019t spell out the exact patch line-by-line, an experienced Django maintainer can sensibly infer that empty DIRS entries should be filtered out before normalization. That makes it reasonably specified for a PR."
    },
    "django__django-15576": {
        "input_bounce": true,
        "trace": "The issue is more of a discussion/meta-question about testing and a one-line change rather than a concrete, self-contained bug specification. It doesn\u2019t clearly define the expected behavior, replication steps, or a testable outcome, nor does it specify exactly where or how to implement the change. There\u2019s room for interpretation on what constitutes a successful solution and how to validate it, so it\u2019s too ambiguous to act on without further clarification."
    },
    "django__django-15586": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal\u2014to enable the cached template loader by default in development following prior PRs\u2014but doesn\u2019t spell out exactly which settings or files to change or how to handle edge cases. There\u2019s enough context to make a reasonable implementation plan, though some assumptions will be required."
    },
    "django__django-15607": {
        "input_bounce": false,
        "trace": "The report includes clear reproduction steps, explicit expected vs. actual behavior, and points to the relevant code location for adjustment. A developer can directly act on this to remove the extra redirect when the \u201cnext\u201d URL is unsafe."
    },
    "django__django-15620": {
        "input_bounce": false,
        "trace": "The issue clearly identifies where in the code (SQL migration writer) the change belongs, describes the current behavior versus desired behavior with concrete examples, and even suggests the wording for the new comment. A developer knowledgeable about the migration SQL writer can implement this without further clarification."
    },
    "django__django-15629": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (db_collation not applied to foreign key columns in migrations), provides code samples, actual vs. expected SQL, and the exact behavior to correct. It\u2019s straightforward to understand what change in Django\u2019s migration SQL generation is required."
    },
    "django__django-15643": {
        "input_bounce": true,
        "trace": "The issue description is extremely brief and lacks key details such as the ORM or migration framework being used, sample model definitions, migration commands or code snippets, the exact behavior observed versus expected, error messages, and steps to reproduce. Without this context, it\u2019s unclear what needs to be changed or how the migrations are implemented, making a meaningful solution impossible."
    },
    "django__django-15648": {
        "input_bounce": true,
        "trace": "The issue points out a TypeError when decorated methods are resolved via __get_dynamic_attr and suggests removing one of the two invocation paths (attr(item) vs attr()), but it doesn\u2019t clearly define which path to remove, how it should behave for all cases, or how the Feed view should work post-change. There\u2019s not enough context on the existing codebase, expected behavior, or which functions are affected, making it unclear what a complete solution would involve."
    },
    "django__django-15651": {
        "input_bounce": false,
        "trace": "The issue clearly defines the API signature for RenameIndex, specifies mutually exclusive parameters, outlines backend-specific behaviors (using RENAME INDEX when supported, falling back to lookup in information_schema), error conditions (AmbiguityError), autodetector integration, and reverse-operation behavior. While implementation details depend on the existing migration framework, the requirements are concrete and actionable."
    },
    "django__django-15669": {
        "input_bounce": false,
        "trace": "The issue clearly states the feature request: add a --update flag to Django\u2019s makemigrations command that behaves like South\u2019s schemamigration --update, updating the latest migration instead of creating a new file. While it omits low-level implementation details and edge-case handling, the core behavior is unambiguous and one can sensibly start a PR to replicate South\u2019s functionality. Thus it\u2019s reasonably specified."
    },
    "django__django-15671": {
        "input_bounce": false,
        "trace": "The request clearly states the desired feature: expose the \"too few\" and \"too many\" error messages on FormSet via a default_error_messages class attribute so they can be overridden through the error_messages parameter. While it doesn\u2019t show the exact code diff or tests, it\u2019s a straightforward feature addition to Django\u2019s BaseFormSet and leaves little ambiguity on what must be changed. "
    },
    "django__django-15678": {
        "input_bounce": false,
        "trace": "The issue clearly states what to do (deprecate in Django 4.1, remove in 5.0) and why (crypt module deprecation, legacy support). While it doesn\u2019t spell out every implementation detail (e.g. where to emit warnings or which docs to update), the overall scope and steps are obvious to an experienced contributor."
    },
    "django__django-15682": {
        "input_bounce": false,
        "trace": "The report clearly describes the undesirable behavior, shows examples, and states a desired API change (default nulls_first/last to None, deprecate False). It\u2019s specific enough to implement in the ORM\u2019s OrderBy code, write a deprecation warning, update defaults, docs, and tests. Some low-level details (exact warning text, test cases) would need deciding, but there\u2019s a clear expected outcome."
    },
    "django__django-15689": {
        "input_bounce": false,
        "trace": "The report clearly describes the regression, pinpoints the commit that changed behavior, provides performance measurements with and without APPEND_SLASH, and includes a minimal repro. It\u2019s obvious what the goal is (avoid the extra urlconf lookup on successful, non-slash URLs) and how to verify a fix. This is well-specified."
    },
    "django__django-15695": {
        "input_bounce": false,
        "trace": "The issue clearly describes a bug in Django\u2019s RenameIndex migration operation when handling autogenerated (unnamed) index names for unique_together constraints. It shows the failing test, the error, and the desired behavior (that database_backwards should restore the old autogenerated name so that database_forwards can be re-applied without conflict). While you\u2019d need to dive into the RenameIndex code to see exactly how names are stored and reversed, the expected fix (renaming back to the original autogenerated name) is unambiguous. Therefore, it\u2019s reasonably specified for a Django core contributor to implement."
    },
    "django__django-15698": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the regression (2.2 \u2192 3.2), minimal repro steps, exact traceback, expected vs. actual behavior, and even a concrete patch suggestion. It\u2019s straightforward to implement, test, and review."
    },
    "django__django-15703": {
        "input_bounce": true,
        "trace": "The issue statement is very high-level and lacks concrete details: it states an intention to deprecate index_together in favor of indexes but does not specify which code paths to change, how to handle backwards compatibility, what warnings or errors to raise, migration steps, timelines, or impacted components. There\u2019s insufficient information for a clear implementation plan without further clarification."
    },
    "django__django-15731": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (inspect.signature on manager/queryset methods only shows (*args, **kwargs)), provides a minimal repro, pinpoints the exact code location in manager.py, explains why metadata isn\u2019t propagated, and even suggests using functools.wraps. All requirements for a solution are explicit."
    },
    "django__django-15732": {
        "input_bounce": false,
        "trace": "The issue clearly describes the erroneous unique_together on the PK, shows the resulting duplicate unique constraints, and specifies the database. While it omits exact Django/migration versions and model code, there\u2019s enough context to sensibly interpret the fix needed (adjust migration constraint-dropping logic or ignore PKs)."
    },
    "django__django-15737": {
        "input_bounce": false,
        "trace": "The ticket clearly describes the bug, its root cause in Model._prepare_related_fields_for_save(), and even suggests the exact line change (replace setattr(self, field.attname, obj.pk) with setattr(self, field.name, obj)). With model/file location known, reproducer code, and the intended patch, it\u2019s well-specified for implementation."
    },
    "django__django-15738": {
        "input_bounce": false,
        "trace": "The issue clearly describes the starting models, the desired change (FK \u2192 M2M), the unique_together constraint that must be removed, and the exact migration error encountered, along with a minimal reproduction. While it could use explicit Django version details, it gives enough context and code (and even a project attachment) to attempt a solution unambiguously."
    },
    "django__django-15741": {
        "input_bounce": false,
        "trace": "The issue clearly describes a regression (TypeError in get_format when passed a lazy string), points to the specific commit, and states that get_format should accept lazy strings (e.g. by coercing them to real strings). While it doesn\u2019t prescribe exactly how to implement it (e.g. using force_text/str), the desired behavior and failure mode are unambiguous. This is enough to start coding a fix."
    },
    "django__django-15742": {
        "input_bounce": false,
        "trace": "The issue gives clear context, a concise description of the bug, a minimal reproducible example, and even outlines expected behavior versus actual behavior. That makes it straightforward to implement and test a fix."
    },
    "django__django-15744": {
        "input_bounce": true,
        "trace": "The report points at a bug (the request body being closed too early) and even references a specific PR, but it lacks reproduction steps, code context, expected vs. actual behavior, and affected versions. It\u2019s unclear exactly where or how to apply a fix without more details or a minimal example. "
    },
    "django__django-15747": {
        "input_bounce": false,
        "trace": "The report clearly shows a reproducible error path, includes sample admin code, the exact exception, and the desired behavior (update() should work even when ordering by an annotation).  It\u2019s obvious what a successful fix looks like (strip out/ignore ordering on annotated fields before running update()), so this is well-specified."
    },
    "django__django-15752": {
        "input_bounce": true,
        "trace": "The issue merely states that make_random_password() is unused since a past commit and requests deprecation, but gives no details on where the function lives, what versions to target, how to emit deprecation warnings, update docs or tests, or timeline for removal. It lacks the necessary specifics to implement a clear solution."
    },
    "django__django-15766": {
        "input_bounce": false,
        "trace": "The feature request clearly describes what needs to be added (a robust=True flag on transaction.on_commit that will catch and swallow exceptions for those handlers, allowing later handlers to run) and gives usage examples. It\u2019s not a full spec of logging behavior or error types to catch, but it\u2019s entirely sensible to interpret and implement. There\u2019s enough here to write a meaningful PR."
    },
    "django__django-15774": {
        "input_bounce": false,
        "trace": "The issue clearly defines the bug (case-sensitive parsing of Accept-Language), gives concrete examples where it fails, cites the relevant RFCs, points to the specific code area (e.g. parse_accept_lang_header), and even calls out the documentation change required. There\u2019s enough detail to implement and verify the fix without further clarification."
    },
    "django__django-15781": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates the current vs. desired help output and identifies that Django\u2019s default formatter collapses newlines. It\u2019s straightforward to interpret that BaseCommand.create_parser needs to use a raw or custom argparse formatter class (e.g. RawDescriptionHelpFormatter), or allow a command-level attribute to override it. Although the exact implementation detail isn\u2019t spelled out, there\u2019s a sensible path to a workable solution."
    },
    "django__django-15799": {
        "input_bounce": false,
        "trace": "The report identifies a specific discrepancy between widget rendering (checking allow_multiple_selected) and admin help text logic (only checking widget type). It cites exact file paths and line numbers and clearly states the desired behavior (suppress help text when allow_multiple_selected is False). This is directly actionable."
    },
    "django__django-15814": {
        "input_bounce": false,
        "trace": "The report includes environment details, minimal reproducible code (models, command), full traceback, and even a clear snippet of the offending code with a suggested workaround. It\u2019s clear what\u2019s broken (only() + select_related on proxy models), how to reproduce it, and what change fixes it. This is well-specified."
    },
    "django__django-15819": {
        "input_bounce": false,
        "trace": "The request is clear in scope and intent: extend Django\u2019s inspectdb to detect when a model has multiple FKs to the same target and automatically inject a unique related_name on each. While the exact naming pattern isn\u2019t spelled out in detail, there\u2019s a sensible default (e.g. use the field\u2019s attribute name) that a developer could implement. This makes the ticket reasonably specified for a PR."
    },
    "django__django-15828": {
        "input_bounce": false,
        "trace": "The report clearly names the class (BaseConstraint), the methods (deconstruct and __eq__) that are missing consideration of the violation_error_message attribute, and even points to the specific regression commit. A developer familiar with the codebase can locate BaseConstraint, update deconstruct() to emit violation_error_message in its kwargs, and update __eq__ to include that attribute in its comparison. There\u2019s enough detail to implement and verify the fix without further clarification."
    },
    "django__django-15851": {
        "input_bounce": false,
        "trace": "The issue clearly describes a specific bug: extra psql flags passed after the database name are being ignored and need to be reordered so that flags precede the database name. It even gives a concrete example of the command, output, and the expected adjustment. This is sufficient detail to implement a fix in the dbshell command wrapper."
    },
    "django__django-15863": {
        "input_bounce": false,
        "trace": "The issue provides a clear problem statement, a minimal reproducible example showing actual vs expected behavior, root-cause analysis (floatformat converting Decimal to float), and even a reference PR. It\u2019s precise enough to start implementing or reviewing a fix."
    },
    "django__django-15869": {
        "input_bounce": false,
        "trace": "The issue clearly states the specific change desired (deprecate the `length_is` template filter in favor of `length`) and provides context and examples. While it doesn\u2019t spell out every implementation detail (e.g., exact deprecation timeline or warning mechanism), there\u2019s a sensible, unambiguous interpretation of what must be done and where."
    },
    "django__django-15902": {
        "input_bounce": true,
        "trace": "The issue reads more like a discussion question (\u201cIs it worth special-casing this\u2026?\u201d) rather than a clear, actionable feature request or bug report. There\u2019s no defined scope or acceptance criteria, no precise description of how the warning should be suppressed for management forms, and no details on the code paths involved. It\u2019s unclear what a successful solution would entail, so the specification is too vague to implement immediately."
    },
    "django__django-15916": {
        "input_bounce": false,
        "trace": "The report clearly shows the current vs expected behavior, provides a minimal repro, and states exactly what needs to change (have modelform_factory pick up Meta.formfield_callback from the base form when none is passed explicitly). This is enough to implement and test a fix."
    },
    "django__django-15925": {
        "input_bounce": false,
        "trace": "The report gives a clear description of the bug, exact Django versions, detailed reproduction steps (including a minimal example), the specific error message, and observations about which field types and index settings trigger the failure. It\u2019s obvious what the expected behavior is (RemoveField on indexed SQLite fields should succeed) and what needs to be changed (adjust the SQLite migration logic to handle index removal before dropping the column)."
    },
    "django__django-15930": {
        "input_bounce": false,
        "trace": "The issue clearly provides a minimal reproducible example (the exact ORM code), the error message and generated SQL, and a stated expectation for behavior. It\u2019s obvious what change is needed (handle negated empty IN lists by treating them as always true rather than emitting an empty WHEN clause)."
    },
    "django__django-15957": {
        "input_bounce": false,
        "trace": "The issue clearly describes a concrete bug (slicing a queryset in Prefetch raises an AssertionError), provides a minimal reproducible example, references related discussion, and states the desired behavior (prefetch only a limited number of related objects). There\u2019s no ambiguity about what needs to change or why\u2014it\u2019s a straightforward enhancement/bug-fix request\u2014so it\u2019s well-specified."
    },
    "django__django-15969": {
        "input_bounce": true,
        "trace": "The reporter describes the exact SQL behavior, the models used, and the performance impact, but they never define what \u201cfix\u201d they actually want (a code change in Django\u2019s collector, different ORM usage, documentation update, etc.). It reads more like a support question about why SET_NULL is implemented this way rather than a clearly specified bug or feature request with acceptance criteria. The lack of a defined resolution path makes it ambiguous whether a code change or documentation tweak would satisfy the issue, so it\u2019s too vague to frame a PR around."
    },
    "django__django-15973": {
        "input_bounce": false,
        "trace": "The reporter provides all relevant model definitions (source, target, and through models), the generated migration, the exact error traceback, and notes how reorganizing files affects the problem. From this you can clearly see the missing migration dependency for the intermediary app (fonte_variavel) causes Django to treat the through argument as an unresolved string. There\u2019s a straightforward fix (add the proper migration dependency or reference the through model class directly). The request is concrete and unambiguous."
    },
    "django__django-15987": {
        "input_bounce": false,
        "trace": "The bug report clearly identifies the problem (duplicate fixture directories aren\u2019t detected when using pathlib.Path), the location (loaddata), and the expected behavior (duplicates should be caught regardless of type). While it\u2019s brief and lacks examples or context, there\u2019s a sensible interpretation of what needs to be changed (normalize Path to string or use os.fspath before duplicate checks). This makes the issue reasonably specified for an implementable fix."
    },
    "django__django-15993": {
        "input_bounce": false,
        "trace": "The issue clearly specifies that a RenameModel operation should do nothing if the target model already has the desired db_table assigned. There\u2019s no ambiguity about the desired outcome: detect when the db_table remains unchanged and skip any ALTER/DROP/CREATE steps. This is directly actionable in the migration operation code."
    },
    "django__django-15996": {
        "input_bounce": false,
        "trace": "The issue clearly explains the problem (combined enum flags default rendering to an invalid name in migrations), the root cause (EnumSerializer uses .name but combined values have no single name), and a high-level solution (use enum._decompose to get names and generate an OR expression). While it doesn\u2019t give exact code locations or API signatures, there\u2019s a sensible interpretation of what to implement and how migration defaults should be rendered. Thus it\u2019s reasonably specified for a meaningful implementation attempt."
    },
    "django__django-16002": {
        "input_bounce": false,
        "trace": "The bug report clearly describes how to reproduce the error, shows the traceback, and pinpoints that DecimalField skips validation for \u201cnan\u201d and crashes on retrieval. However, it doesn\u2019t spell out the desired behavior (e.g. whether to reject NaN on save or to special-case it on fetch), so you\u2019d need to make an implementation choice. It\u2019s not so vague that you can\u2019t act on it, but it isn\u2019t completely closed either."
    },
    "django__django-16032": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the bug, a minimal reproduction test case (with file and method to add), the exact error thrown, and the expected behavior. There\u2019s no significant ambiguity about what needs to change (i.e. clear out extra selected fields when building the IN subquery), so you can write a targeted fix and verify it against the provided test. Thus it\u2019s well-specified."
    },
    "django__django-16037": {
        "input_bounce": false,
        "trace": "The report includes Django version numbers, full stack traces for both SQLite and Postgres, the exact ORM call that fails (`.annotate(likes=Count(\"liked_by\"))`), the surrounding code (manager methods and model definitions), and the fact that it works in 4.0.7 but breaks in 4.1.1. That is enough to reproduce and diagnose the issue in the Django codebase, so it\u2019s well-specified."
    },
    "django__django-16041": {
        "input_bounce": false,
        "trace": "The report includes a clear description, expected behavior, minimal reproducible code (views, URLs, template), and the observed error. There is no ambiguity about what\u2019s wrong or what needs to change, so it\u2019s well-specified."
    },
    "django__django-16046": {
        "input_bounce": false,
        "trace": "The report clearly identifies where (numberformat.py), when (null/empty string input), and what fails (str_number[0] causing IndexError). The fix is obvious \u2013 guard against empty or null strings before indexing. While the exact return value for null input isn\u2019t spelled out, a reasonable default (e.g. return empty string or None) can be inferred. There\u2019s enough here for a straightforward PR."
    },
    "django__django-16053": {
        "input_bounce": true,
        "trace": "The issue clearly describes the problem (mixed localization in __str__), but it does not settle on a specific desired behavior or API change\u2014only suggests \u201ceither localize everything or nothing.\u201d Without a concrete decision (e.g. always use verbose_name for app labels, or add a toggle), it\u2019s unclear what a PR should implement. Thus it\u2019s too vague for a direct solution."
    },
    "django__django-16067": {
        "input_bounce": false,
        "trace": "The report clearly identifies a regression in DecimalValidator (accepted in Django 1.11 but failing in 2.0), shows the exact inputs (\u20180E+1\u2019, \u20180E+2\u2019), points out the commit where behavior changed, provides a concise failing test case, and even suggests the minimal change (normalize zero before validation). There\u2019s no ambiguity about what needs to be fixed or how success is measured (the provided test must pass)."
    },
    "django__django-16076": {
        "input_bounce": false,
        "trace": "The issue clearly describes the desired behavior (allow lookups like __startswith on the implicit _id field of a FK using to_field), provides a minimal reproducible example, the exact error, and the context (Django versions). A Django core contributor can immediately identify where to hook in lookup registration (e.g. in ForeignKey or RelatedField), so it\u2019s well\u2010specified."
    },
    "django__django-16082": {
        "input_bounce": false,
        "trace": "The report clearly identifies a specific bug (modulo expressions with mixed Decimal/Integer types not resolving to Decimal output_field) and the desired behavior (matching other arithmetic operators). While it doesn\u2019t include code snippets or tests, the change needed in Django\u2019s expression machinery is clear enough to implement. Thus it\u2019s reasonably specified."
    },
    "django__django-16092": {
        "input_bounce": true,
        "trace": "The issue gives only a tiny diff without context\u2014no file path, function, or tests, and no clear behavior or integration details. It\u2019s unclear where and how to implement this change for all databases, so it\u2019s too vague for a concrete solution."
    },
    "django__django-16100": {
        "input_bounce": false,
        "trace": "The issue clearly states what needs to be done\u2014wrap the list_editable processing inside changelist_view in a DB transaction\u2014but it doesn\u2019t point to exact lines or include tests or edge cases. A developer familiar with Django\u2019s admin code can locate the changelist_view, add an atomic block, and write tests. It\u2019s not fully detailed, but it\u2019s interpretable without further info."
    },
    "django__django-16116": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired change (\u201c`makemigrations --check` should exit without creating files, just like `migrate --check`\u201d) and points out the existing inconsistency. While you\u2019d still need to look at the management\u2010command implementation to wire up the exact exit codes and messaging, there\u2019s a straightforward, sensible interpretation of what needs to be done. There\u2019s enough information to attempt a solution without significant guesswork."
    },
    "django__django-16117": {
        "input_bounce": false,
        "trace": "The report clearly states the exact symptoms (migrations not detected when the filename contains dots), provides minimal reproduction steps and code, shows expected vs. actual behavior, includes a sample repo and even proposed fixes (renaming the file, changing the constraint name, or patching Django). There\u2019s no ambiguity about what needs to be changed, so it\u2019s well-specified."
    },
    "django__django-16120": {
        "input_bounce": false,
        "trace": "The report clearly identifies an unwanted behavior (pre_migrate/post_migrate signals still firing under `migrate --check`) and even shows the log output. The intended behavior\u2014no signals or summary logs when using `--check`\u2014is unambiguous. A developer can locate the signal emission in the migrate command, wrap it in a check for the `--check` flag, and add appropriate tests. This is sufficiently detailed for a direct fix."
    },
    "django__django-16136": {
        "input_bounce": false,
        "trace": "The report includes clear reproduction steps, minimal code, the exact error, environment versions and expected behavior. A developer can reproduce it immediately and know what to change (in async dispatch or HttpResponseNotAllowed handling)."
    },
    "django__django-16139": {
        "input_bounce": false,
        "trace": "The issue clearly describes the broken link URL, shows the relevant code snippet in UserChangeForm, explains why the relative path is wrong when using a non\u2010PK to_field, and even outlines the precise change needed (using self.instance.pk in the relative path). A maintainer can implement and verify this fix without further clarification."
    },
    "django__django-16142": {
        "input_bounce": false,
        "trace": "The request clearly states what behavior should change (get_language_from_request should return None instead of falling back to settings.LANGUAGE_CODE) and why. While it doesn\u2019t include every code detail (e.g., exact function location or test adjustments), it gives enough guidance to implement and verify the change in a typical Django codebase. Hence it is reasonably specified."
    },
    "django__django-16143": {
        "input_bounce": false,
        "trace": "The report clearly identifies the problem (lack of root\u2010cause context in TransactionManagementError), points to the exact location in Django\u2019s code (validate_no_broken_transaction in django/db/backends/__init__.py), and describes the desired behavior (track and display the exception that triggered needs_rollback). While it doesn\u2019t prescribe every implementation detail, there\u2019s a sensible interpretation of what\u2019s needed (store the initial exception in the atomic context and include it in the error message). This makes it reasonably specified for a contributor familiar with Django\u2019s transaction machinery."
    },
    "django__django-16145": {
        "input_bounce": false,
        "trace": "The report clearly describes the current behavior (showing \u201chttp://0:8000/\u201d) versus the expected behavior (showing \u201chttp://0.0.0.0:8000/\u201d), and even calls out exactly what code path needs change (the address formatting in the runserver command). There\u2019s no ambiguity about what success looks like, so it\u2019s well-specified."
    },
    "django__django-16208": {
        "input_bounce": false,
        "trace": "The request clearly states that when using Django\u2019s database backend logging, BEGIN is already logged, but COMMIT and ROLLBACK are not. The fix is simply to add logging calls for commits and rollbacks in the DatabaseWrapper or cursor wrapper (e.g. in commit() and rollback() methods) at the appropriate log level. While it doesn\u2019t specify exact log format or level, it\u2019s straightforward to infer from existing log entries. This is a reasonably specified ticket that can be implemented without further clarification."
    },
    "django__django-16229": {
        "input_bounce": false,
        "trace": "The report provides a concrete, minimal reproduction (models, admin form, and request steps), describes the unexpected behavior versus the expected (validation bypassed and field reset on re-submit), and even hints at a workaround. While the precise expected behavior could be spelled out a bit more formally, there\u2019s enough here to reproduce/diagnose and propose a fix. Thus this is reasonably specified."
    },
    "django__django-16254": {
        "input_bounce": false,
        "trace": "The report clearly describes a regression in Django\u2019s SQLite migration logic when adding a ManyToManyField, provides before/after SQL output, a bisected commit where the behavior changed, and even points to the removed special-case code. There\u2019s a concrete expected outcome (no table rebuild) and a lead on where to restore the logic. This is well enough specified to start coding a fix."
    },
    "django__django-16255": {
        "input_bounce": false,
        "trace": "The issue clearly describes what\u2019s wrong (max() on an empty sequence in get_latest_lastmod), includes the traceback, pinpoints the code location, and even suggests the exact change needed (catch ValueError alongside TypeError). It\u2019s immediately actionable."
    },
    "django__django-16256": {
        "input_bounce": false,
        "trace": "The report clearly describes the unintended addition of async methods on related managers, pinpoints the file and functions to patch, and even illustrates the desired overrides. The scope (six method combinations) and the exact behavior (calling manager methods via sync_to_async) are unambiguous, making it directly implementable."
    },
    "django__django-16260": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (refresh_from_db() not clearing a GenericForeignKey cache), provides a minimal reproduction in tests, points to the relevant code in Django, and defines the expected behavior (that refresh_from_db() should clear GFK caches). This is sufficient to start a fix and write a test, so it\u2019s well\u2010specified."
    },
    "django__django-16263": {
        "input_bounce": false,
        "trace": "The request clearly shows the current behavior\u2014`annotate(Count('chapters')).count()` still includes the annotation in the SQL even though it isn\u2019t used\u2014and states the desired outcome: strip out annotations not referenced by filters, orderings, or other annotations when executing `count()`. There\u2019s even precedent in Django\u2019s own ignoring of `select_related` in count queries. While the implementation details (how exactly to detect \u201cused\u201d annotations) aren\u2019t spelled out line by line, the goal and constraints are clear enough for a developer to devise a solution."
    },
    "django__django-16281": {
        "input_bounce": false,
        "trace": "The issue provides a clear, step-by-step reproduction with the initial model state, the change made (switching the M2M target to self), and the observed failure. The expected behavior (no OperationalError after migration) is implicit and unambiguous. This is enough for a developer to attempt a fix or investigation."
    },
    "django__django-16302": {
        "input_bounce": false,
        "trace": "The issue clearly identifies where to change the validation logic (allowing max_length=None) and even sketches the code patch. It also flags the related SQL generation gap for FileField. However, it doesn\u2019t fully specify how the database column should be created (e.g. mapping to TEXT on different backends) or include details on adapting the SQL creation code. Those design details would need filling in, but there\u2019s a clear, actionable scope. This makes the issue REASONABLY_SPECIFIED rather than fully specified."
    },
    "django__django-16306": {
        "input_bounce": false,
        "trace": "The issue points directly to a specific method in the codebase, cites exact line numbers, describes the unnecessary work in the \"happy path,\" and proposes a concrete change (short-circuit return from the cache with KeyError handling). There\u2019s enough detail to locate the code, understand the current and desired behavior, and implement a fix without further clarification."
    },
    "django__django-16311": {
        "input_bounce": false,
        "trace": "The report clearly identifies the need to extend Django\u2019s GZipMiddleware (or equivalent) with the \u2018Heal The Breach\u2019 approach: inject random bytes into the gzip filename field on each response. It points to the original paper and describes the desired endpoint (mitigating BREACH without disabling compression). While implementers will need to read the paper for exact packet-level details, the target component and goal are unambiguous and lead to a sensible implementation plan."
    },
    "django__django-16315": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (ON CONFLICT clause using Python field names rather than the actual db_column values, causing invalid SQL for mixed\u2010case column names), provides a minimal reproducible example, shows the current vs expected SQL, and indicates the desired fix. This is sufficient to implement a correct solution."
    },
    "django__django-16322": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, describes the incorrect SQL versus expected SQL, and pinpoints when the bug happens. However, the precise fix (warning vs. alias rewriting vs. query wrapping) is left open, so while it\u2019s actionable, you\u2019ll have to fill in some design details. Therefore it\u2019s reasonably specified."
    },
    "django__django-16333": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (UserCreationForm.save() omits save_m2m, so ManyToMany data isn\u2019t saved), pinpoints the root cause and expected behavior, and even suggests the fix (call save_m2m when commit=True). It\u2019s straightforward to write a PR to add that call and update/add tests. No further clarification is needed."
    },
    "django__django-16343": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the root problem (positional args misuse), proposes the exact signature change (adding a keyword-only \u2018*\u2019), and justifies why. While it doesn\u2019t spell out every doc/test update or deprecation timeline, there\u2019s enough detail to start implementing the new keyword-only signature, add appropriate warnings or deprecation notes, and update documentation. That makes it reasonably specified for a meaningful PR."
    },
    "django__django-16379": {
        "input_bounce": false,
        "trace": "The bug is clearly described with code snippets showing the exact race window (exists() followed by open). The failure mode (FileNotFoundError) is documented, and the intended fix (catching the missing-file error or restructuring to avoid the race) is obvious from context. There\u2019s sufficient information to draft a meaningful solution."
    },
    "django__django-16398": {
        "input_bounce": true,
        "trace": "The issue gives a very terse pointer to a commit and a code line, but no reproduction steps, expected vs actual behavior, or concrete patch context. It\u2019s unclear what the symptom is, how to reproduce it, or exactly what change is needed (beyond a vague suggestion to use partial). More detail is needed for a meaningful fix."
    },
    "django__django-16408": {
        "input_bounce": false,
        "trace": "The issue includes a clear description of the failing behavior, a minimal reproducible test case, and the expected vs. actual output. While it doesn\u2019t prescribe exactly which part of the ORM code to change, it provides enough detail to reproduce the bug and reason about the fix. Therefore it\u2019s reasonably specified."
    },
    "django__django-16411": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired feature\u2014exposing a manifest_hash whenever the manifest changes\u2014and why it\u2019s needed. While it leaves implementation details (hash algorithm, API location/name) open, the requirement and goal are sufficiently clear to scope and start work. Hence it\u2019s reasonably specified."
    },
    "django__django-16429": {
        "input_bounce": false,
        "trace": "The report includes a clear reproduction (test case), the exact error, the specific code location in timesince(), and even a suggested fix. It\u2019s straightforward to write a PR to make the pivot datetime timezone\u2010aware when USE_TZ=True. Hence it\u2019s well\u2010specified."
    },
    "django__django-16454": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, gives example code, shows current vs. expected behavior, and even points out exactly where to change (in the subparser action returned by add_subparsers). It\u2019s straightforward to implement by copying the CommandParser\u2019s formatting/error arguments into each subparser, so it\u2019s well specified."
    },
    "django__django-16485": {
        "input_bounce": false,
        "trace": "The issue provides a clear repro (two calls that both raise ValueError), points out the root cause (precision check disallows 0), and the implied fix is straightforward (allow 0 as a valid precision). It\u2019s unambiguous what behavior is wrong and how to correct it."
    },
    "django__django-16493": {
        "input_bounce": false,
        "trace": "The report clearly identifies the faulty behavior in FileField.deconstruct (callable storage returning default_storage gets dropped), shows reproducible example code, points to the exact spot in the code (the default_storage check in deconstruct after storage-callable is evaluated), and states the expected outcome (always include the callable reference). All the information needed to craft a fix (track the original callable or change the deconstruct logic) is present. This makes the issue well\u2010specified."
    },
    "django__django-16502": {
        "input_bounce": false,
        "trace": "The issue clearly states the RFC violation (HEAD must not return a body), shows reproduction steps, expected vs actual output, and identifies where the behavior changed. A patch should make runserver strip response bodies on HEAD requests. This is enough detail to implement and verify a fix."
    },
    "django__django-16511": {
        "input_bounce": true,
        "trace": "The issue describes a feature proposal (supporting separate `create_defaults` in `update_or_create`) and debates two possible APIs, but it doesn\u2019t settle on a clear design or acceptance criteria. There\u2019s no definitive decision on which approach to implement, nor detailed requirements for backward compatibility and edge cases. As stated, it\u2019s unclear what exact API shape and behavior a PR should deliver, so it\u2019s too vague to act on directly."
    },
    "django__django-16514": {
        "input_bounce": false,
        "trace": "The request clearly states the desired behavior: when using multiple AdminSite instances, each site\u2019s \u201cLogEntry\u201d changelist should only show entries for models registered with that specific site (i.e. filter by that site\u2019s registered models). The scope of the change is well understood (override the LogEntry admin view\u2019s queryset to restrict by the site\u2019s model registry), and there\u2019s no missing critical information. A developer can reasonably proceed to implement and test this feature based on the description."
    },
    "django__django-16517": {
        "input_bounce": false,
        "trace": "The issue clearly describes a reproducible bug (mixed-case view names being lowercased and causing a 404 in the admin docs), gives steps to reproduce, points to the relevant code area, and identifies the incorrect behavior. While it doesn\u2019t prescribe an exact fix, the problem and its location are well enough defined for a developer to attempt a solution."
    },
    "django__django-16527": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the file (django/contrib/admin/templatetags/admin_modify.py), the specific line (102), the missing permission check, and even provides the exact patch to apply. The desired behavior and context are unambiguous, so it\u2019s well-specified for implementation."
    },
    "django__django-16560": {
        "input_bounce": false,
        "trace": "The request clearly identifies the class and method to change (BaseConstraint.validate), what extra functionality is needed (pass a custom \u2018code\u2019 into the ValidationError), and roughly how it should work (add a new constructor parameter, update the error raise). While the exact parameter name and defaults might need to be agreed on in code review, there\u2019s a straightforward interpretation and path to implementation without needing further clarification."
    },
    "django__django-16569": {
        "input_bounce": false,
        "trace": "The report clearly states the failure conditions, reproduces the error, points to the exact code location, and even proposes a minimal patch. The expected behavior and the bug trigger are unambiguous, so the issue is well specified."
    },
    "django__django-16578": {
        "input_bounce": false,
        "trace": "The request clearly states what needs to be done\u2014modify BaseConstraint\u2019s constructor so its parameters are keyword-only\u2014but it doesn\u2019t enumerate exactly which parameters (beyond name and violation_error_message) or how to handle backwards compatibility and associated tests. There is a sensible interpretation of the task, but some implementation details are left implicit."
    },
    "django__django-16588": {
        "input_bounce": false,
        "trace": "The report includes minimal reproducible code, the exact failure (ValueError), the git commit that introduced the breakage, and all the context needed to implement and test a fix (e.g. guard against prec == 0). There\u2019s no ambiguity in what needs to change to resolve the crash."
    },
    "django__django-16595": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (optimizer drops all except AddField) and the desired behavior (also collapse consecutive AlterField operations), provides concrete examples of input and expected optimizer output, and even suggests a patch. There\u2019s no ambiguity about what needs to be changed or tested, making it well-specified."
    },
    "django__django-16599": {
        "input_bounce": true,
        "trace": "The report shows a specific OverflowError in Django when a URL contains an integer too large for SQLite, but it never states what the desired behavior should be (e.g. catch the error and return a 404, validate the PK before querying, or otherwise handle large integers). There\u2019s no clear acceptance criterion or spec for how Django should behave, so it\u2019s ambiguous what a successful fix looks like."
    },
    "django__django-16603": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, pinpoints the exact code location, and even supplies a failing test and the desired behavior (no response should be sent after a disconnect mid-request). While it doesn\u2019t prescribe the exact code changes, an experienced engineer can infer how to interleave or handle the http.disconnect event beyond read_body, and use the test as a guide. It\u2019s not perfectly spelled out step-by-step, but it\u2019s concrete enough to begin a PR."
    },
    "django__django-16612": {
        "input_bounce": false,
        "trace": "The issue clearly states the bug (dropping query strings on redirects), the expected vs. actual behavior, the specific function and code location, and even hints at the needed change (preserve request.META['QUERY_STRING'] or use get_full_path()). No further clarification is needed to implement a fix."
    },
    "django__django-16614": {
        "input_bounce": false,
        "trace": "The request clearly states what to change (default scheme in URLField.to_python should be switched from \"http\" to \"https\") and even points to the exact code lines. A developer can implement, test, and update docs accordingly. There\u2019s no ambiguity about the desired behavior."
    },
    "django__django-16631": {
        "input_bounce": false,
        "trace": "The report clearly states the discrepancy between Django\u2019s documentation (which promises SECRET_KEY_FALLBACKS will allow old keys for things like session hashes) and the actual code paths (salted_hmac and get_session_auth_hash never consult fallback keys). It even points to the specific functions involved. A developer can reproduce, identify where to inject fallback logic, and amend the code (or docs) accordingly. This is sufficiently detailed for a meaningful fix."
    },
    "django__django-16642": {
        "input_bounce": false,
        "trace": "The report clearly identifies that compressed file suffixes \u201c.Z\u201d and \u201c.br\u201d are currently treated as raw extensions, causing the mime-type guesser to use them instead of stripping them off and falling back to the underlying extension (e.g. \u201c.html\u201d). It\u2019s obvious that we need to treat \u201c.Z\u201d and \u201c.br\u201d analogously to \u201c.gz\u201d and \u201c.bz2\u201d: detect them as content\u2010encoding, strip them, then run the mime\u2010type lookup on the remainder. The ask is concrete and unambiguous enough to implement."
    },
    "django__django-16649": {
        "input_bounce": true,
        "trace": "The report identifies a symptom (annotated columns being appended in a fixed position and impacting union ordering) and suggests either documenting this behavior or making it configurable. However, it doesn\u2019t include concrete examples of input vs. expected output, nor a defined API or behavior change to implement. Without sample code, specific union failures, or a clear spec of the desired ordering feature, there\u2019s too much ambiguity to attempt a meaningful solution."
    },
    "django__django-16661": {
        "input_bounce": false,
        "trace": "The issue comes with a concrete failing test case, clear model definitions, the specific API call that\u2019s misbehaving, and the expected vs actual behavior. It even hypothesizes the root cause in the admin\u2019s lookup_allowed logic. All the information needed to reproduce and implement a fix is present."
    },
    "django__django-16662": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current vs. desired import ordering in generated migration files, cites the relevant style guide and isort behavior, and gives concrete examples. There\u2019s a direct mapping to the code that needs updating (the migration file generator), so it\u2019s well-specified for implementation."
    },
    "django__django-16667": {
        "input_bounce": false,
        "trace": "The report gives a minimal repro case, the exact widget method and line number in question, the precise exception and its trigger, and implies the fix (catch the OverflowError and treat it as a validation error). There\u2019s no ambiguity about what needs to change or where, so it\u2019s well-specified."
    },
    "django__django-16686": {
        "input_bounce": false,
        "trace": "The report clearly shows a reproducible snippet, the unexpected behavior (the FieldError choices list omits annotation aliases), and the intended fix (include annotation names in the list of valid choices). There\u2019s no ambiguity about what needs to be changed."
    },
    "django__django-16693": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current failure mode, shows the traceback and code location, and even suggests mirroring the existing view\u2010error handling. It\u2019s obvious where to wrap the update call, what kind of message to raise, and how it should behave, so a developer can jump in and implement it without further clarification."
    },
    "django__django-16745": {
        "input_bounce": false,
        "trace": "The report clearly describes the discrepancy between HTML5 number inputs (which use the min value as the base for step calculations) and Django\u2019s StepValueValidator (which always uses 0). It gives concrete examples (HTML snippet vs. IntegerField setup), points to the exact validator, and describes the desired alignment with browser behavior. A developer can jump in and update StepValueValidator to use min_value as the origin for step checks, so the issue is well specified."
    },
    "django__django-16746": {
        "input_bounce": true,
        "trace": "The issue only notes that error messages in Paginator.validate_number aren\u2019t customizable or internationalized, but provides no context on the codebase, current message formats, desired API for customization or i18n approach. There\u2019s insufficient detail to meaningfully implement a solution."
    },
    "django__django-16750": {
        "input_bounce": false,
        "trace": "The issue clearly describes the failure (ValueError when using Chr in annotate), provides a minimal repro snippet, the relevant traceback, and even a concrete suggestion (set output_field=CharField()). There\u2019s sufficient context to implement and validate the fix."
    },
    "django__django-16757": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (no system check on reversed FK in list_display), shows how to reproduce it with the Question/Choice example, presents the resulting traceback, and states the desired behavior (raise an admin system-check error like E109 instead of a 500). That gives a concrete change target (extend the admin\u2019s list_display checks to catch reversed foreign keys) and scope for tests. It\u2019s well-specified."
    },
    "django__django-16786": {
        "input_bounce": false,
        "trace": "The report clearly describes the erroneous behavior, provides minimal reproducible code with both failing and passing tests, shows the exact SQL generated (and missing JOIN), and even includes a repro repository. A contributor can clone, run the tests, and iteratively fix the join\u2010detection logic. This is sufficient for a meaningful implementation effort."
    },
    "django__django-16801": {
        "input_bounce": false,
        "trace": "The report clearly identifies exactly what logic needs changing \u2013 ImageField\u2019s post_init hook should only be connected when width_field or height_field are in use \u2013 and why, so an engineer can confidently implement and test the fix."
    },
    "django__django-16816": {
        "input_bounce": true,
        "trace": "The report notes that the existing \u201cE108\u201d system\u2010check doesn\u2019t catch an invalid list_display value and suggests it be extended, but it never shows the relevant E108 code, doesn\u2019t include the models or admin code, and even omits the reproduction link. There\u2019s no clear definition of what E108 currently checks or exactly how it should be changed, so it\u2019s too underspecified to implement a fix."
    },
    "django__django-16819": {
        "input_bounce": true,
        "trace": "The issue statement is extremely high-level and lacks any concrete context, examples, or acceptance criteria. It doesn\u2019t specify what constitutes redundant AddIndex/RemoveIndex operations, under what circumstances they should be reduced, or how to verify correctness. Without additional details about the codebase, desired behavior, and edge cases, it is unclear what a successful solution would entail."
    },
    "django__django-16824": {
        "input_bounce": false,
        "trace": "The report clearly describes the failure scenario (using a Path for NAME), pinpoints the exact traceback and code location, and even suggests the precise fix (casting each element of e.cmd to str). There\u2019s no ambiguity about what needs to change for a successful solution."
    },
    "django__django-16830": {
        "input_bounce": false,
        "trace": "The issue clearly states the models involved, the expected vs. actual SQL behavior when force_insert=True is passed, a minimal reproducible example, and the root cause (force_insert isn\u2019t forwarded to parent saves). It even mentions a local patch that works. All necessary details for implementing and testing a fix are provided."
    },
    "django__django-16865": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates a mismatch between expected and actual behavior when running \u201cmakemigrations --update --name foo\u201d: the custom name is ignored and the migration is renamed. The request to have --update respect its --name option is a concrete change. While there\u2019s an open question of whether to update docs or code, the core fix is well-scoped\u2014ensure the command carries the name flag into update mode\u2014so it\u2019s reasonably specified for a first implementation."
    },
    "django__django-16873": {
        "input_bounce": false,
        "trace": "The issue clearly describes the existing behavior of the join filter, provides minimal repro code and failing tests, and states the expected behavior under autoescape off. You can directly write or adjust the join implementation to skip escaping the separator when autoescape is disabled. This is enough detail for a concrete fix and verification via the provided test cases."
    },
    "django__django-16877": {
        "input_bounce": false,
        "trace": "The request clearly defines a new template filter 'escapeseq', its intended behavior (escape each item in a sequence when autoescape is off), and even gives a usage example. While implementation details (edge-cases, error handling, test cases) aren\u2019t spelled out, it\u2019s straightforward to derive them by analogy to the existing safeseq filter and Django\u2019s escape/conditional_escape utilities. Thus the spec is not completely exhaustive but gives enough to proceed."
    },
    "django__django-16888": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, provides a minimal failing test case, shows a full stack trace, and lays out the intended behavior (either swallow the InvalidOperation and return DoesNotExist or else supply a more specific error). While there is a small design choice to make (which of the two behaviors to implement), there is more than enough detail to write a targeted fix and add the provided test to the suite. Hence it is reasonably specified."
    },
    "django__django-16899": {
        "input_bounce": false,
        "trace": "The issue clearly identifies where in the code (ModelAdmin\u2019s readonly_fields check) the error message is generated, shows the current message, compares it to other similar checks, and specifies the desired change (include the field name in the readonly_fields error). There\u2019s no ambiguity about what needs to be done or where to make the change."
    },
    "django__django-16901": {
        "input_bounce": false,
        "trace": "The report clearly states the current (incorrect) behavior, the expected parity semantics, shows repro examples, and even points to the fallback SQL path introduced in a specific PR. It\u2019s obvious what code needs changing (the XOR fallback logic for more than two Q objects), so this is well-specified."
    },
    "django__django-16903": {
        "input_bounce": false,
        "trace": "The report includes a clear reproduction scenario (diamond\u2010shaped inheritance with a PK default), pinpoints the exact code in django/db/models/base.py where the logic is going wrong, and even proposes a precise patch (move the default\u2010PK check from _save_table into save_base). That gives a reviewer or contributor everything required to write a test, apply the change, and verify the fix. It\u2019s actionable and unambiguous."
    },
    "django__django-16910": {
        "input_bounce": false,
        "trace": "The issue includes clear reproduction steps with sample models, example queries, and the exact difference in generated SQL between Django versions (expected vs. actual). It specifies the desired behavior (only include the specified fields on a reverse OneToOneField when using select_related), so it\u2019s straightforward to write a test and implement a fix."
    },
    "django__django-16920": {
        "input_bounce": false,
        "trace": "This issue clearly describes the current rendering problem, the accessibility standards to meet, and shows concrete \u201cbefore\u201d and \u201cafter\u201d examples of the HTML changes (adding id attributes and aria-describedby). An engineer familiar with Django\u2019s form rendering or its widget templates can take those examples and update the default templates or renderer to emit the new IDs and aria attributes. The requirements and desired outcome are unambiguous and actionable."
    },
    "django__django-16938": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example (models, custom manager, serialization call), the exact exception and stack trace, and a clear description of the undesired behavior (select_related in the custom manager colliding with the serializers\u2019 use of only()/deferred fields). A developer has enough information to reproduce and diagnose the issue or propose a fix, so it is well-specified."
    },
    "django__django-16950": {
        "input_bounce": false,
        "trace": "The report includes Django/python versions, minimal model and admin code samples, clear reproduction steps, and the full stack trace. The expected vs. observed behavior is unambiguous (UUID default not applied in admin inlines), so it\u2019s well-specified for a fix."
    },
    "django__django-16952": {
        "input_bounce": false,
        "trace": "The issue clearly describes a crash scenario with nested multi-table inheritance (MTI), includes the exact model definitions, the failing test case, the expected behavior (creating the object without error), and the traceback pinpointing the bug (`.attname` on a OneToOneField). A developer familiar with Django\u2019s internals can reproduce and fix it directly."
    },
    "django__django-17029": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the missing cache clear for get_swappable_settings_name in Apps.clear_cache, points to the exact method to modify, and even suggests the precise line to add (self.get_swappable_settings_name.cache_clear()). It\u2019s unambiguous what change is needed and how to verify it, so it\u2019s well-specified."
    },
    "django__django-17046": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example (models, admin setup), clear reproduction steps, the exact error and stack trace, Django versions involved, and a suspected root cause. A developer has enough context to write a fix or regression test, so the issue is well\u2010specified."
    },
    "django__django-17058": {
        "input_bounce": false,
        "trace": "The request clearly defines adding a new optional boolean flag `nulls_distinct` to the `UniqueConstraint` API, preserving existing default behavior when `None` and emitting either `NULLS DISTINCT`/`NULLS NOT DISTINCT` clauses for backends that support SQL:F292 (e.g. PostgreSQL 15). It specifies default handling for other backends and points to concrete SQL standard behavior. An engineer could directly extend `UniqueConstraint`, carry the new attribute into the DDL compiler, guard clause emission by dialect/version, and add tests. This is sufficiently detailed and unambiguous."
    },
    "django__django-17084": {
        "input_bounce": false,
        "trace": "The issue clearly outlines the environment, the Django/PostgreSQL/psycopg2 versions, example code that triggers the error, and the exact exception message. While it doesn\u2019t explicitly state \u201chere\u2019s the desired SQL or ORM behavior,\u201d the title and description make it plain that aggregates over Window annotations no longer work and that\u2019s what needs fixing. This is enough context to propose changes or workarounds in the ORM, so it\u2019s reasonably specified."
    },
    "django__django-17087": {
        "input_bounce": false,
        "trace": "The issue gives a minimal reproducible example, shows the exact wrong migration output, and clearly states what the correct behavior should be (include the nested class in the import path). It\u2019s clear what needs fixing in the migration code generator, so the requirements are well-specified."
    },
    "django__django-7188": {
        "input_bounce": false,
        "trace": "The ticket clearly states the goal (allow using AuthenticationMiddleware and auth context processor without having django.contrib.auth in INSTALLED_APPS) and even mentions adding tests to prevent regression. The scope is defined, though implementation details are left to the developer\u2019s judgment. This is enough to start a meaningful solution."
    },
    "django__django-7475": {
        "input_bounce": false,
        "trace": "The request clearly specifies what change is needed\u2014add an option to the diffsettings command (e.g. --default=settings.base) so that it compares the current settings to the given module instead of Django\u2019s global defaults. The desired behavior and example usage are provided, so one can implement it without extra clarification."
    },
    "django__django-7530": {
        "input_bounce": false,
        "trace": "The report clearly describes the incorrect behavior (calling allow_migrate() with every model across all apps instead of scoping it to the current app\u2019s models), why it breaks things (shard routers see invalid app/model combinations), and where the change belongs (makemigrations consistency checks). An engineer familiar with Django can locate the relevant code and implement the necessary filtering. No further clarification is needed."
    },
    "django__django-8119": {
        "input_bounce": true,
        "trace": "The request is very high-level and lacks concrete details on the API changes, SQL generation, compatibility constraints, error handling, testing strategy, and examples beyond a single sketch. There\u2019s no breakdown of how expressions would integrate into existing filter/Q logic or what semantics to support. Without further fleshed-out requirements, it\u2019s unclear how to implement or validate a solution."
    },
    "django__django-8961": {
        "input_bounce": true,
        "trace": "The issue describes a problem with how command names are rendered in help text and poses several questions (e.g. handling __main__.py vs. python -m, when to prefix manage.py with ./, Windows vs. non-Windows behavior, documentation updates) but doesn\u2019t define clear acceptance criteria or a concrete desired implementation. There are multiple open questions and no single, well-defined goal for a PR. Therefore it\u2019s too ambiguous to implement directly."
    },
    "django__django-9296": {
        "input_bounce": false,
        "trace": "The request clearly specifies adding an __iter__ method to the Paginator class that simply yields each page in page_range (with example code), which is straightforward to implement, test, and document. It\u2019s unambiguous what change is needed and how success would be verified."
    },
    "django__django-9703": {
        "input_bounce": true,
        "trace": "The request simply asks for \u201csuggestions\u201d on mistyped management commands but provides no details on how suggestions should be generated or presented (thresholds, matching algorithm, output format, behavior for multiple results, etc.). In isolation\u2014without the attached patch or further spec\u2014it\u2019s too under-specified to implement unambiguously."
    },
    "django__django-9871": {
        "input_bounce": false,
        "trace": "The request clearly identifies the problem (global help flags are listed before command-specific ones in management command --help output) and the desired change (list command-specific options first). An implementer familiar with Django\u2019s BaseCommand.create_parser (or equivalent) and argparse/optparse grouping can directly apply the fix. The intended outcome is unambiguous and actionable."
    },
    "matplotlib__matplotlib-13859": {
        "input_bounce": false,
        "trace": "The report provides a minimal, self\u2010contained reproduction (zero\u2010height figure), exact error message, and environment details. The failure mode is clear (libpng crash), and the desired outcome (no crash or a graceful error) is implicit. This is enough to code up a fix or validation check."
    },
    "matplotlib__matplotlib-13908": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear description of actual vs expected behavior, version/platform details, and visual evidence. A developer can reproduce the bug and know exactly what change in behavior needs to be fixed. Therefore it is well-specified."
    },
    "matplotlib__matplotlib-13913": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the bug, a minimal reproducible example, the observed versus expected behavior, and environment details. It\u2019s straightforward to implement a fix in `is_color_like`\u2014e.g. reject numeric strings outside [0,1]\u2014making the issue well specified."
    },
    "matplotlib__matplotlib-13959": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current inconsistent behavior (x/y are flattened but c isn\u2019t), gives concrete examples of what works vs. what fails, and states the desired outcome (treat c the same way as x/y by allowing any shape that flattens to the right length).  While it doesn\u2019t pinpoint the exact lines to change in the library, it provides enough detail for a developer familiar with scatter()\u2019s implementation to implement and verify a fix."
    },
    "matplotlib__matplotlib-13980": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, clear description of the unexpected versus expected behavior, environment and version details, and a concrete fix (default radial lower bound should be zero). It\u2019s straightforward to implement and validate, so it\u2019s well-specified."
    },
    "matplotlib__matplotlib-13983": {
        "input_bounce": false,
        "trace": "The issue comes with a minimal reproducible example, a clear description of the bug\u2019s root in _remove_ax\u2019s reset logic, and a statement of the desired behavior (preserve unit-provided formatters after remove()). That is sufficient to craft a targeted fix (e.g. not clobbering the \u2018isDefault\u2019 flags or skipping the set_* calls when a unit formatter is in use)."
    },
    "matplotlib__matplotlib-13984": {
        "input_bounce": false,
        "trace": "The request clearly describes the failing behavior (tick marks won\u2019t change color on Axes3D via tick_params), provides a minimal reproducible example, and states the expected outcome (tick marks colored along with labels, as in earlier versions).  There\u2019s no ambiguity about what needs to be done\u2014add support in the 3D axes code for passing the tick_params \u2018colors\u2019 setting through to the tick mark artists\u2014so it\u2019s well-specified."
    },
    "matplotlib__matplotlib-13989": {
        "input_bounce": false,
        "trace": "The report clearly states the bug (density=True ignores the given range), provides minimal reproducible code, shows actual vs expected output, and even bisects the problematic commit. It\u2019s fully actionable."
    },
    "matplotlib__matplotlib-14471": {
        "input_bounce": false,
        "trace": "This issue clearly describes the regression, provides environment details, actual vs expected behavior, and exact reproduction steps (via NeXpy and the embedded IPython shell). The root cause is localized to the Matplotlib Qt backend and the new_figure_manager code. A developer can reproduce the bug and know what to fix without further clarification."
    },
    "matplotlib__matplotlib-14623": {
        "input_bounce": false,
        "trace": "The issue includes a clear summary, minimal reproducible code, actual vs expected behavior with screenshots, and version/environment details. It\u2019s unambiguous what the bug is (inverting log-scale axes via reversed limits doesn\u2019t work) and what the correct behavior should be. This is sufficient to begin a fix."
    },
    "matplotlib__matplotlib-17810": {
        "input_bounce": false,
        "trace": "The reporter has provided a minimal, complete code snippet that reproduces the error, the full traceback, and environment details.  A developer can load that script, reproduce the failure, and know that the goal is for both animation.save and fig.savefig to succeed without a StopIteration.  That\u2019s enough to start diagnosing and implementing a fix or workaround."
    },
    "matplotlib__matplotlib-18869": {
        "input_bounce": false,
        "trace": "The issue clearly defines the problem (only a string __version__ is available) and proposes a concrete enhancement (expose a comparable version_info tuple or LooseVersion instance at the top level). While some details (exact attribute name, choice between tuple vs LooseVersion, parsing rules) are left to bikeshedding, there\u2019s a sensible, straightforward path to implement and test the feature. Thus it\u2019s reasonably specified."
    },
    "matplotlib__matplotlib-19743": {
        "input_bounce": true,
        "trace": "The issue is merely a brief feature request without any examples, desired behavior descriptions, or context about the current shortcomings. There is no reproduction case or specification of how constrained_layout should handle figure.legend, making it unclear what a successful solution entails."
    },
    "matplotlib__matplotlib-19763": {
        "input_bounce": false,
        "trace": "The report includes a clear bug summary, minimal reproducible example, actual vs. expected behavior, environment details (versions, backend), and references. It\u2019s straightforward to reproduce and pin down the fix, making it well specified."
    },
    "matplotlib__matplotlib-20374": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example (conf.py, index.rst, a.rst, b.rst), clear reproduction steps, the observed vs. desired behavior, and even a concrete proposal (\u201cif a plot directive has :context:, always mark it out\u2010of\u2010date so it\u2019s rerun when the file is recompiled\u201d). That is enough to implement and test a fix in plot_directive\u2019s out_of_date() logic."
    },
    "matplotlib__matplotlib-20470": {
        "input_bounce": false,
        "trace": "The report clearly describes the missing behavior (Text objects with a `label` not appearing in the legend), gives minimal reproducible code, the actual vs. expected outcome, and the Matplotlib version. There\u2019s no ambiguity about what the fix should do: treat `ax.text(..., label=\u2026)` like any other labeled artist so it shows up in `ax.legend()`."
    },
    "matplotlib__matplotlib-20488": {
        "input_bounce": false,
        "trace": "The report clearly identifies the exact test that\u2019s failing, provides the stack trace, the involved files, and hints at a recent PR (#18458) and potential numpy changes. While it doesn\u2019t include the full test code or a proposed fix, there\u2019s enough context (test name, failure mode, code locations) for a developer with access to the repository to reproduce, diagnose and address the failure. Thus it\u2019s reasonably specified."
    },
    "matplotlib__matplotlib-20518": {
        "input_bounce": false,
        "trace": "The report clearly states what\u2019s wrong (sketch_params aren\u2019t applied), includes minimal reproduction code, actual vs. expected outputs, and environment/version. It\u2019s straightforward to locate the PGF backend\u2019s draw path logic and add support for the sketch parameters."
    },
    "matplotlib__matplotlib-20584": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, clear before/after images, expected vs. actual behavior, and version info. It\u2019s straightforward to reproduce and diagnose why resetting segments changes the rendering, so it\u2019s well-specified."
    },
    "matplotlib__matplotlib-20676": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clearly describes the actual vs expected behavior, specifies versions and environment, and even references the prior behavior in Matplotlib 3.4. This is sufficient to start diagnosing and fixing the SpanSelector\u2019s axis-limiting logic."
    },
    "matplotlib__matplotlib-20679": {
        "input_bounce": false,
        "trace": "The issue clearly states the bug summary, provides a minimal reproducible code snippet, describes the actual vs. expected behavior, and includes relevant environment details. A developer can understand and implement the requested change."
    },
    "matplotlib__matplotlib-20693": {
        "input_bounce": true,
        "trace": "The issue describes a user question (\u201chow do I update selector colors now that the old API is gone?\u201d) and requests improving a deprecation warning, but it never specifies what the replacement API should be or what the final behavior/implementation should look like. There isn\u2019t enough detail on the intended new selector interface or how to migrate the code, so it\u2019s too vague to implement a PR against the codebase without further specification from maintainers."
    },
    "matplotlib__matplotlib-20805": {
        "input_bounce": false,
        "trace": "The report provides a minimal reproducible example, clearly states actual vs. expected behavior, and includes environment details (Matplotlib version, Python version, OS). It\u2019s obvious what needs fixing (the interaction between spine repositioning and tick label rotation) and how to verify the solution. This is WELL_SPECIFIED."
    },
    "matplotlib__matplotlib-20826": {
        "input_bounce": false,
        "trace": "The report clearly describes the regression, provides minimal reproducible code, expected vs. actual outputs, and environment details. A fix can be developed and tested against the provided example."
    },
    "matplotlib__matplotlib-20859": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, actual versus expected behavior, version information, and even points to the exact code lines to change in legend.py. It\u2019s crystal-clear what change is needed (broaden the isinstance check to include SubFigure/FigureBase), making it fully actionable."
    },
    "matplotlib__matplotlib-21042": {
        "input_bounce": false,
        "trace": "The issue includes a clear reproduction snippet, actual and expected behaviors, environment details, and even points to the likely offending code location. It\u2019s straightforward to write a fix that filters out deprecated rcParams before updating (or adjusts the validators), so the requirements are well-specified."
    },
    "matplotlib__matplotlib-21318": {
        "input_bounce": false,
        "trace": "The issue clearly describes the error, provides minimal reproducible code, the differing behavior between versions, the expected vs actual outcome, and environment details. A developer can directly attempt a fix or workaround based on this information."
    },
    "matplotlib__matplotlib-21481": {
        "input_bounce": false,
        "trace": "The report gives a minimal self-contained reproduction, shows the full traceback, describes actual vs. expected behavior, and lists environment details. That is enough to start debugging and fixing the layout code."
    },
    "matplotlib__matplotlib-21490": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, provides minimal reproducible code, shows actual versus expected behavior, and specifies the desired change (Line2D should copy its input arrays). All necessary details are present to implement and test a fix."
    },
    "matplotlib__matplotlib-21542": {
        "input_bounce": false,
        "trace": "The issue clearly defines the problem (colorbar uses old\u2010style format strings versus the new Axis logic), points to the exact code to change, and proposes a concrete solution (remove the special-case `if` so that Axis handles formatting). While details around the deprecation cycle and detection of old- versus new\u2010style strings aren\u2019t fully fleshed out, it\u2019s specific enough to start implementation with sensible assumptions. Hence it\u2019s reasonably specified."
    },
    "matplotlib__matplotlib-21550": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear indication of a regression between two Matplotlib versions, actual vs expected output screenshots, and full environment details. A developer can pull the 3.5.0 master, run the snippet, observe the failure, and know exactly what to fix. This is well-specified."
    },
    "matplotlib__matplotlib-21559": {
        "input_bounce": false,
        "trace": "The issue comes with a minimal reproduction script, the exact error, the expected versus actual behavior, specific environment details (matplotlib version, Python version, OS), and a clear request (\u201ceventplot should accept multiple datetime.date series and render them.\u201d). This is fully reproducible and actionable."
    },
    "matplotlib__matplotlib-21568": {
        "input_bounce": false,
        "trace": "The issue clearly states what\u2019s wrong (datetime tick spacing with usetex changed from v3.3 to v3.4), provides minimal reproduction code, actual vs expected output, and environment details. It\u2019s straightforward to reproduce and implement a fix to restore the old spacing behavior."
    },
    "matplotlib__matplotlib-21617": {
        "input_bounce": false,
        "trace": "The issue includes a clear description of the bug, a minimal reproducible example, exact environment details (OS, Matplotlib versions, Cartopy, Python, backend), screenshots of actual vs. expected output, and steps to reproduce. It\u2019s straightforward to attempt a fix or diagnosis. Thus it is WELL_SPECIFIED."
    },
    "matplotlib__matplotlib-22719": {
        "input_bounce": false,
        "trace": "The reporter gives a minimal reproduction, clear actual vs. expected behavior, full traceback, pointers to the offending code path (category unit converter \u2192 warning on empty arrays), and even hints at a specific fix (special-case empty inputs). All of the information needed to implement and test a change is present."
    },
    "matplotlib__matplotlib-22767": {
        "input_bounce": false,
        "trace": "The report clearly identifies the faulty default argument in find_nearest_contour (using levels instead of layers), gives the exact line number, provides minimal reproduction code, actual vs. expected behavior, and environment details. The intended fix is unambiguous: change `indices = range(len(self.levels))` to `indices = range(len(self.layers))`."
    },
    "matplotlib__matplotlib-22835": {
        "input_bounce": false,
        "trace": "The report clearly reproduces the bug (code snippet, error trace, Matplotlib version) and identifies exactly where and why the crash happens, but it leaves open which of several fixes is preferred (catching the exception versus providing an approximate inverse). This is enough to begin implementation work but still requires a design decision, so I\u2019d call it REASONABLY_SPECIFIED."
    },
    "matplotlib__matplotlib-22865": {
        "input_bounce": false,
        "trace": "The issue provides a clear bug description, a minimal reproducible code snippet, the actual vs. expected output (with screenshots), and the Matplotlib version. Although some platform details are missing, they\u2019re unlikely to affect this pure rendering issue. There\u2019s enough information to investigate and implement a fix."
    },
    "matplotlib__matplotlib-22871": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the bug, minimal reproducible code, actual vs expected behavior, environment details (OS, Python version, Matplotlib version, backend), and a precise expectation (show the year in the offset). A developer can directly use this to write a test and fix the formatter logic."
    },
    "matplotlib__matplotlib-22883": {
        "input_bounce": false,
        "trace": "The issue clearly states what\u2019s wrong (strings meant as f-strings are missing the `f` prefix), points to the exact file and line in the repo, and the fix is unambiguous (add the `f` prefix). It lacks an inline code snippet but gives a direct link, so one can inspect and correct it without additional clarification."
    },
    "matplotlib__matplotlib-22926": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, the exact error traceback, the expected behavior, the offending code with file/line references, and even a proposed change to fix it. This is fully actionable and unambiguous."
    },
    "matplotlib__matplotlib-22929": {
        "input_bounce": false,
        "trace": "The report provides clear reproduction steps for three distinct cases, shows the exact error traceback (including file and line numbers), notes version and environment, and even suggests desired behavior for each case. There is no ambiguity about what needs to be changed in the bar_label implementation to handle NaN values in data and/or error arrays."
    },
    "matplotlib__matplotlib-22945": {
        "input_bounce": false,
        "trace": "The issue is accompanied by a minimal reproducible example, full traceback, the exact commit SHA where the regression appeared, environment details (OS, Python version, backend), and a clear description of actual vs. expected behaviour. That makes it straightforward to reproduce and diagnose, so it is well-specified."
    },
    "matplotlib__matplotlib-23031": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal (stop using the locale encoding for rc/style files; require UTF-8 or PEP-263 cookies) and points to the relevant code paths (rc_params_from_file, _rc_params_in_file), but it doesn\u2019t lay out exact implementation details or test changes. There\u2019s enough context to craft a solution, but some assumptions will have to be made about how strictly to enforce UTF-8 and whether to support encoding cookies, so it\u2019s not fully spelled out."
    },
    "matplotlib__matplotlib-23057": {
        "input_bounce": false,
        "trace": "The issue provides a clear summary, exact reproduction steps, environment setup, expected vs. actual behavior, bisected commit, and full dependency list. It\u2019s sufficiently detailed to attempt a fix."
    },
    "matplotlib__matplotlib-23088": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, full traceback, the precise location in the code (mpl._replacer), the current behavior (silent fallback causing misleading downstream errors), the desired behavior (emit a warning on KeyError), and even a sketch of the patch. There\u2019s no ambiguity about what needs fixing or where in the codebase to apply it."
    },
    "matplotlib__matplotlib-23174": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact traceback, expected vs actual behavior, and relevant environment details. It\u2019s clear what\u2019s failing (adding clabels on a SubFigure) and what the correct behavior should be, so it\u2019s well-specified."
    },
    "matplotlib__matplotlib-23188": {
        "input_bounce": false,
        "trace": "The issue clearly states the current behavior (default date limits 2000-01-01 to 2010-01-01), why it\u2019s a problem, and exactly what should change (use 1970-01-01 to 1970-01-02). It even notes which tests will need updating (empty axes tests), so there is a direct, unambiguous path to implement and verify the fix."
    },
    "matplotlib__matplotlib-23267": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current limitation (no `location` kwarg when supplying a manual Axes), shows minimal reproducible examples, and spells out the proposed change (add a `location` parameter to the Colorbar constructor that sets both `orientation` and `ticklocation`, mutually exclusive with them). The mapping of location values to orientation and tickplacement is obvious, so a developer can implement and document it without extra clarification."
    },
    "matplotlib__matplotlib-23299": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear description of actual vs. expected behavior, environment/version details, and an explicit assertion failure. It\u2019s easy to understand the bug and what a correct fix would do."
    },
    "matplotlib__matplotlib-23314": {
        "input_bounce": false,
        "trace": "The issue clearly states the bug (set_visible not hiding 3D subplot), provides minimal reproducible code, actual vs expected outcomes, Matplotlib version, backend, and Python version. This is sufficient to reproduce, diagnose, and implement a fix."
    },
    "matplotlib__matplotlib-23412": {
        "input_bounce": false,
        "trace": "The issue includes minimal reproducible code, clear description of actual vs expected behavior, sample outputs, environment info, and a straightforward request (enable dash-offsets for patch edges). It\u2019s sufficiently detailed to implement and test a fix."
    },
    "matplotlib__matplotlib-23476": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear description of actual vs expected behavior, environment details (OS, Matplotlib version, backend, Python version), and highlights that the DPI doubles on M1 Mac when unpickling. It is unambiguous what needs to be fixed (preserve the original DPI on unpickling), so the issue is well-specified."
    },
    "matplotlib__matplotlib-23562": {
        "input_bounce": false,
        "trace": "The issue comes with a minimal reproducible example, a clear traceback, and enough context to locate the faulty method in mpl_toolkits.mplot3d.art3d.py. It\u2019s clear that Poly3DCollection.get_facecolors() is referencing an undefined attribute and should mirror the 2D version by populating _facecolors2d appropriately. While the exact desired values aren\u2019t spelled out, there\u2019s a sensible reference implementation in the 2D code to follow, so one can craft a concrete fix without further clarification."
    },
    "matplotlib__matplotlib-23563": {
        "input_bounce": true,
        "trace": "The report describes a confusing stateful bug but lacks a concrete minimal reproducible example and clear steps to reproduce the transition that causes the AttributeError. Key details are placeholders (e.g. \u201cmy int number list\u201d), and the behavior depends on an unexplained sequence of operations in the IPython session. It\u2019s unclear how to trigger the error reliably or what the root cause should be, so the issue is too vague to act on without more information."
    },
    "matplotlib__matplotlib-23742": {
        "input_bounce": false,
        "trace": "The report clearly states the component that\u2019s failing (the toolbar trait in the notebook Canvas), the exact exception and types involved, and even points to the CI failure. Although the minimal reproducer isn\u2019t fully boiled down to standalone code yet, there\u2019s enough context (error message, trait definition expectations, backend instantiation path) to meaningfully track down and fix the type mismatch in the traitlets declaration or toolbar factory. Hence the issue is reasonably specified for an experienced engineer to attempt a PR."
    },
    "matplotlib__matplotlib-23964": {
        "input_bounce": false,
        "trace": "This issue clearly describes the bug (empty-line in multiline text causes a NoneType stream), provides minimal reproduction code, shows the traceback, the expected behavior, and even suggests exactly where in the code (backend_ps.py line 669) a guard (`if curr_stream:`) should be added. All details needed to craft and verify a fix are present."
    },
    "matplotlib__matplotlib-23987": {
        "input_bounce": false,
        "trace": "The report includes a clear reproduction snippet, actual vs expected behavior, Matplotlib version, and platform details. It\u2019s clear what the bug is (a warning issued despite constrained_layout=False) and how to reproduce it, so no further clarification is needed."
    },
    "matplotlib__matplotlib-24013": {
        "input_bounce": true,
        "trace": "The issue is more of a design discussion than a concrete bug or feature with clear acceptance criteria. It proposes renaming modules (e.g. tripcolor \u2192 _tripcolor) to avoid name collisions, but doesn\u2019t specify the full scope, migration path, or final behavior. There\u2019s no clear \u201cdone\u201d state or code change instructions, making it too vague for an immediate implementation."
    },
    "matplotlib__matplotlib-24026": {
        "input_bounce": false,
        "trace": "The issue clearly defines the current behavior (stackplot resetting the axes prop cycle and rejecting \u2018C#\u2019 color aliases), provides reproducible example code and traceback, and states the desired change (stackplot should honor CN aliases and not alter the Axes prop cycle). This is sufficiently specific to implement and test a fix."
    },
    "matplotlib__matplotlib-24149": {
        "input_bounce": false,
        "trace": "The report includes minimal reproducible code, exact traceback, actual vs. expected behavior, Matplotlib version info, and narrowed-down debugging notes (only x-values with NaN fail). A developer can jump straight into the `_convert_dx` handling in `Axes.bar` and write a fix or regression test. This is fully actionable."
    },
    "matplotlib__matplotlib-24177": {
        "input_bounce": false,
        "trace": "The report clearly states the problem, provides minimal reproducible code, actual vs. expected results (with images), environment/version details, and even a test repo. A developer can reproduce and debug it immediately."
    },
    "matplotlib__matplotlib-24189": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example, shows the confusing error, supplies the desired layout, and even sketches two reasonable paths forward (support outer\u2010only ratios or raise a clearer error). Acceptance criteria (no error with outer ratios, correct figure) are clear. This is enough to start implementing or improving the error message."
    },
    "matplotlib__matplotlib-24257": {
        "input_bounce": false,
        "trace": "The issue clearly defines the goal\u2014add documentation (and a template package) for distributing Matplotlib style dicts via Python packages, referencing an existing PR and a template model. While some details (exact doc location/format, template repo structure) are left to interpretation, the overall requirement is clear enough to begin implementation and fill in specifics with standard Matplotlib documentation patterns."
    },
    "matplotlib__matplotlib-24334": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the function(s) involved (Axes.set_xticks/Axis.set_ticks), the current incorrect behavior (kwargs only validated when labels are provided), and the desired change (always validate kwargs, possibly error if labels not set). While there are some implementation details left (warning vs error, exact validation logic), there is a sensible interpretation and clear path to a solution."
    },
    "matplotlib__matplotlib-24362": {
        "input_bounce": false,
        "trace": "The issue clearly defines the bug (sharex/sharey not accepting 0/1), shows a minimal repro, the current error, the expected behavior, and even a candidate patch. The scope is narrow and actionable, so it\u2019s well-specified."
    },
    "matplotlib__matplotlib-24431": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (eventplot accepts a list of colors but not a list of alpha values), provides minimal reproducible code snippets, the exact error message, and the expected analogous behavior (support per-line alpha the same way per-line colors are supported). This is concrete enough to implement and test a fix."
    },
    "matplotlib__matplotlib-24538": {
        "input_bounce": false,
        "trace": "The issue clearly identifies that the Legend.legendHandles attribute is undocumented and proposes either adding documentation for it, providing a get_legendHandles() method, or pointing to ax.get_legend_handles_labels() from the legend docs. The scope (Matplotlib legend docs and possibly the Legend class API) and the desired changes are clear, even if you\u2019d need to locate the exact doc files and coding conventions. Thus it is reasonably specified for a PR."
    },
    "matplotlib__matplotlib-24570": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the bug, minimal reproducible code, actual vs expected behavior, and the specific parameter (`align` in `HPacker`) that needs fixing. There\u2019s no ambiguity about what needs to be done\u2014a straightforward swap of the \u2018top\u2019/\u2018bottom\u2019 logic\u2014so it\u2019s well-specified."
    },
    "matplotlib__matplotlib-24604": {
        "input_bounce": false,
        "trace": "The request clearly describes the goal (support mosaic layouts of heterogeneous projections) and proposes a concrete API (`fig.gridspec_mosaic(...)` returning a dict of SubplotSpec objects). While the exact function signature and edge\u2010case behaviors aren\u2019t exhaustively defined, there is a straightfoward, sensible implementation path (mirror `subplot_mosaic` internals but return specs instead of axes), so the issue is reasonably specified."
    },
    "matplotlib__matplotlib-24619": {
        "input_bounce": false,
        "trace": "The issue provides a minimal reproducible example, clear description of the error, expected behavior, and even suggests specific code changes and file locations. While a few details (e.g. why the proposed patch still fails) are missing, there\u2019s enough context and guidance to implement and iterate on a fix. Thus it\u2019s reasonably specified."
    },
    "matplotlib__matplotlib-24627": {
        "input_bounce": false,
        "trace": "The issue clearly states the current vs. expected behavior with minimal code examples. It specifies that after calling cla() or clf(), deparented artists should have their .axes and .figure attributes unset (i.e. set to None), just as artist.remove() does. The scope is well-bounded (modifying Axes.cla and Figure.clf), and there is no ambiguity about what needs to be done. Thus the issue is well-specified."
    },
    "matplotlib__matplotlib-24637": {
        "input_bounce": false,
        "trace": "The report gives precise reproduction steps, example code, expected vs. actual behavior, relevant version info, and even points to a related past fix that likely missed this case. A developer can locate the SVG backend\u2019s handling of AnnotationBbox, compare to the previous PR, and add support for propagating the gid. This is enough to start implementing a fix without further clarification."
    },
    "matplotlib__matplotlib-24691": {
        "input_bounce": false,
        "trace": "The request clearly defines the problem (one global alpha for patches) and the desired API change (accept a two\u2010element tuple for separate edge and face alpha, analogous to imshow). An implementer can write the patch methods to unpack the tuple and apply the two alpha values appropriately, update docs, and add tests. The goal and scope are unambiguous."
    },
    "matplotlib__matplotlib-24768": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, clear description of actual vs expected behavior, relevant traceback, Matplotlib versions tested, and even pointers to commits where the behavior changed. It\u2019s straightforward to identify and implement a fix or add handling in the MixedModeRenderer. Therefore it\u2019s well-specified."
    },
    "matplotlib__matplotlib-24849": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (missing gapcolor support on LineCollection), provides minimal reproducible code, shows the actual error and expected behavior, points to the relevant code location, and even suggests the needed API additions (get_gapcolor/set_gapcolor). This is enough detail to implement a fix."
    },
    "matplotlib__matplotlib-24870": {
        "input_bounce": false,
        "trace": "The request clearly defines the desired behavior (auto\u2010detect boolean inputs to contour() and use a single 0.5 level when levels isn\u2019t specified) and gives context and examples, but it leaves integration details (where exactly in contour code to hook this, how to handle masked arrays, etc.) to the implementer. It\u2019s a straightforward feature proposal with enough direction for a sensible implementation, so it\u2019s REASONABLY_SPECIFIED."
    },
    "matplotlib__matplotlib-24924": {
        "input_bounce": false,
        "trace": "The issue includes a clear bug summary, minimal reproducible example, actual vs. expected behavior, and even points to the exact lines in the codebase and a suggested fix. It is straightforward to implement the change, write a test, and verify the fix. Therefore it is well-specified."
    },
    "matplotlib__matplotlib-24970": {
        "input_bounce": false,
        "trace": "The report includes a clear summary, minimal reproducible example, actual vs expected behavior, and environment details. It\u2019s straightforward to identify where the NumPy deprecation warnings arise in matplotlib/colors.py and what change (e.g. explicit casting) is needed to suppress them. This is well-specified."
    },
    "matplotlib__matplotlib-25027": {
        "input_bounce": true,
        "trace": "The issue describes a high\u2010level goal (add RGB(A) support to pcolor to match pcolormesh and satisfy Cartopy) and points to a dependency issue, but offers no concrete implementation details or requirements. It lacks specifics on how #25027 relates, what changes are needed in pcolor, data shapes expected, or test coverage. Without further clarification or design guidance, it\u2019s too vague for a direct solution."
    },
    "matplotlib__matplotlib-25052": {
        "input_bounce": false,
        "trace": "The issue clearly states the documentation link, reproduces the error when passing a Bbox instance, shows that a list works via from_bounds, and even suggests how to improve. It\u2019s explicit about the mismatch between doc and behavior and what a successful solution would look like (accept a Bbox or clarify docs)."
    },
    "matplotlib__matplotlib-25122": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the faulty code location, describes the incorrect use of np.abs for windows with negative values, provides a reproducible example, compares to a known-good implementation in SciPy, and states the expected behavior. This gives all necessary details to implement and verify the fix."
    },
    "matplotlib__matplotlib-25126": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear description of actual vs. expected behavior (with before/after PDFs), relevant environment/version details, and notes on which versions exhibit the issue. It\u2019s straightforward to reproduce and understand what needs to be fixed."
    },
    "matplotlib__matplotlib-25281": {
        "input_bounce": false,
        "trace": "The issue clearly defines the reproduction steps, shows the actual vs expected behavior, points to the relevant code section, and describes exactly what validation is missing and where it should be triggered. A developer can directly implement the missing validation for non-string `loc` inputs in `Legend.__init__` to raise an error early."
    },
    "matplotlib__matplotlib-25287": {
        "input_bounce": false,
        "trace": "The report clearly describes the problem (offset text color uses tick.color rather than tick.labelcolor), provides minimal reproducible code, shows actual vs expected results, and even suggests a targeted patch. The scope, root cause, and desired behavior are fully laid out, so a PR can be implemented unambiguously."
    },
    "matplotlib__matplotlib-25311": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates a reproducible bug with minimal code, shows the actual vs expected outcome, and includes environment details (OS, Python, Matplotlib version). While the backend is not specified, the default QtAgg setup can be assumed, and the core problem (pickling failure due to GUI canvas references in draggable legends) is well defined. This is enough to make a meaningful attempt at a solution."
    },
    "matplotlib__matplotlib-25332": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact error, the expected behavior, and environment info (Matplotlib version, OS). It\u2019s clear what needs to be fixed (allow fig.align_labels() to keep the figure picklable)."
    },
    "matplotlib__matplotlib-25346": {
        "input_bounce": false,
        "trace": "The issue comes with a minimal reproducible example, clear description of the actual vs expected behavior, and all relevant environment details. It\u2019s unambiguous what needs fixing: constrained layout must reserve enough space for wrapped titles."
    },
    "matplotlib__matplotlib-25404": {
        "input_bounce": true,
        "trace": "The report identifies a runtime AttributeError in LassoSelector.set_props and suggests commenting out a library line to avoid it, but it lacks reproduction steps, version/context info, sample code, and clear desired behavior. It\u2019s unclear whether this is a misuse or a library bug and what the proper fix should be. There\u2019s insufficient detail to attempt a meaningful solution."
    },
    "matplotlib__matplotlib-25425": {
        "input_bounce": true,
        "trace": "The issue is essentially an open\u2010ended enhancement request with multiple possible implementations and no clear consensus on what the final API or behavior should be. There are two mutually exclusive proposals (alias vs. depth\u2010aware shape vs. __str__ change) but no decision, design details, or acceptance criteria. That makes it too vague to jump in with a concrete PR."
    },
    "matplotlib__matplotlib-25430": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproduction, the exact error, environment details, and a clear statement of the desired behavior (support metadata for JPEG or at least produce a clear error). It\u2019s straightforward to write a fix or better error message, so the issue is well-specified."
    },
    "matplotlib__matplotlib-25433": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear description of actual vs expected behavior, environment details, and a specific goal (ensure slider\u2019s on_changed redraw doesn\u2019t block widget input). This is sufficient for a meaningful solution attempt."
    },
    "matplotlib__matplotlib-25442": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, detailed stack trace, exact versions (matplotlib 3.7.1, mplcursors), environment (OS, backend, Python), expected vs. actual behavior, and installation details. This is sufficient to reproduce the bug and work on a fix."
    },
    "matplotlib__matplotlib-25479": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, shows the exact error trace, describes the root cause (mismatch between the Colormap object's name and the registry name), and states the expected versus actual behavior. It\u2019s clear what change is desired (e.g., syncing the Colormap.name to the registered name or looking up by registry key), so it\u2019s actionable for a PR."
    },
    "matplotlib__matplotlib-25498": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, shows the exact code, the error trace, and states the desired outcome (colorbar should reflect the new norm). It\u2019s clear what\u2019s been tried and what the expected behavior is, so it\u2019s well-specified."
    },
    "matplotlib__matplotlib-25547": {
        "input_bounce": true,
        "trace": "The description actually mixes two distinct bug reports (one for scatter() warnings with all-NaN colors, another for errorbar() StopIteration on all-NaN yerr) in a single issue, so it\u2019s unclear which behavior to address and how the fix should be scoped. The scope isn\u2019t well defined, making it ambiguous what a correct solution entails."
    },
    "matplotlib__matplotlib-25565": {
        "input_bounce": false,
        "trace": "The issue is very clearly described: there is reproducible code, a stack trace showing where the error occurs, the root cause is identified (legend handler\u2019s first_color assumes a numpy array but receives a tuple), and a simple proposed fix is provided. All necessary details are present for a developer to implement and test the solution."
    },
    "matplotlib__matplotlib-25624": {
        "input_bounce": false,
        "trace": "This issue clearly states the bug (tight_layout kwargs ignored when rc figure.autolayout=True), provides minimal reproducible code, current vs. expected behavior, and environment details. A developer can reproduce and implement a fix unambiguously."
    },
    "matplotlib__matplotlib-25631": {
        "input_bounce": false,
        "trace": "The issue includes self-contained reproducible code, the observed (actual) and desired (expected) behavior, and the Matplotlib version. While a backend or OS isn\u2019t specified, it\u2019s enough to reproduce and diagnose the bug in FFMpegWriter\u2019s handling of bbox_inches='tight'."
    },
    "matplotlib__matplotlib-25667": {
        "input_bounce": false,
        "trace": "The bug report clearly states the problem (bar/barh not triggering datetime unit conversion on bottom/left), provides minimal reproducible code, shows actual vs expected behavior, and even hints at the needed fix (detect units on bottom/left and set the axis converter). There\u2019s no ambiguity about what success looks like."
    },
    "matplotlib__matplotlib-25712": {
        "input_bounce": false,
        "trace": "The issue provides a clear bug summary, minimal reproducible example, actual vs expected behavior (with images), environment details, and even a hypothesis about the root cause. There\u2019s a straightforward interpretation of what needs to change to satisfy the expected behavior, making the request well-specified."
    },
    "matplotlib__matplotlib-25772": {
        "input_bounce": false,
        "trace": "The report includes a clear bug description, full stack trace, exact reproduction steps (code snippet in VS Code interactive cell), environment details (OS, Python, Matplotlib, IPython/IPykernel versions, install method) and outcome. While it doesn\u2019t name the VS Code version or the Python extension version, it gives enough concrete context to reproduce and diagnose the Qt\u2010binding import failure in an interactive cell. This makes it reasonably specified for a first attempt at a solution."
    },
    "matplotlib__matplotlib-25775": {
        "input_bounce": false,
        "trace": "The issue clearly defines the problem (Text objects lack per-instance antialias controls), outlines the desired API (get/set_antialiased), and points to where changes are needed (Text, Annotation, and backend drawing via GraphicsContext). While implementation details (exact method names, tests, backend internals) will need exploration, the requirements and scope are well enough specified for a developer familiar with the codebase to act on."
    },
    "matplotlib__matplotlib-25794": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the conflicting kwargs (linewidth vs. linewidths and edgecolor vs. edgecolors), describes the current behavior (plural forms documented but singular take precedence), and the desired change (raise when both are provided). The scope is narrow and the implementation steps (check for both keys in kwargs and raise) are unambiguous."
    },
    "matplotlib__matplotlib-25859": {
        "input_bounce": false,
        "trace": "The ticket clearly identifies that Figure.add_axes currently accepts more than one positional argument (e.g. \u201cFalse, 1\u201d) without any documented behavior. It proposes either documenting their effect (if any) or deprecating extra positional parameters. The goal\u2014restrict add_axes to only one positional argument and push all others to keywords\u2014is clear enough to start coding. Some details (exact deprecation timing/mechanism) can be filled in via standard project conventions, but the core requirement is well understood."
    },
    "matplotlib__matplotlib-25960": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates that the wspace/hspace parameters passed to Figure.subfigures are ignored, provides minimal reproducing code, shows actual vs expected behavior, and even references the code location to fix (merging wspace/hspace into the internal GridSpec). The requirements for a solution are unambiguous."
    },
    "matplotlib__matplotlib-26011": {
        "input_bounce": false,
        "trace": "The report clearly identifies the broken behavior (shared axes not emitting xlim_changed), points to the exact code in set_xlim, and even suggests a minimal change (moving the callback call outside the emit guard). There are no missing requirements or guesswork on what success looks like: emitting xlim_changed on all shared axes without recursion. This is precise enough for a PR."
    },
    "matplotlib__matplotlib-26020": {
        "input_bounce": false,
        "trace": "The report clearly describes the problem (TypeError when using GeoAxes in AxesGrid), provides minimal reproducible code, the exact traceback, and the environment. While the \u201cExpected outcome\u201d text is blank, it\u2019s implicit that AxesGrid should accept a custom axis_class (GeoAxes) without error and render as normal. The root cause is localized (_tick_only indexing ax.axis) and the fix direction is obvious. Thus the issue is well-specified."
    },
    "matplotlib__matplotlib-26024": {
        "input_bounce": false,
        "trace": "The issue clearly identifies that a set of Unicode math operator code points are missing from the `tex2uni` mapping in `_mathtext_data.py`, provides the exact list of hex codes, and points to authoritative references for the corresponding symbols and LaTeX names. While it doesn\u2019t enumerate every LaTeX macro for each codepoint, there is a direct path to look them up in the linked resources and add them. This is enough detail to begin a concrete implementation, though some interpretation (which specific commands to include and how to name them) is required."
    },
    "matplotlib__matplotlib-26078": {
        "input_bounce": false,
        "trace": "This issue includes a minimal reproducible example, clear description of the bug\u2019s cause (the `_get_lines` binding), actual vs. expected output, the precise location in the code to change, and a suggested fix. A developer can act on it immediately."
    },
    "matplotlib__matplotlib-26101": {
        "input_bounce": false,
        "trace": "The report includes minimal but sufficient reproducible code, actual vs. expected behavior, and Matplotlib version. The misalignment is clearly demonstrated, and a fix can be attempted without further clarification."
    },
    "matplotlib__matplotlib-26113": {
        "input_bounce": false,
        "trace": "The issue gives a clear description of the bug, minimal reproducible code, observed versus expected behavior, pointers to the relevant lines in the codebase, and even a concrete suggested change. A developer can jump straight to the comparison logic in `axes/_axes.py` and adjust the `mincnt` check for the `C != None` path. This is well-specified for a meaningful implementation."
    },
    "matplotlib__matplotlib-26122": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior, the desired behavior, and the conditions under which imshow should skip modifying the axes aspect. It points to the specific kwarg (`transform`) and its default (`ax.transData`), and spells out the change: when a non\u2010default transform is used and `aspect=None`, don\u2019t touch the axes aspect. While there\u2019s a bit of subtlety around detecting \u201canything containing transData\u201d (as noted in #13642), there is a clear, actionable change. Thus the spec is concrete enough to start coding, with only minor implementation details left to sort out."
    },
    "matplotlib__matplotlib-26160": {
        "input_bounce": false,
        "trace": "The feature request is clear in its intent (add public setters for .xy1, .xy2, and .slope properties on the AxLine artist, with mutual exclusivity between point\u2010pair vs. point\u2010and\u2010slope modes). Although it leaves out low\u2010level implementation details (error messages, exact internal field names), there\u2019s a sensible interpretation and enough direction to draft a solution against the existing codebase."
    },
    "matplotlib__matplotlib-26184": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear description of actual vs expected behavior, environment details, and even a known workaround. A developer can reproduce the bug, understand that AnnotationBbox\u2019s window extents are zero prior to draw, and implement the appropriate fix (e.g. computing or deferring extents or excluding it from constrained layout by default)."
    },
    "matplotlib__matplotlib-26208": {
        "input_bounce": false,
        "trace": "The issue includes a clear summary, minimal reproducible code, actual vs expected behavior, environment details (OS, Matplotlib/Python versions), and a description of what changed in recent versions. It\u2019s straightforward to set up and debug the reported problem, so it\u2019s well-specified."
    },
    "matplotlib__matplotlib-26232": {
        "input_bounce": false,
        "trace": "The issue provides a minimal reproducible example, full traceback, expected vs. actual behavior, Matplotlib version, environment details, and even pinpoints the relevant code section to patch. It\u2019s clear what needs to be done (avoid writing into a read-only mask in pcolormesh), so it\u2019s well-specified."
    },
    "matplotlib__matplotlib-26278": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (contour/contourf ignore artist kwargs like clip_path), gives examples, and proposes solutions (either add a ContourSet method or forward kwargs through to each collection). While the exact implementation details (which kwargs should be forwarded and how to integrate with existing code) are left to the developer, the goal is unambiguous: accept clip_path and other artist properties in contour/f and pass them to the underlying collections, matching the behavior of other plotting functions. This makes it REASONABLY_SPECIFIED."
    },
    "matplotlib__matplotlib-26285": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducer, the exact error, environment (main branch), and the user\u2019s intent (consistent kwarg support or a clearer error). It\u2019s clear what\u2019s broken and why, and there\u2019s a sensible fix (either alias which\u2192minor or improve the error message). Some details (exact expected signature change) are left to implementation judgment, but the scope is well bounded."
    },
    "matplotlib__matplotlib-26291": {
        "input_bounce": false,
        "trace": "The report includes minimal reproducible code, exact error and traceback, environment details (OS, Matplotlib version, backend, Python, Jupyter), and a clear statement of the expected behavior (inset in the top-right corner). There is enough context to diagnose the issue (inline backend needs an initial draw or use percentage-based sizing) and implement a fix. This is therefore WELL_SPECIFIED."
    },
    "matplotlib__matplotlib-26300": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproduction, clear actual vs expected behavior, version details, and even suspects the offending commit/logic. It\u2019s clear that tight_layout should suppress the warning on subsequent calls. This is well-specified and actionable."
    },
    "matplotlib__matplotlib-26311": {
        "input_bounce": false,
        "trace": "The report provides minimal context (regression from v3.7.1 to main), a complete reproducible example, the exact traceback, and a clear expected result (with a reference image). It even points to the single-line fix in an existing commit. This is sufficient to implement and verify a solution without ambiguity."
    },
    "matplotlib__matplotlib-26342": {
        "input_bounce": false,
        "trace": "The issue clearly describes an existing workaround, the desired new API (`ContourSet.set_paths(transformed_paths)`), and why it\u2019s needed. While the exact internal steps of replacing the paths list and any redraw bookkeeping must be filled in by examining Matplotlib\u2019s ContourSet implementation, the scope and goal are clear enough to implement a setter method. Thus it\u2019s reasonably specified."
    },
    "matplotlib__matplotlib-26466": {
        "input_bounce": false,
        "trace": "The report clearly describes the unexpected behavior, provides minimal reproducible code, shows actual vs expected results, and specifies environment details. A maintainer can immediately identify the reference-vs-copy issue and implement a fix, e.g. by copying the array internally. Hence it is well\u2010specified."
    },
    "matplotlib__matplotlib-26469": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired behavior (switch PdfPages.keep_empty default from True to False, stop generating invalid zero-page PDFs, and deprecate the keep_empty option). However, some implementation details\u2014such as the deprecation timeline, exact warning messages, and versioning\u2014are left \"TBD,\" so while the high-level change is clear, the finer points still need to be defined. Thus it\u2019s reasonably specified."
    },
    "mwaskom__seaborn-2457": {
        "input_bounce": false,
        "trace": "The report clearly identifies a bug (ci=None is ignored), and specifies the desired behavior (emit a warning and translate ci=None into errorbar=None). While it doesn\u2019t spell out every detail (warning text, test cases), the required change is unambiguous and can be implemented directly in the lineplot argument-handling code. It\u2019s actionable with minimal gaps."
    },
    "mwaskom__seaborn-2766": {
        "input_bounce": false,
        "trace": "The issue clearly describes the deprecation warning, shows the traceback, points to the upstream PR (#2466) that fixes it on master, and asks to cut a patch release including that change. The scope and required action (release a new version) are unambiguous."
    },
    "mwaskom__seaborn-2853": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired change (x_estimator error bars should inherit the scatter_kws \u2018alpha\u2019 setting rather than being always opaque) and points to the specific context (#2538). There\u2019s a concrete behavior to implement, so it\u2019s well-specified for a pull request."
    },
    "mwaskom__seaborn-3010": {
        "input_bounce": false,
        "trace": "The bug report clearly demonstrates the failure when feeding None/NaN values into PolyFit and implies that missing data should be dropped (or otherwise handled) prior to calling numpy.polyfit. While it doesn\u2019t spell out every detail (e.g. warning behavior or edge\u2010cases when too few points remain), it\u2019s straightforward to interpret the fix\u2014filter out missing x or y values before fitting. There\u2019s enough context to make a meaningful attempt at a solution."
    },
    "mwaskom__seaborn-3069": {
        "input_bounce": false,
        "trace": "The issue clearly lists the three behaviors that nominal scales should adopt from categorical axes: margin offsets, grid suppression, and y-axis inversion. While it doesn\u2019t hand you the exact code changes or fully resolve theme-override questions, it\u2019s a well-bounded enhancement request with a sensible path (e.g. touching the scale class and Plotter._finalize_figure). An experienced contributor can fill in the implementation details by exploring those components. Therefore it\u2019s REASONABLY_SPECIFIED."
    },
    "mwaskom__seaborn-3187": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example, clearly describes the wrong behavior, points at the exact code location, and even suggests the needed change (pulling the ScalarFormatter\u2019s offset into the legend). While it doesn\u2019t spell out the exact text of the corrected legend, there\u2019s enough information to implement and verify a fix."
    },
    "mwaskom__seaborn-3190": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the full traceback, and clearly identifies the failure point in the scale setup when a boolean array is passed to a continuous scale. While it doesn\u2019t spell out exactly how to map booleans (e.g. use a categorical palette), there is a sensible interpretation\u2014treat boolean inputs as categorical variables and dispatch to a categorical color scale\u2014so you can implement a fix without further clarifications."
    },
    "mwaskom__seaborn-3394": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, expected vs. actual behavior, environment details, and a clear statement of what\u2019s wrong (the x-axis gets reversed when using pd.NA) and what the fix should be (preserve the original order rather than sorting to descending). That is sufficient to start coding a solution (e.g., adjust default sorting behavior in seaborn.lineplot or FacetGrid to respect input order)."
    },
    "mwaskom__seaborn-3407": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the full traceback, and a clear description of the unexpected behavior (pairplot should work on MultiIndex columns but currently raises a KeyError). It\u2019s immediately obvious what needs fixing and how to verify the fix, so it\u2019s well-specified."
    },
    "pallets__flask-5014": {
        "input_bounce": false,
        "trace": "The requirement is clear: enforce that Blueprint names cannot be empty by validating the `name` argument (e.g. in the Blueprint constructor) and raising a `ValueError` if it is. An experienced engineer can locate the Blueprint class, add a simple check (`if not name: raise ValueError(...)`), and update tests accordingly, so the issue is well-specified."
    },
    "psf__requests-1142": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the behavior (requests.get always adds a Content-Length header even when there\u2019s no body), provides a concrete example (Amazon returning 503), and suggests the desired outcome (omit the header or allow disabling it). While it doesn\u2019t detail every edge case or implementation approach, it\u2019s sufficiently scoped to implement or propose a change to skip Content-Length on GETs (or add an opt-out), making it reasonably specified."
    },
    "psf__requests-1327": {
        "input_bounce": true,
        "trace": "The issue accurately describes a bug (adapter lookup order being arbitrary) and outlines several possible solution approaches, but it never commits to a single actionable fix. It asks \u201cWhat should we do?\u201d rather than specifying which solution to implement, what the API contract should be, or providing concrete acceptance criteria and tests. There\u2019s ambiguity around the required behavior, backward compatibility guarantees, and design choice. As a result, it\u2019s too open-ended for a straightforward PR implementation without further clarification."
    },
    "psf__requests-1339": {
        "input_bounce": false,
        "trace": "The issue gives a clear description of the bug (CaseInsensitiveDict storing mixed-case keys incorrectly), includes a minimal repro script, shows actual vs expected output, and even points to the exact method and a one-line fix. That is sufficient to implement and test a solution without further clarification."
    },
    "psf__requests-1376": {
        "input_bounce": true,
        "trace": "The issue just shows a failing test case without any background, reproduction steps, environment details, or clear statement of the intended behavior and root cause. While you can guess that byte-string field names are being repr-ed instead of decoded, there\u2019s no specification of how requests should treat bytes keys or under which versions this fails \u201csometimes.\u201d There\u2019s too much left ambiguous to start coding a fix with confidence."
    },
    "psf__requests-1537": {
        "input_bounce": false,
        "trace": "The reporter provides a minimal repro, the exact traceback, the versions where it does/doesn\u2019t fail, and points out that passing non-byte data (floats or datetimes) with files now errors out. While they don\u2019t spell out \u201cwe expect datetime objects to be stringified (e.g. via isoformat()) as before,\u201d it\u2019s clear what broke and how to restore the previous behavior. This is enough detail to triage and implement a fix."
    },
    "psf__requests-1657": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a bug in how session and request hooks are combined (overwriting instead of merging their lists). It\u2019s evident the fix should involve merging the two hook lists rather than letting one overwrite the other. While minor details (e.g. ordering of hooks) could be clarified, there is a straightforward, sensible interpretation and implementation path."
    },
    "psf__requests-1713": {
        "input_bounce": false,
        "trace": "The report clearly describes the regression, pinpoints the commit that changed behavior, provides a minimal repro script, the exact exception, and explains the root cause (MozillaCookieJar being misdetected as a dict). It\u2019s straightforward to define the fix (adjust the cookies parameter type check to recognize CookieJar instances before treating them as mappings)."
    },
    "psf__requests-1724": {
        "input_bounce": false,
        "trace": "The report includes clear reproduction steps, the exact error, the implicated code location (`req.method = method.upper()`), and the expected behavior (using a Unicode method name shouldn\u2019t leak Unicode into the header and cause a decode error). It\u2019s straightforward to implement a fix (e.g. coerce the method to a byte string), and there\u2019s no ambiguity about success criteria."
    },
    "psf__requests-1733": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates the failure when pickling a Response and states the desired goal: \u201callow Response class to be pickled.\u201d While it doesn\u2019t enumerate every attribute that should survive serialization, it\u2019s straightforward to implement __getstate__/__setstate__ (or __reduce__) on requests.models.Response to capture/restore the key fields. There\u2019s enough here to drive a PR."
    },
    "psf__requests-1766": {
        "input_bounce": false,
        "trace": "The issue clearly points out a spec mismatch (RFC2617 requires the qop-options value to be wrapped in quotes) and shows curl\u2019s behavior as a reference. While it doesn\u2019t include code snippets or exact file locations, there\u2019s a straightforward interpretation of what needs changing\u2014ensure the Digest Auth implementation emits the qop-options value surrounded by double quotes. Thus, it\u2019s not fully self-contained with code details, but there\u2019s a sensible path to a solution."
    },
    "psf__requests-1776": {
        "input_bounce": true,
        "trace": "The report identifies the symptom (request cookies being persisted), points to the exact line of code where it occurs, and references the related test (#1630). However, it does not include a minimal reproduction, expected vs. actual behavior, or clear instructions on how cookies should be handled instead. Without knowing the existing test case or desired behavior, it\u2019s ambiguous how to change that line without breaking other functionality."
    },
    "psf__requests-1888": {
        "input_bounce": false,
        "trace": "The report clearly describes the environment, steps to reproduce (including a minimal test), the full error trace, and the root cause (unicode URL/headers being sent to pyOpenSSL expecting bytes). There\u2019s enough detail to write a targeted patch in Requests\u2019 adapter/redirect logic to ensure the buffered data is bytes. No further clarification is needed."
    },
    "psf__requests-1921": {
        "input_bounce": false,
        "trace": "The report clearly states the unexpected behavior (setting session.headers['Accept-Encoding'] = None still sends 'Accept-Encoding: None'), the expected behavior (treat None as removal of the header), and a working workaround (del session.headers[...] ). It points to the relevant docs and gives enough context on where the fix needs to occur (header preparation machinery). While low-level implementation details aren\u2019t spelled out, there\u2019s a clear bug to address and a desired outcome, so it\u2019s reasonably specified."
    },
    "psf__requests-1944": {
        "input_bounce": false,
        "trace": "The issue clearly describes a bug (forced decoding of a redirect\u2019s body leading to a gzip error), shows the failing code path in `resolve_redirects`, and suggests the desired behavior (don\u2019t decode or even read the body on redirect). While it doesn\u2019t spell out the exact patch, there\u2019s a straightforward, sensible interpretation of what needs to change. Hence it\u2019s reasonably specified."
    },
    "psf__requests-1962": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired behavior (\u201cr.history should always be a list\u201d), points out where the inconsistent tuple is returned (with a link to the exact file and line), and implies the fix (convert or replace tuple returns with a list). While it doesn\u2019t include detailed tests, there is enough information to locate and implement the change. Thus it is reasonably specified."
    },
    "psf__requests-2148": {
        "input_bounce": false,
        "trace": "The report clearly identifies the symptom (raw socket.error bubbling out), shows a full traceback and states the desired behavior (wrap it in a requests.exceptions.ConnectionError). It\u2019s straightforward to locate the streaming/read code path in requests (and urllib3) and add a socket.error catch to wrap or re\u2010raise as ConnectionError. The exact file and catch locations would be determined by inspecting model/response and urllib3\u2019s HTTPResponse, but the goal is clear."
    },
    "psf__requests-2153": {
        "input_bounce": false,
        "trace": "The report clearly describes the discrepancy between requests.exceptions.Timeout and socket.timeout and includes a full stack trace showing where the uncaught socket.timeout bubbles out. It pinpoints the expectations (that requests should wrap socket.timeouts in its own Timeout exception) and where in the code the exception escapes. While there\u2019s no minimal reproducer (you\u2019d need SoCo, Wimp, and a Sonos setup), the high-level fix (catch socket.timeout in the adapter/response iteration and rethrow as Request\u2019s Timeout) is unambiguous. Thus there\u2019s a sensible, actionable interpretation of the required change."
    },
    "psf__requests-2193": {
        "input_bounce": true,
        "trace": "The issue simply shows that urllib3.exceptions.ProtocolError is bubbling up instead of being wrapped by Requests, but it doesn\u2019t describe the expected behavior in detail, when it regressed, or which wrapper exception should be used. There\u2019s no reproduction steps beyond a trivial snippet, no context about the change, and no test case. It\u2019s unclear what the precise fix should be or how to verify it, so it\u2019s too vague to act on."
    },
    "psf__requests-2317": {
        "input_bounce": false,
        "trace": "The report clearly pinpoints the faulty line (method = builtin_str(method) in sessions.py), describes the bad behavior (b\u2019GET\u2019 turning into \"b'GET'\" and causing a 404), and states the desired outcome (requests should accept and properly decode a bytes method). While it doesn\u2019t spell out the exact code change, there\u2019s a straightforward interpretation of what needs to be done. Hence it\u2019s reasonably specified for a fix."
    },
    "psf__requests-2617": {
        "input_bounce": false,
        "trace": "The report includes a minimal, reproducible example, specifies the exact environment (Python2 with unicode_literals), shows the full traceback and contrasts the behavior with/without unicode_literals and with unprepared vs. prepared requests. It\u2019s clear what\u2019s wrong (binary bodies are being treated as Unicode) and what a fix should accomplish. This is sufficient to implement and test a solution."
    },
    "psf__requests-2674": {
        "input_bounce": true,
        "trace": "The issue title and description surface a general concern that urllib3 exceptions (DecodeError, TimeoutError) are leaking through the requests API, but they don\u2019t specify the exact behavior they expect, nor provide repro steps or code locations. There\u2019s no clear requirement or acceptance criteria for what changes to make or how to handle these exceptions. Without more detail (e.g. reproduction, desired exception mapping, or design goals), it\u2019s impossible to draft a meaningful fix. Thus the request is too vague."
    },
    "psf__requests-2678": {
        "input_bounce": true,
        "trace": "The report is really just a question about design goals rather than a concrete bug or feature request. It lacks reproduction steps, context (versions, code snippets), or clear acceptance criteria. It\u2019s unclear what outcome would count as a successful fix, so the issue is too vague to act on."
    },
    "psf__requests-2821": {
        "input_bounce": false,
        "trace": "The report gives a clear symptom (TypeError in pyopenssl\u2019s sendall after bump to requests 2.8.0), full traceback pointing at memoryview(data), and exact package versions. While there\u2019s no minimal repro snippet provided, it\u2019s straightforward to reproduce by issuing a request under those versions or to inspect the patched urllib3/pyopenssl integration to see where a non\u2010bytes object is passed. There\u2019s a clear path to a fix (ensure data is bytes or adapt memoryview call), so although you\u2019ll need to infer details, it\u2019s specified well enough to attempt a fix."
    },
    "psf__requests-2873": {
        "input_bounce": false,
        "trace": "The issue gives a concrete reproduction (code that hangs), a clear expected result (get a 405 error), and even points out the one-line workaround (seeking back to zero). While it doesn\u2019t spell out exactly which patch to make, there\u2019s a straightforward, sensible fix\u2014automatically rewind seekable file-like bodies to 0 or compute a content-length\u2014so an engineer can write a test and implement the change. Hence it\u2019s reasonably specified."
    },
    "psf__requests-2931": {
        "input_bounce": false,
        "trace": "The report gives a clear reproduction case, identifies the version regression (2.8.1 \u2192 2.9), and even pinpoints the culprit (calls to_native_string). While it lacks a full stack trace or error message, there\u2019s enough information to reproduce and scope a fix (i.e. stop coercing binary data through to_native_string)."
    },
    "psf__requests-3362": {
        "input_bounce": true,
        "trace": "The report is essentially a conceptual question without concrete reproduction steps or a clear specification of the desired fix. The user hasn\u2019t provided code snippets or demonstrated the exact failure, nor clearly stated how they expect iter_content(decode_unicode=True) to behave. It\u2019s more of a question than a well-scoped issue, so it\u2019s too vague to start coding against."
    },
    "psf__requests-4106": {
        "input_bounce": false,
        "trace": "The issue clearly states the error, expected vs actual behavior, provides minimal reproduction steps, references the offending commit, and includes environment details. There\u2019s no ambiguity about what must be fixed, so it\u2019s well-specified."
    },
    "psf__requests-4356": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (missing slash in proxy URL leading to a confusing NoneType exception), gives reproduction steps, actual and expected results, and even suggests where it might be fixed. While it doesn\u2019t prescribe the exact exception text or implementation location (requests vs urllib3), it\u2019s unambiguous what needs to be done: validate proxy URLs and raise a clear error. This makes it reasonably specified for a concrete fix."
    },
    "psf__requests-5087": {
        "input_bounce": false,
        "trace": "The issue clearly describes expected vs. actual behavior, includes reproduction steps with code, a failing test case (and even a patch link), and environment details. It\u2019s straightforward to understand what must change (i.e. cache or rethrow the original error on subsequent `response.content` accesses)."
    },
    "psf__requests-5414": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (UnicodeError on `http://.example.com`), the desired behavior (raise `InvalidUrl`), includes repro steps, references existing related code/PRs, and specifies the exception message. There\u2019s enough detail to implement a catch for the IDNA error and rethrow an `InvalidUrl`."
    },
    "psf__requests-6028": {
        "input_bounce": true,
        "trace": "The report provides a high-level description of a proxy authentication failure under Python 3.8.12 but omits the actual proxy configuration (credentials, proxy URL), error details (tracebacks, headers), and a reproducible test case. Without knowing exactly how the `proxies` dict is set up or seeing the request/response exchange, one cannot reliably reproduce or diagnose the 407 error. As a result, the issue is too vague to attempt a meaningful fix."
    },
    "psf__requests-774": {
        "input_bounce": true,
        "trace": "The report identifies a specific error location and suggests wrapping the IDNA encoding call in a try/except, but it doesn\u2019t specify what the desired behavior or fallback should be when the exception occurs. There\u2019s no indication of how to handle the failure (e.g. skip the URL, strip invalid labels, rethrow a more informative error), so it\u2019s unclear what constitutes a successful solution."
    },
    "psf__requests-863": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior in Request.__init__ (wrapping list values and then failing because lists aren\u2019t callable), the desired behavior (accept a list of hook functions per hook key), and even suggests the workaround (.register_hook calls). It\u2019s straightforward to implement by detecting list values in the hooks dict and iterating to register each function. No major ambiguities remain about what needs to be done."
    },
    "pydata__xarray-2905": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, exact observed vs expected behavior, the version change that introduced the breakage with a link to the offending line, and environment details. It\u2019s clear what the fix should achieve, so this is WELL_SPECIFIED."
    },
    "pydata__xarray-2922": {
        "input_bounce": true,
        "trace": "The request \u201cadd average function\u201d is very high\u2010level and doesn\u2019t specify the target API/library (what ds is), the exact method signature, how to pass weights, which axes to average over, or intended behavior on dimensions. There\u2019s no concrete example, test case, or design details. Without that context, it\u2019s unclear what a correct implementation looks like. Therefore the issue is too vague to act on."
    },
    "pydata__xarray-3095": {
        "input_bounce": false,
        "trace": "The issue clearly describes a specific regression (deep copying Unicode indices now casts them to object dtype), includes minimal reproducible example code, shows actual vs. expected behavior, and identifies affected versions. It\u2019s straightforward to locate the copy logic for IndexVariable in xarray and restore the original dtype, so the issue is well-specified."
    },
    "pydata__xarray-3114": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, shows actual vs. expected behavior step by step, points to the relevant API, provides environment versions, and clearly states what the correct outcome should be. It is therefore well-specified."
    },
    "pydata__xarray-3151": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clearly states the observed vs expected behavior, quotes the relevant documentation, and provides environment details. There\u2019s no ambiguity about what needs fixing or how to reproduce the error."
    },
    "pydata__xarray-3159": {
        "input_bounce": false,
        "trace": "The request is clear: allow the DataArray constructor to accept a scalar \u201cdata\u201d argument (e.g. 0.1) together with coords and dims, and internally broadcast that scalar to an ndarray of the proper shape defined by the dims/coords. While edge\u2010case details (e.g. what to do when dims aren\u2019t given) would need to be decided in the implementation, the overall behavior is straightforward and unambiguous enough to code against. Hence it\u2019s reasonably specified."
    },
    "pydata__xarray-3302": {
        "input_bounce": false,
        "trace": "The request clearly states the desired behavior (only interpolate runs of NaNs whose total length is \u2264 limit, leaving larger runs untouched) and points to how current behavior falls short. While implementation details (argument name, backward-compatibility handling, internal API shape) aren\u2019t spelled out, the feature\u2019s intent and success criteria are unambiguous. You could sensibly design a new flag or adjust `limit` semantics to meet this, so it\u2019s reasonably specified."
    },
    "pydata__xarray-3305": {
        "input_bounce": false,
        "trace": "The issue clearly describes a specific bug (DataArray.quantile dropping attrs), provides a minimal reproducible code example, shows the actual and expected outputs, and includes environment details. A maintainer can directly see how quantile should preserve attrs, so the problem and solution are unambiguous."
    },
    "pydata__xarray-3520": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, the exact commands to reproduce the problem, the observed vs. expected behavior, and environment details. It is clear what change is needed (correct MultiIndex level selection in .sel), so it is well-specified."
    },
    "pydata__xarray-3631": {
        "input_bounce": false,
        "trace": "This issue includes a clear MCVE demonstrating the error, a full traceback, an explanation of why the failure occurs in `datetime_to_numeric`, and guidance on how to fix it (roll your own timedelta\u2192numeric conversion rather than relying on pandas/NumPy overflow behavior).  A contributor can directly see where in the code to implement the change and what the expected behavior is.  It is therefore well specified."
    },
    "pydata__xarray-3649": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired behavior (combining datasets with missing tiles and filling gaps with a fill_value, defaulting to NaN), provides reproducible code, the current error, and the expected output. It\u2019s straightforward to adjust combine_by_coords to loosen the hypercube completeness check and insert missing panels, so the request is well-specified."
    },
    "pydata__xarray-3677": {
        "input_bounce": false,
        "trace": "The issue comes with a minimal reproducible example, clear description of expected vs. actual behavior, and a traceback. It\u2019s unambiguous what change is needed (support passing a DataArray to ds.merge, just as the top\u2010level merge does)."
    },
    "pydata__xarray-3733": {
        "input_bounce": false,
        "trace": "The issue clearly describes the desired functionality (a DataArray.polyfit method), maps the behavior directly to numpy.polyfit (including handling ND via reshape and dask via map_blocks), and even provides example usage and expected result. While low-level details (exact output dim naming, kwargs surface, error handling) would need to be worked out, the overall spec and API contract are clear enough to start implementing a solution. Thus it\u2019s reasonably specified."
    },
    "pydata__xarray-3905": {
        "input_bounce": false,
        "trace": "The report clearly states that the array repr should be truncated once the printed output exceeds ~40 lines, shows current vs. desired behavior with examples, and suggests a sensible threshold. While it doesn\u2019t nail down every detail (e.g. exact split of head vs. tail or configurability), it\u2019s cleanly scoped and can be implemented in a straightforward way."
    },
    "pydata__xarray-3976": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact error message, the expected behavior, and environment details. It is clear what\u2019s wrong (in-place addition doesn\u2019t align coords before combining) and what the correct behavior should be (A += B should mirror A + B), so it\u2019s well-specified."
    },
    "pydata__xarray-3993": {
        "input_bounce": false,
        "trace": "The issue clearly identifies an inconsistency (DataArray.integrate uses \u201cdim\u201d while Dataset.integrate uses \u201ccoord\u201d), shows the desired unified API (use \u201ccoord\u201d everywhere), links relevant discussion, and even flags the deprecation question. There\u2019s enough context to implement and document the change, so it\u2019s WELL_SPECIFIED."
    },
    "pydata__xarray-4075": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the observed vs. expected behavior, a clear description of the underlying bug (boolean arrays in dot yield a single boolean), and even a suggested fix (cast weights to numeric). It\u2019s straightforward to implement and verify, so the issue is well-specified."
    },
    "pydata__xarray-4094": {
        "input_bounce": false,
        "trace": "The issue comes with a minimal reproducible example, a clear description of the expected behavior (a working roundtrip of stack/unstack on single-dim variables), and the actual error message. It\u2019s straightforward to reproduce and to know when it\u2019s fixed, so it\u2019s well-specified."
    },
    "pydata__xarray-4098": {
        "input_bounce": true,
        "trace": "The issue description is just a one-line statement with no context, examples, or details about current behavior vs desired behavior. It\u2019s unclear what \u2018groupby should work with name=None\u2019 means or which API it refers to, so it\u2019s too vague to implement."
    },
    "pydata__xarray-4248": {
        "input_bounce": false,
        "trace": "The request clearly states the desired feature (show units in the Dataset repr) and gives an illustrative before/after example. While it doesn\u2019t spell out every API detail (e.g. where units live in attrs), it\u2019s straightforward to infer that units would be pulled from a standard .attrs['units'] field on coordinates and data variables and then injected into the repr logic. The scope is clear and there\u2019s no major ambiguity about what a successful implementation should look like."
    },
    "pydata__xarray-4356": {
        "input_bounce": false,
        "trace": "The issue clearly describes the error case (using sum with min_count over multiple dimensions), provides a minimal reproducible example, points to the exact location in the codebase, and even suggests a specific code change. While it doesn\u2019t include formal tests, it\u2019s straightforward to infer the required behavior and write tests. Thus it\u2019s reasonably specified for an implementer to work on."
    },
    "pydata__xarray-4419": {
        "input_bounce": false,
        "trace": "The report includes minimal reproducible examples showing the issue, the exact unexpected and expected outputs, clear problem description, and environment details. It is immediately clear what behavior needs fixing (preserve original dim order on concat)."
    },
    "pydata__xarray-4442": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, the exact error, the expected vs actual behavior, and environment details. It\u2019s clear what needs to be fixed (to_dataframe/to_series should combine all dims into a proper MultiIndex), so it\u2019s well-specified."
    },
    "pydata__xarray-4510": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, clearly describes the unexpected behavior (loss of attributes and name), and states the expected behavior (attributes and name should be preserved with keep_attrs=True). This is sufficient detail to begin diagnosing and fixing the problem."
    },
    "pydata__xarray-4629": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear description of observed vs expected behavior, points to the specific code location, and even suggests the fix. It\u2019s immediately actionable."
    },
    "pydata__xarray-4684": {
        "input_bounce": false,
        "trace": "The issue includes a Minimal, Complete, and Verifiable Example (MCVE) with sample data and code that reproduces the precision loss, shows the exact versus expected output, and lists environment versions. It clearly states what\u2019s wrong (millisecond precision lost on round\u2010trip to NetCDF) and what behavior is expected. A contributor can write a PR to preserve full datetime64 precision during I/O based on this information without needing further clarification."
    },
    "pydata__xarray-4687": {
        "input_bounce": false,
        "trace": "The report clearly describes the unexpected behavior (attrs dropped, dtype changed), provides MCVE code, expected behavior, and even suggests API enhancements (e.g. keep_attrs flag). It\u2019s straightforward to implement the fix or enhancement in xarray.where, so the issue is WELL_SPECIFIED."
    },
    "pydata__xarray-4695": {
        "input_bounce": false,
        "trace": "The issue provides minimal reproducible code, the erroneous behavior, error message, and environment detail. It clearly describes the bug (a dimension name collision with a keyword argument in .loc) and demonstrates how to reproduce it, so you can directly implement and validate a fix. This makes it well specified."
    },
    "pydata__xarray-4759": {
        "input_bounce": false,
        "trace": "The report includes minimal, self\u2010contained code examples that reproduce the dtype change, a clear statement of expected versus actual behavior, and environment details. It\u2019s immediately clear what change is needed (preserve the coordinate dtype), so it\u2019s well\u2010specified."
    },
    "pydata__xarray-4767": {
        "input_bounce": false,
        "trace": "The report provides a minimal repro (two code snippets), the unexpected behavior, the error message, and even points to the utility function involved. It\u2019s clear what the desired behavior is (DataArray.transpose should accept an Ellipsis argument the same way Dataset.transpose does) and where to start looking. While it doesn\u2019t prescribe the exact code change, the bug is well scoped and reproducible."
    },
    "pydata__xarray-4802": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact error traceback, the piece of code where the bug occurs, and the intended behavior (lists of length 1 should be treated as scalars). It clearly identifies where in the code to make the change (in CFScaleOffsetCoder.decode) and how to handle Python lists analogously to 1-element numpy arrays. This is well-specified and actionable."
    },
    "pydata__xarray-4819": {
        "input_bounce": false,
        "trace": "The request clearly states the desired behavior\u2014a new `drop_isel` method that mirrors `drop_sel` but works on integer positions (like `isel`)\u2014and even provides an example use case. The high-level API is unambiguous and there\u2019s a straightforward implementation strategy (compute the complement of the specified indices and call `isel`). While some finer details (e.g. handling of slices or negative indices) aren\u2019t spelled out, the core requirement is clear enough for a meaningful PR."
    },
    "pydata__xarray-4879": {
        "input_bounce": false,
        "trace": "The issue includes a clear description of the unexpected behavior, a minimal reproducible example, expected vs actual results, and environment details. A developer can follow the steps to reproduce and verify the caching bug, so it\u2019s well-specified."
    },
    "pydata__xarray-4911": {
        "input_bounce": false,
        "trace": "The issue clearly states the unexpected eager evaluation when using sum with min_count on a lazy array, provides a minimal reproducible example, expected vs actual behavior, and environment details. A developer can directly see what needs fixing (making sum/min_count lazy or documenting the limitation)."
    },
    "pydata__xarray-4940": {
        "input_bounce": false,
        "trace": "The issue provides a clear, minimal, reproducible example (MCVE), shows the exact unexpected behavior (dataset.mean drops coordinates) contrasted with the expected behavior (DataArray.mean preserves them), and includes environment/version details. It\u2019s obvious what the fix should be\u2014make Dataset.mean preserve coordinate variables on the reduced dims\u2014so it\u2019s well-specified."
    },
    "pydata__xarray-4966": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior, the desired behavior, points to the exact code location in xarray to change, shows example inputs/outputs, and even suggests the precise conditional to add. It\u2019s fully specified and ready for a PR."
    },
    "pydata__xarray-4994": {
        "input_bounce": false,
        "trace": "The issue clearly states the missing feature (`.dt.date`), provides a minimal reproducible example demonstrating the problem, shows expected output, and even points to the exact location in the codebase where a single line could add the feature. All requirements for a successful fix are unambiguous."
    },
    "pydata__xarray-5033": {
        "input_bounce": false,
        "trace": "The request clearly states the desired feature\u2014allow passing a callable directly as the `engine` parameter to bypass the normal string\u2010based backend lookup\u2014so there\u2019s a clear, sensible interpretation of what to implement. Some API details (e.g. callable signature and integration with xarray\u2019s existing backend hooks) would need to be filled in, but the high\u2010level behavior is unambiguous."
    },
    "pydata__xarray-5126": {
        "input_bounce": false,
        "trace": "The request clearly defines the desired feature (an option to collapse the data part in the HTML repr) and points to the existing xarray.set_options mechanism as a model. While implementation details (exact option names, defaults, file locations) are not spelled out, these can be discovered by inspecting the codebase. This is a straightforward, self-contained feature request with a clear success condition, so it is reasonably specified."
    },
    "pydata__xarray-5131": {
        "input_bounce": false,
        "trace": "The issue clearly shows the unwanted trailing space in the `__repr__`/`__str__` of `DatasetGroupBy`, reproduces it with minimal code, and asks to remove that extra space. The change is small and unambiguous, so it\u2019s well-specified."
    },
    "pydata__xarray-5180": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the bug, minimal reproducible code, expected vs. actual behavior, relevant docs, environment details, and even a suggested code change (use calendar.lower() when checking against _STANDARD_CALENDARS). It\u2019s entirely clear what needs to be done to resolve the issue."
    },
    "pydata__xarray-5187": {
        "input_bounce": false,
        "trace": "The report provides a minimal reproducible example demonstrating the bug, shows actual vs. expected behavior under different chunk sizes, and includes environment versions. The desired outcome (no NaNs after bfill) is clear. This is sufficient to start implementing and testing a fix."
    },
    "pydata__xarray-5233": {
        "input_bounce": false,
        "trace": "The feature request clearly outlines three distinct utilities (calendar accessor, calendar conversion function, calendar-aware date_range), gives suggested APIs, describes behavior (e.g. dropping invalid dates), and even points to existing implementations for reference. While some implementation details (error handling, argument validation, integration points) remain to be filled in, there is a sensible design and clear success criteria. This makes it reasonably specified for a meaningful implementation."
    },
    "pydata__xarray-5362": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the inconsistent behavior, a minimal reproducible example, and the expected behavior (raising an error when a non-existent dimension is passed). It is straightforward to implement a check for missing dimensions in the weighted reducer and raise an error accordingly. All necessary details are provided."
    },
    "pydata__xarray-5365": {
        "input_bounce": false,
        "trace": "The request clearly states what\u2019s needed (an xarray.cross wrapper around numpy.cross, with DataArray.cross methods), provides example code/usage, and lays out the expected behavior. Some API details (e.g. default spatial-dim detection, 2-value support) are left open, but there is a straightforward interpretation to implement a first pass. "
    },
    "pydata__xarray-5455": {
        "input_bounce": false,
        "trace": "The issue clearly explains the current behavior (backends only registered if installed), the desired behavior (always register entrypoints, change plugin protocol methods), and gives concrete examples of how the error message should look. While some implementation details (e.g. exactly where to hook into the error path) would need to be determined, there\u2019s a clear, sensible interpretation and path forward. Hence it\u2019s reasonably specified."
    },
    "pydata__xarray-5580": {
        "input_bounce": false,
        "trace": "The issue clearly identifies where the change is needed (the default `display_max_rows` in `xr.set_options()`), why it\u2019s a problem (breaks back-compatibility, too small for common use cases), and suggests raising it to a much larger number (e.g. 100, 1 000, 10 000) or removing it. While the exact new default value isn\u2019t rigidly fixed, it\u2019s straightforward to choose a reasonable bump (say 1 000) or make it effectively unlimited. There\u2019s enough context to implement a meaningful PR."
    },
    "pydata__xarray-5731": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the failure, a minimal reproducible example, the full traceback, environment and version details, and a statement of expected behavior. It\u2019s straightforward to identify that a missing `import dask` or optional-dask guard in `map_blocks` is needed. This is well-specified."
    },
    "pydata__xarray-6386": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, precise error output, expected vs. actual behavior, suspected root cause (the merge of PR #5692), and guidance on the desired fix (either accept DataArray return or emit a clear error and document the change). This is enough detail to start implementing and verifying a solution."
    },
    "pydata__xarray-6394": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducer, clear error logs, and references to related PRs/issues (#5692, #6379, #6386) so a maintainer can track the intended behavior and fix it. It doesn\u2019t explicitly spell out the exact expected output values, but the context and examples make the goal clear. Hence it is reasonably specified."
    },
    "pydata__xarray-6400": {
        "input_bounce": false,
        "trace": "The issue clearly reproduces a performance problem in the HTML repr for large multi-indexed DataArrays and gives a minimal example to reproduce it. While it doesn\u2019t specify exact performance targets or a proposed fix, there is enough concrete information (the test case, the method to target, version info) to start profiling and implementing optimizations. Thus it\u2019s reasonably specified."
    },
    "pydata__xarray-6461": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates a reproducible failure case (calling xr.where with a scalar and keep_attrs=True) and includes the relevant code snippet and error traceback. Although it lacks a formal \u201cexpected outcome\u201d description or a complete verifiable example with attributes, the intended behavior (no IndexError, and preserving x\u2019s attributes) is straightforward to infer. Thus it\u2019s reasonably specified for implementation."
    },
    "pydata__xarray-6548": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (KeyError when passing an unnamed coord to xr.polyval), provides a minimal reproducible example, the expected versus actual behavior, and context for how it should work. A fix or documentation change can be scoped directly from this information."
    },
    "pydata__xarray-6598": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example with attached sample data, clear description of expected vs actual behavior, relevant logs, and environment details. It\u2019s clear what needs fixing, so it\u2019s well specified."
    },
    "pydata__xarray-6599": {
        "input_bounce": false,
        "trace": "The issue provides a clear description of the problem (polyval on timedelta64 coords), minimal reproducible code, expected vs actual outputs, and environment details. There\u2019s no ambiguity about what needs fixing or how to reproduce, making it well-specified."
    },
    "pydata__xarray-6601": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates the change in output dimension order for `polyval` between xarray versions, provides minimal repro code, and asks whether this is expected and if it should be noted in release notes. There\u2019s no ambiguity about what behavior is in question or what a \u201csuccessful\u201d answer entails (i.e., confirm/deny expected behavior and update the docs/changelog if needed)."
    },
    "pydata__xarray-6721": {
        "input_bounce": false,
        "trace": "The issue clearly describes the unexpected behavior (calling ds.chunks on a Zarr-backed dataset causes a full load), shows how to reproduce it, and notes the expected behavior (just inspect .encoding metadata). Although it doesn\u2019t include a minimal standalone example, it provides a real Zarr URL and stack trace, so a developer can reproduce and narrow in on the fix. Therefore it\u2019s reasonably specified for an implementable solution."
    },
    "pydata__xarray-6744": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates the discrepancy between the built-in .mean() call (which respects center=True) and the manual iterator (which currently ignores center). It provides minimal reproducible code, shows expected vs. actual results, and states the desired behavior: manual iteration should yield center-justified windows. The requirements for fixing it (i.e. adjusting the iterator to honor the center offset) are unambiguous."
    },
    "pydata__xarray-6804": {
        "input_bounce": true,
        "trace": "This is a high-level feature request/discussion starter rather than a clear, actionable spec. There are no defined requirements, scope, or acceptance criteria for \u201cusing PyTorch as a backend for xarray,\u201d so it\u2019s ambiguous what exactly needs to be implemented or tested."
    },
    "pydata__xarray-6823": {
        "input_bounce": false,
        "trace": "The issue comes with a clear description of the regression (f-string formatting now fails), a minimal reproducible example, the exact traceback, expected behavior, and environment details.  There\u2019s no ambiguity about what\u2019s broken or what a fix must accomplish (support f-string formatting of sparse DataArrays without error), so it\u2019s well-specified."
    },
    "pydata__xarray-6882": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, provides a minimal reproducible example (MWE), the stack trace, and the expected behavior (reading should succeed even for empty time dimensions). There\u2019s no ambiguity about what needs to change (skip or special-case zero-length time coordinates when decoding CF datetime)."
    },
    "pydata__xarray-6889": {
        "input_bounce": false,
        "trace": "The issue clearly describes what happens, includes a minimal reproducible example, the expected versus actual behavior, full traceback, and environment details. It\u2019s straightforward to reproduce and understand the bug and what needs fixing."
    },
    "pydata__xarray-6938": {
        "input_bounce": false,
        "trace": "The issue clearly describes the unexpected in-place modification of the original Dataset by swap_dims, provides a minimal, complete, and verifiable example showing actual versus expected behavior, and includes environment details. A maintainer can reproduce the problem and knows the desired behavior, making it well-specified."
    },
    "pydata__xarray-6971": {
        "input_bounce": true,
        "trace": "The issue is primarily a design discussion about whether to promote an experimental `.set_xindex()` method to the public API alongside `.set_index()`, but it lacks concrete spec details (method signature, behavior, tests, docs) and clear acceptance criteria. It\u2019s more of a \u201cshould we\u201d conversation than a well-defined task, leaving room for ambiguity around what exactly needs to be implemented or validated."
    },
    "pydata__xarray-6992": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (mismatch between coord_names and variables after index refactor), provides a minimal repro, traceback, and points to the offending code location. It doesn\u2019t prescribe exactly how to fix the logic in DataVariables, but it\u2019s straightforward to interpret what needs to change. Thus it\u2019s reasonably specified."
    },
    "pydata__xarray-6999": {
        "input_bounce": false,
        "trace": "The issue provides a clear problem statement, a minimal reproducible example, the observed versus expected behavior, and environment details. This is sufficient to attempt a concrete fix or discuss implementation, making it WELL_SPECIFIED."
    },
    "pydata__xarray-7003": {
        "input_bounce": true,
        "trace": "The issue clearly shows a TypeError when calling `ds.indexes.get_unique()` on a MultiIndex and points out that the equivalent `ds.xindexes.get_unique()` call works. However, it omits the dataset definition, the intended behavior of `indexes.get_unique()` (e.g. expected return values), and how it should align with `xindexes.get_unique()`. Without those details or an explicit example of the desired outcome, there\u2019s not enough specification to implement a correct fix unambiguously."
    },
    "pydata__xarray-7089": {
        "input_bounce": false,
        "trace": "The issue clearly defines what\u2019s wrong (deep copy doesn\u2019t include .attrs) and what is expected (deep copy should clone .attrs too). While it doesn\u2019t include test examples or exact code locations, an experienced xarray contributor can locate the Dataset.copy implementation and add a deep-copy of the attrs dict. Thus it\u2019s reasonably specified for someone familiar with the codebase."
    },
    "pydata__xarray-7101": {
        "input_bounce": false,
        "trace": "The issue comes with a clear description, minimal reproducible example, expected vs. actual behavior, traceback, even a proposed failing test and pointer to the relevant code location. It\u2019s straightforward to reproduce and understand exactly what needs to be fixed (dropping the old MultiIndex name from `_coord_names`)."
    },
    "pydata__xarray-7105": {
        "input_bounce": false,
        "trace": "The report clearly defines the incorrect behavior (regression in groupby .groups output for a multi-index level), provides MCVE, expected vs actual outputs, version info, and notes it used to work in a prior release. There\u2019s a direct, unambiguous description of the bug and the desired result, so you can directly implement and test a fix."
    },
    "pydata__xarray-7147": {
        "input_bounce": false,
        "trace": "The issue clearly describes what\u2019s wrong (time decoding errors don\u2019t name the offending variable), provides a minimal repro and stack trace, points to the relevant code throw site (ValueError in times.py), and specifies the desired behavior (include the variable name in the error message). This is concrete enough to implement directly."
    },
    "pydata__xarray-7150": {
        "input_bounce": false,
        "trace": "The report includes a minimal, self\u2010contained reproducer, clear code samples for saving and loading, the exact traceback, and a precise description of the mismatch between calling the multi\u2010index decode inside the backend vs. afterward. The expected behavior is unambiguous, and all necessary details (environment, versions, functions) are provided. This is sufficient to attempt a targeted fix in xarray\u2019s open_dataset/backend logic."
    },
    "pydata__xarray-7203": {
        "input_bounce": false,
        "trace": "The issue clearly describes the performance problem (repr loading data for each variable), provides a minimal reproducible example, points to the exact lines in formatting.py to change, and states the expected behavior (fast repr without data loads). This is sufficient to implement a concrete fix (e.g. use .shape instead of .size or otherwise avoid triggering data loads in repr)."
    },
    "pydata__xarray-7229": {
        "input_bounce": false,
        "trace": "The issue clearly describes a regression in xr.where with keep_attrs=True where coordinate attributes are replaced by variable attrs. It includes a minimal repro example, the observed vs. expected behavior, context on the PR that caused it, and environment details. There\u2019s a direct, testable failure and a clear expectation (coordinate attrs must be preserved), so it is well-specified."
    },
    "pydata__xarray-7233": {
        "input_bounce": false,
        "trace": "The issue clearly describes a surprising behavior in `ds.coarsen(...).construct(...)` \u2013 non-dimensional coordinate variables get demoted to data variables, despite being coordinates before. It includes a minimal reproducible example, the expected versus actual output, and pinpoints exactly what needs to change (i.e. preserve coordinate status through the coarsen.construct operation). This is sufficient to write a PR to fix the bug."
    },
    "pydata__xarray-7347": {
        "input_bounce": true,
        "trace": "The issue description refers to an external link for the minimal example and details but does not include any inlined code or concrete repro steps. It\u2019s unclear what the shape and contents of the data are, how exactly `assign_coords` is being called, or what coordinate indices should be preserved. Without a self-contained code snippet and expected vs. actual outputs, the request is too vague to implement a fix."
    },
    "pydata__xarray-7391": {
        "input_bounce": false,
        "trace": "The issue clearly describes a specific bug (Dataset arithmetic ops ignoring the keep_attrs option), provides a minimal reproducible example, contrasts the correct behavior for DataArray/Variable, and states the desired behavior and proposed fix. This is sufficient to begin implementing a solution without needing further clarification."
    },
    "pydata__xarray-7393": {
        "input_bounce": false,
        "trace": "The issue clearly describes the observed behavior vs. expected behavior, includes a minimal reproducible example, environment details, and explicitly states the desired outcome. It\u2019s fully specified and ready for implementation."
    },
    "pydata__xarray-7400": {
        "input_bounce": false,
        "trace": "The request clearly states the behavior change: when concatenating two datasets with disjoint variables, do not raise an exception but instead include any missing variable and fill it with NaN. Tests have already been added and documentation updated. This makes it fully clear what needs to be implemented and how success will be verified."
    },
    "pylint-dev__pylint-4330": {
        "input_bounce": false,
        "trace": "The request clearly describes the current behavior (spellchecker flags text inside ``backticks``), the desired behavior (ignore backticked text), gives an example, and even suggests an implementation approach (add a filter like the Sphinx directive filter). There\u2019s enough detail to write a PR without further clarification."
    },
    "pylint-dev__pylint-4339": {
        "input_bounce": false,
        "trace": "The request clearly states the goal (allow Pylint run under tox/CI to write all output to a single file, e.g. HTML), and even points to the previously removed `--file-output` option and similar features in flake8 for guidance. While some implementation details (exact flag names, file naming conventions, default formats) will need to be decided, the overall task\u2014reintroduce or add a file\u2010output option to Pylint\u2014is unambiguous and actionable."
    },
    "pylint-dev__pylint-4398": {
        "input_bounce": false,
        "trace": "The issue clearly states the problem (pylint\u2019s --fail-under swallows other non-zero statuses) and the desired feature (an option, e.g. --fail-on, to trigger failure on specific issue codes or categories). While some implementation details (exact CLI syntax, exit codes) aren\u2019t rigidly defined, the overall goal and behavior are unambiguous. A developer can reasonably interpret and implement the requested option."
    },
    "pylint-dev__pylint-4421": {
        "input_bounce": false,
        "trace": "The report gives clear repro steps (venv setup, pip install, command to run), the exact stack trace, the offending code location and even a probable cause (version comparison now being a string). You can directly write a patch around the get_offset comparison or normalize the version type. This is fully actionable."
    },
    "pylint-dev__pylint-4516": {
        "input_bounce": false,
        "trace": "The issue clearly outlines the steps to reproduce, the exact commands run, the observed versus expected behavior, and relevant version information. It specifies the precise problem (ignore and ignore-patterns flags not excluding directories) and the desired outcome, making it straightforward to implement and verify a fix."
    },
    "pylint-dev__pylint-4551": {
        "input_bounce": false,
        "trace": "The issue clearly describes current vs. expected behavior, provides a minimal code example, and specifies the desired enhancement (parsing PEP 484 type hints for UML attribute types). There\u2019s no ambiguity about what change is needed."
    },
    "pylint-dev__pylint-4604": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, current vs expected behavior, and environment details. It\u2019s clear that Pylint should treat names used in `# type:` comments as usages (so `import abc` isn\u2019t unused). There\u2019s no missing context, and the fix is well-defined."
    },
    "pylint-dev__pylint-4661": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal (move Pylint\u2019s data directory from ~/.pylint.d to the appropriate XDG base directories) and provides the spec to follow. While it doesn\u2019t enumerate every code location or constant name, it\u2019s a straightforward and well-understood pattern for someone familiar with XDG and the Pylint codebase, leaving only implementation details to the developer. "
    },
    "pylint-dev__pylint-4970": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (setting min-similarity-lines to 0 still runs duplicate-code checks, treating every line as a duplicate), the desired behavior (treat 0 as \u201cdisable this check\u201d), and even references existing conventions in other linters. There\u2019s a single, obvious code change: short-circuit or skip the duplicate-code plugin when the threshold is 0. That makes it well-specified."
    },
    "pylint-dev__pylint-5136": {
        "input_bounce": false,
        "trace": "The issue clearly describes the specific typing conflict between MessagesHandlerMixIn and PyLinter, points to the relevant code and branch, and proposes merging the mix-in into PyLinter (or alternatively retyping self). While the exact merge steps aren\u2019t spelled out, there\u2019s a well-defined goal and pointers to the code, so it\u2019s reasonably specified for someone familiar with the codebase."
    },
    "pylint-dev__pylint-5446": {
        "input_bounce": true,
        "trace": "This is a high-level feature request without clear acceptance criteria or design details. It states that R0801 can\u2019t be disabled in-file and notes a desire for same disable/enable semantics as other checks, but it doesn\u2019t specify exactly how the user should annotate regions, what the scope rules should be, or how it should interact with existing infrastructure. There\u2019s too much left undefined to start a meaningful implementation without further clarification."
    },
    "pylint-dev__pylint-5595": {
        "input_bounce": true,
        "trace": "The issue raises a general UX concern (negative scores demotivate beginners) but provides no concrete requirements or direction (e.g., how to adjust scoring, which tools to emulate, or acceptance criteria). It\u2019s unclear what change is expected or how success will be measured, so the request is too vague to act on without further specification."
    },
    "pylint-dev__pylint-5613": {
        "input_bounce": false,
        "trace": "The user clearly describes the current workflow (setting sys.argv, calling run_pyreverse, catching SystemExit) and the desired API (a pylint.pyreverse() function with named parameters). While the exact implementation details (e.g. how output constants like pylint.PNG are defined) aren\u2019t spelled out, there\u2019s a clear, sensible interpretation of what\u2019s needed: add a new entry-point wrapper to pyreverse. This makes the issue reasonably specified for an implementer to proceed."
    },
    "pylint-dev__pylint-5839": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (reusing deleted msgids/symbols), gives examples, and defines the expected behavior (\u201cimpossible to use an old message id or symbol\u201d). While it doesn\u2019t spell out the exact code locations or data structures to change, there\u2019s a straightforward, sensible interpretation for a Pylint contributor (track removed IDs and reject duplicates)."
    },
    "pylint-dev__pylint-6059": {
        "input_bounce": true,
        "trace": "The issue simply asks whether the BaseChecker.__gt__ method is needed, without specifying what behavior is expected, how __gt__ is used in the code, or criteria for retaining vs. removing it. There\u2019s no clear task or acceptance criteria (add tests or remove code, depending on usage), making it too ambiguous to implement a solution unambiguously."
    },
    "pylint-dev__pylint-6196": {
        "input_bounce": true,
        "trace": "The issue is largely a request for discussion and consensus on design questions (naming, best practices, allowable use cases) rather than a concrete implementation task. There\u2019s no single, well-defined action to take or acceptance criteria to meet until those decisions are made. As written it\u2019s not directly actionable into a PR, so it\u2019s too vague for a meaningful attempt at a solution."
    },
    "pylint-dev__pylint-6386": {
        "input_bounce": false,
        "trace": "The report clearly shows that the short flag (-v) is being defined to expect an argument (causing an error), whereas the long form (--verbose) works as a simple flag. It supplies the exact commands, observed output, expected behavior, and version details. There is enough context to find and fix the argparse/click definition of -v so it no longer requires an argument. Thus it\u2019s well-specified."
    },
    "pylint-dev__pylint-6412": {
        "input_bounce": false,
        "trace": "The request clearly states what changes are needed\u2014use ABCMeta-based interfaces for checkers/reporters and update PyLinter to recognize those via isinstance while preserving the existing __implements__ logic. While implementation details (exact class names, code locations) aren\u2019t provided, there is a straightforward interpretation and path to a solution."
    },
    "pylint-dev__pylint-6506": {
        "input_bounce": false,
        "trace": "The report includes clear reproduction steps (invoking pylint with an unrecognized -Q option), shows the full stack trace, and outlines the desired behavior (suppress the traceback and print a clean usage/error message akin to mypy\u2019s). This gives enough detail to implement catching the _UnrecognizedOptionError and formatting a user-friendly message, so it\u2019s well specified."
    },
    "pylint-dev__pylint-6517": {
        "input_bounce": false,
        "trace": "The issue clearly describes the unexpected behavior, provides minimal reproducible example, configuration, command, actual vs expected output, and version details. It\u2019s straightforward to reproduce and implement a fix."
    },
    "pylint-dev__pylint-6526": {
        "input_bounce": true,
        "trace": "This is more of a support/debugging question about pylint internals rather than a specific actionable issue for a code change or PR. It lacks clear requirements for a fix, making it too vague to implement a meaningful solution."
    },
    "pylint-dev__pylint-6528": {
        "input_bounce": false,
        "trace": "The issue clearly describes the buggy behavior, shows the exact commands used, the actual vs expected output, and references the relevant configuration options. A maintainer can reproduce the problem and knows precisely what needs to be fixed, so it\u2019s well specified."
    },
    "pylint-dev__pylint-6556": {
        "input_bounce": false,
        "trace": "The report clearly states the exact versions involved, steps to reproduce, current vs. expected behavior, and the concrete objective (allow disabling the \u201cbad-option-value\u201d warning so that mixed Pylint versions don\u2019t fail). That is sufficient to start writing and testing a fix in Pylint\u2019s disable-directive logic."
    },
    "pylint-dev__pylint-6820": {
        "input_bounce": false,
        "trace": "The report clearly reproduces the issue (using `--load-plugin` instead of `--load-plugins` silently fails), shows commands, current vs. expected behavior, and the exact Pylint version. While it doesn\u2019t prescribe the specific wording of the warning or implementation details in the parser, it\u2019s straightforward to add a check for the singular flag and emit a \u201cdid you mean --load-plugins?\u201d error. There\u2019s a clear bug to fix and no major ambiguities."
    },
    "pylint-dev__pylint-6903": {
        "input_bounce": false,
        "trace": "The report gives a concrete scenario (\u2013jobs=0 in Kubernetes leads to _query_cpu() returning 0), points to the exact lines of code, shows the failure, and even suggests a minimal fallback fix (or 1). It\u2019s clear what change is needed for a successful resolution."
    },
    "pylint-dev__pylint-7080": {
        "input_bounce": false,
        "trace": "The user clearly describes a reproducible bug: when invoking pylint with --recursive=y the ignore-paths setting in pyproject.toml is ignored, causing files under src/gen/ to still be linted. They provide the minimal config, the exact command, actual output, expected behavior, pylint version, and environment. There\u2019s no ambiguity about what needs to change\u2014recursive scanning should respect the ignore-paths regex\u2014so the issue is well scoped and actionable."
    },
    "pylint-dev__pylint-7114": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (Pylint crashes when a package directory and a module file share the same name without an __init__.py), provides concrete reproduction steps with minimal example files, shows current and expected behavior, and includes version information. This is enough to write a failing test and implement a fix."
    },
    "pylint-dev__pylint-7228": {
        "input_bounce": false,
        "trace": "The report clearly lays out the bug (Python\u2019s `re` engine chokes on `\\p{Han}` in the configured regex), shows reproducing steps, config, error trace, expected behavior, and environment. While it doesn\u2019t prescribe exactly how to implement support (e.g. swapping to the `regex` module or custom parsing), it\u2019s unambiguous what a successful fix must do: allow Unicode property escapes in Pylint\u2019s regex settings without throwing. Thus there\u2019s enough here to craft a PR."
    },
    "pylint-dev__pylint-7277": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the offending code line, provides a minimal reproducible example, specifies the expected behavior (only pop the first entry when it\u2019s '', '.', or cwd), and includes version info. That gives enough detail to implement and test the change."
    },
    "pylint-dev__pylint-7993": {
        "input_bounce": false,
        "trace": "The report clearly shows the broken behavior (unexpected output and parser warning), the exact command, software versions, expected output, and actual output. There\u2019s no ambiguity about what\u2019s wrong or what the fix should achieve, so it\u2019s well-specified."
    },
    "pylint-dev__pylint-8124": {
        "input_bounce": false,
        "trace": "The issue clearly describes a reproducible false positive in pylint (the \u2018useless-import-alias\u2019 warning), shows minimal example code, the exact error messages, the versions used, and the expected behavior (no warning for explicit re\u2010exports via \u201cimport X as X\u201d). It\u2019s immediately clear what change is needed in the checker logic, so the ticket is well specified."
    },
    "pylint-dev__pylint-8281": {
        "input_bounce": false,
        "trace": "The request clearly defines the problem (needing to list many source roots) and the desired change (allow glob patterns like `src/*`). That gives a straightforward implementation target\u2014parse given patterns, feed them through a glob-expander, and use the results as source roots. Some details (nested recursion, exclusion rules, cross\u2010platform behavior) are left unspecified, but there is a sensible interpretation of what constitutes success, so it\u2019s reasonably specified."
    },
    "pylint-dev__pylint-8312": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired feature (supporting glob patterns on the CLI input), points to the exact line in the codebase where the change should land, and gives an example of expected behavior (`packages/*/src`). While there are minor implementation details left open (e.g. how to handle non-matches or multiple patterns), there\u2019s a clear, sensible interpretation and enough context to craft a solution. Thus, it\u2019s reasonably specified."
    },
    "pylint-dev__pylint-8799": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (Pylint still takes several seconds even with all checks disabled) and the desired behavior (immediately return if there are no checks to run). While it doesn\u2019t pin down the exact code location, any Pylint contributor can sensibly interpret this as adding a short\u2010circuit in the main run logic when disable=all is in effect. That makes it reasonably specified for implementation."
    },
    "pylint-dev__pylint-8819": {
        "input_bounce": false,
        "trace": "The user clearly describes the discrepancy between CLI and rcfile behavior, gives concrete examples, and states the desired semantics (disable should always subtract checks from the enabled set, regardless of order). This is specific enough for an implementation: switch rcfile parsing to treat enable as a union and disable as a subtraction so that disable always wins. There\u2019s no ambiguity about what success looks like."
    },
    "pylint-dev__pylint-8898": {
        "input_bounce": false,
        "trace": "The issue clearly describes how to reproduce the problem (a valid regex including commas is split on commas), shows the exact failure, and states the expected behavior (support commas or an escape mechanism). There\u2019s a direct and unambiguous fix to the argument parsing, so the requirements are well\u2010specified."
    },
    "pylint-dev__pylint-8929": {
        "input_bounce": false,
        "trace": "The report gives precise reproduction steps, current vs. expected behavior, command-line switches, sample outputs, and version info. It\u2019s clear that the JSON formatter should include the overall score when --score=y is passed. There\u2019s no ambiguity about what to change, so it\u2019s well-specified."
    },
    "pytest-dev__pytest-10051": {
        "input_bounce": false,
        "trace": "The issue clearly describes a bug in caplog.clear() replacing the records list instead of clearing it, shows exactly where in the code it diverges from caplog.get_records(), provides a minimal reproduction, and specifies the expected behavior (that get_records and records remain in sync after clear). This is enough detail for a straightforward fix in the existing codebase."
    },
    "pytest-dev__pytest-10081": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the bug, a minimal reproducible example, environment (pytest, Python, OS) versions, exact observed vs expected behavior, and ties it to an existing issue. That is sufficient to reproduce and implement a fix."
    },
    "pytest-dev__pytest-10115": {
        "input_bounce": true,
        "trace": "The issue outlines a desire to remove the unmaintained atomicwrites dependency and suggests inlining its functionality into pytest, but it lacks clear requirements (which functions to copy, how to organize code, how to handle edge cases, tests, Windows specifics, API stability, etc.). It\u2019s more a discussion prompt than a concrete specification of work to be done."
    },
    "pytest-dev__pytest-10343": {
        "input_bounce": false,
        "trace": "The issue clearly describes the missing context in the deprecation warning and specifies that the warning should include either the plugin name or the Python file location. While it doesn\u2019t prescribe exactly which field to use or how internally to fetch it, there\u2019s no ambiguity about the goal: augment the pytest hookimpl warning with source location information for easier debugging. This is a sensible, actionable change."
    },
    "pytest-dev__pytest-10356": {
        "input_bounce": false,
        "trace": "The issue clearly describes current vs. expected behavior, provides a minimal repro case and example code, and specifies the intended marker\u2010merging semantics. It leaves out only the exact touchpoints in pytest\u2019s internal API (which a contributor would discover in code), but the goal and repro are unambiguous. This makes it reasonably specified for someone familiar with pytest internals to implement."
    },
    "pytest-dev__pytest-10442": {
        "input_bounce": true,
        "trace": "The issue states a high\u2010level goal (\u201ckeep temp dirs only for failing tests\u201d and \u201cleave root\u2010level retention unchanged\u201d) but omits the precise behavior to implement, details on which fixtures or methods to change, and how to handle edge cases. It even refers to an external comment for the \u201cfull proposal\u201d rather than embedding the specifics here, making it ambiguous what exactly the code change should be. You can infer intent, but it\u2019s not specified enough to start coding unambiguously."
    },
    "pytest-dev__pytest-10552": {
        "input_bounce": false,
        "trace": "The user has provided a minimal reproducible example, current pytest behavior, and a clear statement of desired behavior (at least warn or error on uncollected classmethod tests). There\u2019s enough context to locate where collection happens in pytest and to add a warning for unsupported classmethod-decorated tests, even though the exact code changes aren\u2019t spelled out. Hence it\u2019s reasonably specified."
    },
    "pytest-dev__pytest-10758": {
        "input_bounce": true,
        "trace": "The issue description points out a discrepancy but lacks critical details such as Python, pytest, and numpy versions, OS and reproduction steps (error messages, minimal project setup). Without that context it\u2019s unclear what\u2019s actually happening under pytest vs. REPL, so the ticket is too vague."
    },
    "pytest-dev__pytest-10893": {
        "input_bounce": false,
        "trace": "The issue clearly describes two concrete errors (`rmtree` deprecation of the onerror parameter in Python 3.12 and the missing addDuration API on TestCaseFunction), points to the exact code paths and upstream PRs, and states the failure mode (warnings-as-errors). While you must decide how to maintain backward compatibility and exactly where to hook in the new parameters/methods, there\u2019s a straightforward, sensible interpretation of the required changes. This is enough to begin implementing a fix."
    },
    "pytest-dev__pytest-10988": {
        "input_bounce": false,
        "trace": "The bug is clearly described (pytest crashes when Path.exists() is called on an overly long string), the relevant code location is given (_set_initial_conftests in _pytest/config/__init__.py), and the desired behavior (catch OSError around exists() and treat it as non-existent) is obvious. A concrete fix can be implemented without further clarification."
    },
    "pytest-dev__pytest-11041": {
        "input_bounce": false,
        "trace": "This issue clearly identifies a regression in pytest 7.3.x when using the walrus operator in an assert statement, provides a minimal reproducible example, specifies the Python and pytest versions involved, and even points to a suspect pull request. It\u2019s straightforward to reproduce and know when it\u2019s fixed (test passes without UnboundLocalError), so it\u2019s well-specified."
    },
    "pytest-dev__pytest-11044": {
        "input_bounce": false,
        "trace": "The request clearly defines where (`testpaths` handling in pytest\u2019s config loader) to add behavior (emit a warning if the user has defined `testpaths` in their config and none of the globs match any files or directories). The user even points at the relevant code location and specifies the condition under which to warn (\u201cif `testpaths` is defined but does not match anything\u201d). That is enough detail for a developer to implement a warning (or error) message, so the issue is well-specified."
    },
    "pytest-dev__pytest-11047": {
        "input_bounce": false,
        "trace": "The request is clear: extend pytest\u2019s logging plugin to honor the strftime \u2018%f\u2019 (microsecond) specifier in its date-format options. The problem is well explained with examples of current vs. desired output, a workaround, and exactly which command-line flags need changing. A developer familiar with pytest\u2019s logging code can implement this without further clarification."
    },
    "pytest-dev__pytest-11125": {
        "input_bounce": false,
        "trace": "The report includes a precise repro (configuration, pytest invocation, full stack trace), describes what changed (Pytest 7.3.2 behavior), and asks a clear question about whether this is user error or a bug\u2014and what the proper configuration should be. That is enough detail to implement or propose a fix."
    },
    "pytest-dev__pytest-11143": {
        "input_bounce": false,
        "trace": "The report clearly states what\u2019s wrong (pytest\u2019s assertion rewriting treats a leading numeric literal as a docstring), shows the exact error and stack trace, and points to the spot in code to fix (only treat string literals as docstrings). That is enough detail to implement and verify a fix."
    },
    "pytest-dev__pytest-11160": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a specific function (`WarningsRecorder.pop`), pinpoints the faulty line (use of `issubclass`), provides a minimal reproducing example and expected behavior, and even suggests the precise code change. This is more than enough detail to implement and validate a fix."
    },
    "pytest-dev__pytest-5205": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (invalid placement of <properties> in JUnit XML), gives reproduction steps, points to pytest\u2019s junitxml.py, and indicates the intended correction (move or remove those tags under <testcase>). While the exact implementation details (e.g. aggregating properties, handling multiple testcases) will require judgment calls, there\u2019s enough context to make a sensible fix."
    },
    "pytest-dev__pytest-5262": {
        "input_bounce": false,
        "trace": "The report gives a clear description of the bug (mode includes a \u2018b\u2019 that misleads upstream code into writing bytes), supplies a minimal reproducible example, shows the traceback, versions, and desired behavior (mode should not include \u2018b\u2019). It\u2019s obvious what needs to change in EncodedFile.mode for a successful fix."
    },
    "pytest-dev__pytest-5281": {
        "input_bounce": false,
        "trace": "The issue gives a clear environment (Jython 2.7.1 + pytest 4.5.0), full traceback, the exact offending literal (`u\"\\uD83D\"` in `_get_line_with_reprcrash_message`), and even a proposed workaround (dropping the `u` prefix) that makes Jython happy. You could write a PR to replace the unicode literal with a plain string literal (or handle the surrogate in a cross\u2010platform way). While you may want to verify broader unicode handling (e.g. non\u2010BMP characters) across CPython/PyPy/Jython, there\u2019s enough concrete detail here to attempt a fix."
    },
    "pytest-dev__pytest-5356": {
        "input_bounce": true,
        "trace": "The report indicates tests are being skipped with pytest 4.6.0 and links to the CI log, but it doesn\u2019t include which tests are skipped, example output, or a self-contained reproduction. There\u2019s no clear description of actual vs expected behavior, markers, or test code, making it ambiguous what needs fixing. In its current form it\u2019s too vague for a stand-alone fix."
    },
    "pytest-dev__pytest-5404": {
        "input_bounce": false,
        "trace": "The issue provides a clear description of the failure (KeyError on __wrapped__), full environment details (Python versions, pytest, OS), a minimal reproducer via a GitHub repo, exact reproduction steps and traceback. That is sufficient to begin diagnosing and fixing the bug."
    },
    "pytest-dev__pytest-5413": {
        "input_bounce": false,
        "trace": "The ticket includes a minimal repro, environment details, and a clear statement of actual vs. desired behavior (str(e) vs. str(e.value)). It\u2019s clear what change is being requested in pytest\u2019s API, so it\u2019s well-specified."
    },
    "pytest-dev__pytest-5479": {
        "input_bounce": false,
        "trace": "The report clearly shows a reproducible failure (UnicodeEncodeError) when using pytest.raises(match=u\"\u2026\") under Python 2. It identifies the symptom and desired use (matching a Unicode string), but lacks version/environment details and explicit expected outcome. Still, there\u2019s a clear bug to fix in how pytest handles Unicode matches, so it\u2019s reasonably specified."
    },
    "pytest-dev__pytest-5495": {
        "input_bounce": true,
        "trace": "The report describes a confusing behavior (pytest\u2019s byte-string diff shows numeric ordinals), but it doesn\u2019t state what the desired output or fix should be. There\u2019s no clear specification of expected behavior or how to change the assertion rewriting. This leaves too much ambiguity about what a successful solution would look like."
    },
    "pytest-dev__pytest-5550": {
        "input_bounce": false,
        "trace": "The report clearly states that when using `junit_family=xunit2` pytest still emits the legacy single-<testsuite> XML without the wrapping `<testsuites>` root element. It provides sample output and describes exactly what\u2019s wrong. An engineer familiar with pytest\u2019s junitxml plugin can infer that the xunit2 reporter must be changed to wrap its output in `<testsuites>\u2026</testsuites>`. Although the exact attribute values on the new root aren\u2019t spelled out, it\u2019s a small, well-known adjustment mirroring the existing legacy behavior. Thus, it\u2019s reasonably specified for a PR."
    },
    "pytest-dev__pytest-5555": {
        "input_bounce": false,
        "trace": "The issue clearly reproduces the bug (stepwise not skipping after an xpass under xfail_strict) and implies the desired behavior (treat strict xpass as a failure to trigger stepwise skipping). While it doesn\u2019t spell out the exact code changes, there\u2019s a straightforward, sensible interpretation of what needs to be fixed."
    },
    "pytest-dev__pytest-5559": {
        "input_bounce": true,
        "trace": "The description shows a failing example and a high-level complaint but doesn\u2019t define the desired behavior or success criteria, nor specify where or how to change the code. It\u2019s unclear what a correct solution would look like, so the issue is too vague to act on."
    },
    "pytest-dev__pytest-5631": {
        "input_bounce": false,
        "trace": "The issue clearly describes the failure scenario, reproduction steps, the specific pytest versions involved, the error traceback, and even pinpoints the offending commit and root cause. It\u2019s obvious what needs to be changed (handle array-valued `new` in the sentinel check), so it\u2019s well-specified for a solution."
    },
    "pytest-dev__pytest-5692": {
        "input_bounce": false,
        "trace": "The issue clearly states which attributes (`hostname` and `timestamp`) are missing from the generated JUnit XML, provides examples of both the current and desired output, and asks for an option to include them. There\u2019s no ambiguity about what needs to be done, so it\u2019s well-specified."
    },
    "pytest-dev__pytest-5787": {
        "input_bounce": false,
        "trace": "The report includes minimal example tests, shows exact expected vs. actual output, and specifies the environment. It clearly states the feature gap (xdist\u2019s serialization drops chained exceptions) so a developer can reproduce and implement inclusion of __cause__/__context__ in xdist\u2019s failure serialization. This is enough to drive a concrete fix."
    },
    "pytest-dev__pytest-5809": {
        "input_bounce": false,
        "trace": "The issue clearly states the failing behavior (400 Bad Request), reproduces it with a data file, points to the exact code that sets `lexer='python3'`, and even suggests switching to `lexer='text'` as the correct fix. There\u2019s no ambiguity about what change is needed for a successful solution."
    },
    "pytest-dev__pytest-5840": {
        "input_bounce": false,
        "trace": "The issue clearly describes the environment (Windows), the steps to reproduce (upgrade from pytest 5.1.1 to 5.1.2 and run pytest), the specific error message, and the root cause (path is being lowercased, breaking imports). It\u2019s straightforward to write or adjust a test and then fix the code path normalization. All required details for a meaningful solution are present."
    },
    "pytest-dev__pytest-5980": {
        "input_bounce": true,
        "trace": "The issue is primarily a discussion placeholder rather than a concrete specification. It raises questions about log format (e.g., JSON lines), replay capability, and why existing formats like TAP are inappropriate, but doesn\u2019t define acceptance criteria, API, file structure, or expected behavior in detail. There\u2019s no clear, actionable specification for a pull request\u2014only high-level goals\u2014so it\u2019s too vague to start coding."
    },
    "pytest-dev__pytest-6116": {
        "input_bounce": false,
        "trace": "The request is clear in its intent (add a single-character alias for the --collect-only flag) and straightforward to implement, but it doesn\u2019t specify which character to use or handle any potential conflicts. There\u2019s enough here to make a reasonable implementation proposal, so it\u2019s not impossible or totally vague, but it does leave some details open."
    },
    "pytest-dev__pytest-6186": {
        "input_bounce": true,
        "trace": "The issue statement is extremely minimal\u2014there is no context about where or how the warning should be emitted, what code paths are involved, what the expected message is, or under what conditions exactly it should trigger. Without at least pointers to the relevant code or usage scenarios, it\u2019s unclear what constitutes a successful implementation."
    },
    "pytest-dev__pytest-6197": {
        "input_bounce": false,
        "trace": "The report clearly describes a regression in pytest 5.2.3 where __init__.py files are unexpectedly collected, includes a minimal repro (tox setup and commands), shows expected vs. actual behavior with logs, and pinpoints the problem. A developer can reproduce and fix it without further clarification."
    },
    "pytest-dev__pytest-6202": {
        "input_bounce": false,
        "trace": "The reporter has pinpointed the exact offending line of code (`return s.replace('.[', '[')`) with links to the source, described the undesirable transformation, and proposed the change to simply return `s`. They\u2019ve also noted the expected steps (update the code, run `tox -e linting,py37`, and ensure tests pass). This gives a clear, actionable fix."
    },
    "pytest-dev__pytest-6323": {
        "input_bounce": true,
        "trace": "The issue states a general requirement (reject absolute and non-normalized paths for mktemp), but gives no concrete context (which mktemp implementation, where in the code, how to report errors, what normalization rules apply, etc.). It lacks sufficient detail or examples for a clear implementation plan without further clarification."
    },
    "pytest-dev__pytest-6680": {
        "input_bounce": false,
        "trace": "The issue clearly lists four concrete action items (add a warning example, link the warning to the docs, provide a before/after code snippet, and remove config/session support in from_parent). While it doesn\u2019t specify exact file paths, a developer familiar with the codebase can locate the deprecation docs and warning code to implement these changes. Thus it\u2019s reasonably specified for a meaningful solution."
    },
    "pytest-dev__pytest-6926": {
        "input_bounce": true,
        "trace": "The issue consists only of a brief title \u201cSysCaptureBinary: decode in writeorg\u201d and a reference to another issue URL, with no description of the problem, reproduction steps, expected behavior, or code context. There\u2019s insufficient information to understand what needs to be done or how success would be measured."
    },
    "pytest-dev__pytest-7046": {
        "input_bounce": false,
        "trace": "The report gives a minimal repro, exact commands, pytest version, observed vs desired behavior (only match on test names, not on parent folder names), and asks a clear change in matching scope.  That\u2019s sufficient to implement and test a fix."
    },
    "pytest-dev__pytest-7122": {
        "input_bounce": false,
        "trace": "The issue clearly describes the environment, reproduction steps, test code, and both observed and expected behaviors. It specifies exactly what keyword selection with numeric test names is producing wrong output when using `-k \"1 or 2\"`, making it straightforward to implement or debug a fix. Therefore it is well-specified."
    },
    "pytest-dev__pytest-7151": {
        "input_bounce": false,
        "trace": "The issue clearly describes the regression (cleanup functions not called on failure), provides minimal reproducible example code, pytest versions showing both broken and working behavior, environment details, and explicitly states the expected vs. actual behavior. This is sufficient to attempt a fix."
    },
    "pytest-dev__pytest-7158": {
        "input_bounce": false,
        "trace": "The report shows exactly what\u2019s wrong (the leading \u201c../\u201d is stripped in skip summary), how to reproduce it, and what the expected output should be. There\u2019s no missing information for a developer to implement the change in pytest\u2019s reporting logic."
    },
    "pytest-dev__pytest-7186": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducer, explicit steps, stack trace, and environment details. The failure mode (UnicodeDecodeError reading setup.py under C locale) is clear, and the intended behavior (no decode error, handle UTF-8) is obvious. Enough information is provided to craft a fix."
    },
    "pytest-dev__pytest-7205": {
        "input_bounce": false,
        "trace": "The report pinpoints the exact location in setuponly.py where a bytes value is implicitly converted via str(), triggers a BytesWarning, and even suggests using saferepr. The symptom, code context, and desired change (use saferepr or repr) are all clearly stated, so you can write a focused patch. This is well-specified."
    },
    "pytest-dev__pytest-7231": {
        "input_bounce": true,
        "trace": "The issue description is too vague to act on: it doesn\u2019t specify the testing framework or context, what \u201cwarn when logging fails\u201d precisely means, or where the warning should be emitted. There\u2019s no clear definition of the desired behavior or where to implement it, so it\u2019s ambiguous what a successful solution would entail."
    },
    "pytest-dev__pytest-7236": {
        "input_bounce": false,
        "trace": "The report provides a minimal, self\u2010contained example, exact steps to reproduce, version information, observed vs. expected behavior, and notes a regression between versions. A maintainer has all they need to diagnose and fix the bug."
    },
    "pytest-dev__pytest-7283": {
        "input_bounce": false,
        "trace": "The report provides a minimal, self\u2010contained example, exact steps to reproduce, version information, observed vs. expected behavior, and notes a regression between versions. A maintainer has all they need to diagnose and fix the bug."
    },
    "pytest-dev__pytest-7314": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the bug (UnboundLocalError in pytest_report_teststatus), points to the exact pull request on master that fixes it, and specifies that the backport is trivial\u2014just initialize a fallback `letter` variable before the if/elif cascade. All necessary context, file location, and desired behavior are given. A developer can go ahead and implement and backport this small change without further clarification."
    },
    "pytest-dev__pytest-7324": {
        "input_bounce": true,
        "trace": "The report simply shows an assertion failure in a debug build when calling `Expression.compile(\"False\")`, but provides no context on what `Expression` is or how pytest ties in, and no clear specification of the desired behavior or fix. There isn\u2019t enough information to develop a targeted solution."
    },
    "pytest-dev__pytest-7352": {
        "input_bounce": false,
        "trace": "The report clearly shows where the error occurs (in pytest\u2019s tmpdir numbered-dir cleanup, specifically in pathlib.py) and suggests a concrete mitigation (use a random suffix rather than sequential numbering, or at least guard against missing .lock files). While tests/acceptance criteria aren\u2019t spelled out, there\u2019s enough context (stack trace, prior issue, code location) to author a reasonable fix and test. This makes it REASONABLY_SPECIFIED rather than fully \u201cwell-specified.\u201d"
    },
    "pytest-dev__pytest-7432": {
        "input_bounce": false,
        "trace": "The issue clearly describes the regression (expected vs actual output), gives minimal repro code, pytest versions, command lines to reproduce, and even points to the likely buggy function in the codebase. All necessary context is provided for a developer to start working on a fix."
    },
    "pytest-dev__pytest-7466": {
        "input_bounce": false,
        "trace": "The issue clearly defines the desired behavior: disable coloring when NO_COLOR is set, force coloring when FORCE_COLOR is set, and otherwise default to TTY detection. The standard reference and the extension are specified, so a developer can implement the appropriate environment-variable checks around the existing color logic."
    },
    "pytest-dev__pytest-7468": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (pytest --log-file should create missing directories instead of crashing), gives a repro, and even suggests the exact code change (os.makedirs on dirname). It\u2019s evident what behavior is desired and how to implement it. Therefore it is well-specified for a PR."
    },
    "pytest-dev__pytest-7481": {
        "input_bounce": true,
        "trace": "The report describes an intermittent UnicodeEncodeError when running a pytest\u2010bdd scenario on Windows, but it doesn\u2019t clearly define what area needs to change (pytest\u2019s TerminalWriter, environment settings, the test harness, etc.) or what the expected remedy is. There\u2019s no clear requirement or scope for the fix, and important details (flakiness conditions, where to apply the encoding change, whether this is a pytest bug or a test framework issue) are missing, so it\u2019s too ambiguous to implement a concrete solution."
    },
    "pytest-dev__pytest-7490": {
        "input_bounce": false,
        "trace": "This is a clear, minimal reproducible example of a regression between pytest 5.x and 6.x: dynamically adding an xfail marker via request.node.add_marker no longer suppresses a failure. The issue includes versions, code sample, expected vs. actual output. A developer can reproduce, trace the change, and implement a fix. Hence it is well\u2010specified."
    },
    "pytest-dev__pytest-7499": {
        "input_bounce": false,
        "trace": "The reporter clearly describes the desired behavior change (emit a warning when using pytest.raises(match=\u2026) with unescaped parentheses in the literal string), provides the minimal example, current vs. desired output, and their environment. While they don\u2019t prescribe every implementation detail (e.g. exact warning text or detection heuristics), the goal and scope are clear enough for a contributor to implement and validate the fix. Thus the issue is reasonably specified."
    },
    "pytest-dev__pytest-7500": {
        "input_bounce": false,
        "trace": "The report gives detailed repro steps, shows the exact failing code paths, the relevant function implementation, and even a minimal test case. It clearly describes the Windows timing race and a proposed change (swapping the two for-loops). Everything needed to decide and implement the fix is present\u2014this is well-specified."
    },
    "pytest-dev__pytest-7521": {
        "input_bounce": false,
        "trace": "The report clearly describes a regression in pytest 6.0.0rc1 where capfd.readouterr() no longer preserves \u2018\\r\u2019 (carriage returns), includes a minimal reproducer, expected vs. actual behavior, environment details, and a comparison to pytest 5.4.3. It\u2019s evident what change is required (stop converting \u2018\\r\u2019 to \u2018\\n\u2019), so this is WELL_SPECIFIED."
    },
    "pytest-dev__pytest-7571": {
        "input_bounce": false,
        "trace": "The issue clearly states the expected behavior (log level restored after test), shows a minimal reproducible example, references the relevant documentation, and contrasts the behavior between versions. It\u2019s obvious what needs to be fixed."
    },
    "pytest-dev__pytest-7637": {
        "input_bounce": false,
        "trace": "The issue clearly states that certain warnings were suppressed in the 6.0 release via PR #7362 and need to be re-enabled in 6.1. While it doesn\u2019t enumerate each warning, the reference to the specific pull request gives a concrete place to see exactly what was changed. It\u2019s straightforward to interpret that the solution is to revert or reapply those warning definitions, so this is reasonably specified."
    },
    "pytest-dev__pytest-7648": {
        "input_bounce": false,
        "trace": "The report includes exact pylint errors, the relevant code snippet, link to full source, environment/versions, and a clear question about whether those abstract methods need implementation (or how to suppress warnings). That\u2019s enough to start a PR overriding the missing methods or adding appropriate no-op stubs or suppressions. The requirements and context are clear."
    },
    "pytest-dev__pytest-7939": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the desired change: to add a shorthand alias `--sw-skip` alongside `--stepwise-skip` in the existing `pytest_addoption` call. The code snippet shows exactly where the change is needed, and the expected CLI behavior is unambiguous. No further clarification is required."
    },
    "pytest-dev__pytest-7982": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the regression commit, states that the added `follow_symlinks=False` flag should be removed to restore previous behavior, and implies adding a test for symlinked directory collection. While it doesn\u2019t name the exact file/line to change, the commit ID makes it trivial to locate. This is enough to craft a targeted PR."
    },
    "pytest-dev__pytest-7985": {
        "input_bounce": true,
        "trace": "The issue simply states \u201cDeprecate `--strict`\u201d and complains about removing and reintroducing it, but provides no details on what behavior is expected, how to implement the deprecation, what warnings or removals are needed, or any acceptance criteria. There\u2019s not enough context to write a meaningful patch without further clarification."
    },
    "pytest-dev__pytest-8022": {
        "input_bounce": false,
        "trace": "The report gives a clear reproduction command (`pytest --doctest-modules __init__.py`), describes the incorrect single-test collection behavior, points to the exact code region and commit that introduced the change, and links failing tests. The desired outcome (collect all doctests in an __init__.py module) is obvious. This is enough detail to begin implementing a fix."
    },
    "pytest-dev__pytest-8055": {
        "input_bounce": true,
        "trace": "The issue merely points out that Python 3.8 introduced sys.unraisablehook and suggests that pytest \u201cshould set\u201d it so unraisable exceptions can be tied back to the right test. It doesn\u2019t spell out the hook\u2019s contract, the lifecycle (when to install and uninstall), how and where to store or report the exceptions, nor provide any concrete examples or acceptance criteria. There\u2019s a clear direction, but too many details are left undefined, making it ambiguous what a correct implementation would look like without further clarification."
    },
    "pytest-dev__pytest-8250": {
        "input_bounce": false,
        "trace": "The report clearly describes the environment, reproduction steps, the underlying cause (sys.stderr.fileno() returns \u20131 due to Twisted\u2019s wrapper), includes relevant code pointers and a traceback, and even points to a mitigation patch. All details needed to understand and fix the issue are present."
    },
    "pytest-dev__pytest-8365": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (backslashes from domain\\username breaking tmpdir path creation), provides exact reproduction steps and error logs, and identifies the root cause (unsanitized getpass.getuser() output). It\u2019s straightforward to implement a fix (strip illegal characters or take only the portion after the backslash), so the issue is well specified."
    },
    "pytest-dev__pytest-8399": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, describes the change in behavior (pytest 6.2.0 now exposing the generated unittest setUpClass fixture without a leading underscore), and clearly states the expected behavior (the fixture name should start with an underscore so it remains private unless -v is used). It\u2019s clear what code needs to change (the naming prefix in pytest\u2019s unittest plugin), so the issue is well specified."
    },
    "pytest-dev__pytest-8428": {
        "input_bounce": false,
        "trace": "The request is clear in intent\u2014pytest should raise an error when someone decorates a fixture with a @pytest.mark\u2014and also calls out updating the existing warning in doc/en/fixture.rst once that behavior is implemented. The exact error text, where in the code to hook in, and how to test it aren\u2019t spelled out, but an experienced pytest core maintainer has a straightforward way to fill those gaps. Therefore this is reasonably specified."
    },
    "pytest-dev__pytest-8447": {
        "input_bounce": false,
        "trace": "The report provides clear, minimal repro steps, full stack traces pinpointing exactly where pytest is wrongly forwarding a \u201cpath\u201d keyword into __init__, and even points to the offending lines in _pytest/nodes.py. A developer can jump straight to the failing from_parent/_create logic and remove or pop the unexpected \u201cpath\u201d arg before calling the node __init__. No additional clarification is needed."
    },
    "pytest-dev__pytest-8463": {
        "input_bounce": true,
        "trace": "The description conflates two different problems (startpath/fspath API regressions and test output coloring) without a clear single goal. It\u2019s ambiguous which bug to address and lacks concrete reproduction steps or a precise specification for the hook regression issue. As written, it\u2019s too unclear for a focused implementation."
    },
    "pytest-dev__pytest-8641": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (no color output with precision-formatted levelname), provides a minimal repro (the exact `log_cli_format` string), and even points to the specific regex in `ColoredLevelFormatter` that fails to match. It\u2019s clear what change is needed\u2014adjust the regex to recognize precision in the format spec (e.g. allow a `.\\d+` precision bit)."
    },
    "pytest-dev__pytest-8906": {
        "input_bounce": true,
        "trace": "The issue describes a problem (skipping modules with newer syntax) and suggests several possible remedies (doc updates, error message tweaks, or a new skip_module API), but it doesn\u2019t settle on a concrete requirement or clearly define the acceptance criteria. There\u2019s room for ambiguity over which change to make and how success is measured."
    },
    "pytest-dev__pytest-8952": {
        "input_bounce": false,
        "trace": "The request clearly identifies what\u2019s missing (an `assert_warnings()` helper on RunResult), why it\u2019s needed (to check only warnings without doing a full dict compare), and even gives a minimal API example (`result.assert_warnings(count=1)`). While implementation details (exact signature, message matching, etc.) are left open, there\u2019s a sensible interpretation and enough to begin work. You can locate the existing `RunResult`, inspect how it stores warnings, and add this new assertion accordingly."
    },
    "pytest-dev__pytest-9064": {
        "input_bounce": false,
        "trace": "The issue clearly describes the surprising current behavior, provides reproducible steps, example output, and states the desired behavior (that --stepwise-skip should imply --stepwise). All requirements and context are given for implementing a fix in the pytest stepwise plugin, so the issue is well\u2010specified."
    },
    "pytest-dev__pytest-9066": {
        "input_bounce": false,
        "trace": "The request is clear: update the deprecation warning for direct Node construction to include the full module path of the offending class (e.g. \u201cpytest_relaxed.plugin.SpecModule\u201d instead of just \u201cSpecModule\u201d). While it doesn\u2019t specify the exact file and line numbers, it points straight at the deprecation warning in pytest\u2019s node construction logic, and the change itself is straightforward (using cls.__module__ + class name)."
    },
    "pytest-dev__pytest-9249": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the bug (slashes in auto-generated IDs break `-k` selection) and outlines the desired behavior (sanitize IDs to use only shell-safe characters, e.g. replace `/` and avoid `[]`, perhaps using colons). While the exact sanitization rules aren\u2019t fully spelled out, there is enough context to make reasonable implementation decisions and propose a patch. Therefore the issue is reasonably specified."
    },
    "pytest-dev__pytest-9279": {
        "input_bounce": false,
        "trace": "The report provides clear, minimal repro steps, full stack traces pinpointing exactly where pytest is wrongly forwarding a \u201cpath\u201d keyword into __init__, and even points to the offending lines in _pytest/nodes.py. A developer can jump straight to the failing from_parent/_create logic and remove or pop the unexpected \u201cpath\u201d arg before calling the node __init__. No additional clarification is needed."
    },
    "pytest-dev__pytest-9475": {
        "input_bounce": true,
        "trace": "The issue clearly describes the regression (the new `deselected` parameter breaks existing calls to assert_outcomes) and the user\u2019s two open-ended questions, but it does not specify a concrete fix or desired behavior beyond \u201cshould we live with this or document it\u201d and \u201chow to prevent similar breakages.\u201d There\u2019s room for multiple interpretations (revert the change, add defaults/ignores, deprecate\u2026), so it\u2019s not precise enough for an unambiguous PR implementation."
    },
    "pytest-dev__pytest-9624": {
        "input_bounce": true,
        "trace": "The report is just a pasted CI failure stack trace with no clear description of what needs to change, no minimal reproducible example, and no concrete guidance on expected behavior or suspected cause. It\u2019s unclear where in the code to look or what a successful fix would entail."
    },
    "pytest-dev__pytest-9646": {
        "input_bounce": false,
        "trace": "The report includes a clear problem description, exact reproduction steps (with code snippets), environment and version details, the actual vs expected behavior, and minimal example. A maintainer can reproduce the bug and know exactly what a successful fix looks like (the specified warnings should be silenced), so the issue is well-specified."
    },
    "pytest-dev__pytest-9681": {
        "input_bounce": false,
        "trace": "The report provides a minimal, self\u2010contained reproduction (project layout, pytest config, exact error), clearly describes the regression (pytest 7.0.0 importlib + pythonpath issue when conftest.py is present) and the expected behavior (imports should work as in earlier versions). This is enough information for a developer to write a failing test and implement a fix."
    },
    "pytest-dev__pytest-9709": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates a reproducible bug in pytest.approx when passed a set (unlike lists/tuples), shows the relevant implementation snippet, and even suggests two possible remediation paths (remove set from supported \u201csequences\u201d or add proper unordered\u2010container support). While it doesn\u2019t spell out exactly which remedy to choose or define all edge\u2010case behavior for unordered containers, it\u2019s unambiguous what\u2019s wrong and what a correct fix would aim to do. There\u2019s enough here to craft a PR against the code, docs, and tests."
    },
    "pytest-dev__pytest-9780": {
        "input_bounce": false,
        "trace": "The report gives clear reproduction steps, links to the config (pytest.ini) and CI logs, and a concrete hypothesis about missing marker registration under pytest 7.1.0. There is enough detail to reproduce and diagnose the conftest/marker issue, though some specifics (exact error text) are only in the linked logs. Overall it\u2019s sufficiently defined for a meaningful fix."
    },
    "pytest-dev__pytest-9798": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates the failure mode (pytest.approx\u2019s failure repr importing numpy and crashing when numpy isn\u2019t installed), provides a minimal failing example and environment details, and states the desired behavior (the assertion error should render without requiring numpy). This is sufficient to write and verify a fix."
    },
    "pytest-dev__pytest-9911": {
        "input_bounce": false,
        "trace": "The issue clearly describes the undesirable current behavior (passing an empty tuple always errors with a confusing message), and specifies that the fix should detect empty tuple inputs in pytest.raises(), pytest.warns(), and pytest.mark.xfail(raises= or warns=), then raise a more helpful error (providing example wording). While exact wording and exception types aren\u2019t fully spelled out, there\u2019s a straightforward interpretation for implementing the validation checks and custom errors, making it reasonably specified for a PR."
    },
    "scikit-learn__scikit-learn-10198": {
        "input_bounce": false,
        "trace": "The request clearly states the goal: implement a get_feature_names method for the new CategoricalEncoder, mirroring the existing API in PolynomialFeatures (and the earlier OneHotEncoder). While some details (e.g. exact naming conventions, handling of dropped categories) would need to follow the existing pattern, there\u2019s a well-established example in scikit-learn\u2019s codebase to guide a straightforward implementation. This makes the issue reasonably specified."
    },
    "scikit-learn__scikit-learn-10297": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a missing parameter (store_cv_values) in RidgeClassifierCV, shows the reproducer, expected vs actual behavior, cites the documentation, and explicitly requests feature parity with RidgeCV. There\u2019s no ambiguity about what needs to be changed\u2014add the store_cv_values flag, update the API signature, and implement cv_values_ storage\u2014so it\u2019s well specified."
    },
    "scikit-learn__scikit-learn-10377": {
        "input_bounce": false,
        "trace": "The issue clearly describes a discrepancy in f1_score\u2019s macro\u2010averaging when using multilabel indicator arrays and the labels parameter (specifically when 0 is included). It provides a minimal reproducible example, the expected versus actual output, and the desired behavior. From this, one can directly locate the averaging logic in scikit-learn\u2019s metrics implementation, write a fix, and add a regression test. All necessary detail is included."
    },
    "scikit-learn__scikit-learn-10382": {
        "input_bounce": true,
        "trace": "The provided issue text actually bundles two separate concerns (a dtype bug in TfidfVectorizer and an enhancement request for FitFailedWarning messages). The first is clear and reproducible, but the second is a loosely defined feature request without concrete acceptance criteria. Since it mixes two distinct topics and the enhancement lacks precise requirements, the overall description is too vague for a single, well-scoped PR."
    },
    "scikit-learn__scikit-learn-10397": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a reproducible bug (integer alphas causing a ValueError when raised to negative powers) and states that converting one alpha to float fixes it. The fix is unambiguous: internally cast the alphas array to float dtype before any power operations. This is sufficiently detailed for an implementable solution."
    },
    "scikit-learn__scikit-learn-10427": {
        "input_bounce": false,
        "trace": "The issue clearly states which function (`load_sample_images`) is triggering a known deprecation warning (`scipy.imread`) and even identifies the versions where it is deprecated/removed. The required fix\u2014replacing `imread` with a supported alternative (e.g. `imageio.imread` or `skimage.io.imread`)\u2014is obvious, and no additional context is needed. This is a straightforward, well-scoped task."
    },
    "scikit-learn__scikit-learn-10428": {
        "input_bounce": false,
        "trace": "The issue clearly states what test to add, where to add it, and exactly what property to check for each estimator method (`predict`, `predict_proba`, `decision_function`, `score_samples`, `transform`). A developer familiar with the existing `estimator_checks.py` machinery can implement it without further clarification."
    },
    "scikit-learn__scikit-learn-10443": {
        "input_bounce": false,
        "trace": "The report clearly states the unexpected behavior (dtype argument ignored), provides minimal reproducible code, expected vs. actual results, and environment details. All information needed to diagnose and implement a fix is present."
    },
    "scikit-learn__scikit-learn-10452": {
        "input_bounce": true,
        "trace": "The issue merely states that PolynomialFeatures doesn\u2019t support sparse input and suggests adding that support, but provides no details on desired behavior, API changes, performance considerations, or test requirements. It\u2019s too brief and leaves too many questions unanswered for a clear implementation plan."
    },
    "scikit-learn__scikit-learn-10483": {
        "input_bounce": true,
        "trace": "The issue is more of a high-level design discussion than a concrete implementation plan. It outlines a desire to reorganize the imputer classes into a new module structure (e.g. sklearn.impute, neighbors, etc.) but does not specify exactly which files to move, how to handle imports and deprecations, or cover compatibility, tests, and documentation changes. There\u2019s room for interpretation on the specific steps, file organization, and backward\u2010compatibility strategy, making it too vague for a straightforward pull request."
    },
    "scikit-learn__scikit-learn-10495": {
        "input_bounce": false,
        "trace": "The issue clearly pinpoints the function (check_array), the current odd behavior (accepting string arrays when dtype='numeric'), and the desired change (raise an error or attempt coercion when non-numeric data is passed). You can jump in and implement a dtype-check for object arrays containing non-numeric elements, add tests, and optionally plan a deprecation cycle. While there is some choice around coercion vs. immediate failure or deprecation timing, there\u2019s enough concrete direction to start coding."
    },
    "scikit-learn__scikit-learn-10508": {
        "input_bounce": false,
        "trace": "The issue clearly describes the unexpected failure: transforming an empty list on a string\u2010fitted LabelEncoder raises a TypeError, while it should simply return an empty array. It includes environment details, minimal repro code, the stack trace, and the expected behavior. There is no guesswork about what needs to be done (e.g. add a special empty\u2010input case in transform)."
    },
    "scikit-learn__scikit-learn-10558": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal\u2014to deprecate (and ultimately remove) the `axis` parameter from the `Imputer` class, cites why it\u2019s unnecessary, references the related issue number, and requests the usual deprecation workflow (warning, docs, tests). There\u2019s no ambiguity about what must be done, so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-10581": {
        "input_bounce": false,
        "trace": "The report clearly states the bug (X is modified despite copy_X=True when check_input=False), provides a minimal reproducer script, and defines the expected behavior (X should remain unchanged). The fix is straightforward: ensure an internal copy of X is made regardless of check_input. This is well-specified for a PR."
    },
    "scikit-learn__scikit-learn-10777": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a bug (no error when min_n > max_n in CountVectorizer) and the expected behavior (throw an error). While it doesn\u2019t spell out exactly where or which exception to raise or include sample code/tests, those are straightforward defaults (e.g. ValueError in the constructor). Thus there\u2019s enough to make a meaningful fix without ambiguity."
    },
    "scikit-learn__scikit-learn-10803": {
        "input_bounce": true,
        "trace": "The report is just a high-level feature request to add sample weights to KDE, with no details about API design, normalization behavior, documentation, or integration points. It\u2019s unclear exactly how the weight parameter should work or where it should live, so the ticket is too vague for a concrete implementation effort."
    },
    "scikit-learn__scikit-learn-10844": {
        "input_bounce": false,
        "trace": "The issue pinpoints the exact code location and behavior, includes expected versus actual results, reproduces the warning condition, and even proposes a clear alternative formulation. It\u2019s fully specified and actionable."
    },
    "scikit-learn__scikit-learn-10870": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (lower_bound_ not aggregated over multiple inits), pinpoints the location in code (BaseMixture.fit()), gives a precise one-line fix, includes a repro script, and notes how to extend the existing test. It\u2019s straightforward to implement and verify."
    },
    "scikit-learn__scikit-learn-10881": {
        "input_bounce": false,
        "trace": "The issue clearly describes the lack of a convergence warning for LogisticRegressionCV when fitting hits the max_iter limit. The reporter provides repro code, current behavior, desired warning message, and environment details. It\u2019s straightforward to implement a ConvergenceWarning for models that reach max_iter without convergence. Therefore, the requirements are well-specified."
    },
    "scikit-learn__scikit-learn-10899": {
        "input_bounce": false,
        "trace": "The user clearly describes what they\u2019re trying to do (persist and reload a fitted TfidfTransformer by setting its idf_ values), provides minimal reproducible code, shows the errors encountered, and states the desired outcome. There\u2019s no ambiguity about the problem or what a successful solution looks like (adding a way to set idf_ or a workaround), so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-10908": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates the inconsistent behavior with code examples and points to exactly where to change (the get_feature_names check vs. using _validate_vocabulary when a vocabulary parameter is provided). It specifies the desired outcome and gives concrete reproduction steps, so it\u2019s well-enough scoped to implement a fix."
    },
    "scikit-learn__scikit-learn-10913": {
        "input_bounce": false,
        "trace": "The report clearly describes current behavior (KeyError on unseen labels) and the desired behavior (add an `ignore_unseen` flag that maps unseen labels to zeros). It includes example code, expected output, and a use case reference. This is sufficient to implement and test the feature without further clarification."
    },
    "scikit-learn__scikit-learn-10982": {
        "input_bounce": false,
        "trace": "The request is clear about what change is needed: add an optional constructor flag (e.g. allow_smaller_grid=False by default) so that when n_iter exceeds the total number of possible parameter combinations, no exception is raised and the effective number of iterations is simply capped at the grid size. The exact code location is given, the desired parameter name and default behavior are specified, and the expected behavior is unambiguous. This is well-specified."
    },
    "scikit-learn__scikit-learn-10986": {
        "input_bounce": false,
        "trace": "The report clearly reproduces the bug with minimal code, identifies the exact offending lines in logistic.py, describes the undesirable behavior and desired behavior, and even suggests a precise code change. All information needed to implement and test a fix is provided."
    },
    "scikit-learn__scikit-learn-11040": {
        "input_bounce": false,
        "trace": "The report pinpoints exactly where the float n_neighbors slips through (in NearestNeighbors.__init__ and kneighbors), shows the failing code path and exception, and specifies the desired behavior (early validation with clearer error or integer casting). It\u2019s clear what needs to be added (type check for n_neighbors in __init__ and kneighbors), tests updated, and documentation. This is WELL_SPECIFIED."
    },
    "scikit-learn__scikit-learn-11042": {
        "input_bounce": false,
        "trace": "The issue clearly describes a bug, provides minimal reproducible code, shows the expected versus actual behavior, and specifies the environment. It\u2019s immediately actionable: ensure that OneHotEncoder passes the user-specified dtype through when building the sparse output. This is sufficiently detailed for an engineer to implement and test a fix."
    },
    "scikit-learn__scikit-learn-11043": {
        "input_bounce": false,
        "trace": "This is a clear feature request with a concrete proposal\u2014change the default `validate` to `'array-or-frame'` and run a deprecation cycle\u2014yet it leaves implementation details (exact new API shape, warning text, handling of Series, tests, etc.) to the contributor\u2019s judgment. It\u2019s not fully spelled out but there\u2019s a sensible interpretation and path forward."
    },
    "scikit-learn__scikit-learn-11160": {
        "input_bounce": false,
        "trace": "The issue clearly requests adding alternate output types (e.g. DataFrame or DataArray) instead of just a formatted string. While the exact API (parameter name, return types, defaults) isn\u2019t fully locked down, there is a sensible, minimal implementation\u2014add an output_dict flag to return a dict-of-dicts (from which users can build a DataFrame/Array). This leaves some flexibility in details but is well enough specified to write a PR."
    },
    "scikit-learn__scikit-learn-11206": {
        "input_bounce": true,
        "trace": "The issue as written gives only a title and a vague note to \u201chandle NaN values\u201d but no specification of expected behavior (ignore NaNs vs produce NaN results, how to treat different shapes or axes, what tests should pass), nor any failing test cases or code pointers. There\u2019s insufficient detail to implement or verify a correct solution."
    },
    "scikit-learn__scikit-learn-11264": {
        "input_bounce": false,
        "trace": "The report clearly identifies the performance regression, provides reproducible code snippets across various sparse formats, quantifies the slowdown, states the expected behavior, and even suggests the desired remedy (automatic conversion or a warning). All necessary details (versions, environments, timings) are present, so one can directly implement and test a fix."
    },
    "scikit-learn__scikit-learn-11281": {
        "input_bounce": true,
        "trace": "The issue raises a general design question about aligning mixture models\u2019 API with clusterers but lacks concrete requirements, acceptance criteria, or a clear success definition. It\u2019s a high-level proposal without precise actionable steps."
    },
    "scikit-learn__scikit-learn-11310": {
        "input_bounce": false,
        "trace": "The feature request is clear: in BaseSearchCV.fit after selecting the best estimator, wrap the refit call in a timer and store the elapsed time in a new attribute (e.g. `refit_time_`, in seconds). This directly addresses the ask and has a single, obvious implementation path."
    },
    "scikit-learn__scikit-learn-11315": {
        "input_bounce": false,
        "trace": "The report gives a concrete reproduction, shows the failing code path and the desired support for an empty transformer list (no more ValueError). It\u2019s clear what needs to change in _BaseComposition._set_params to guard against empty estimators, even though the exact code fix isn\u2019t spelled out. This is enough to implement a meaningful solution."
    },
    "scikit-learn__scikit-learn-11333": {
        "input_bounce": false,
        "trace": "The report gives a concrete reproduction, shows the failing code path and the desired support for an empty transformer list (no more ValueError). It\u2019s clear what needs to change in _BaseComposition._set_params to guard against empty estimators, even though the exact code fix isn\u2019t spelled out. This is enough to implement a meaningful solution."
    },
    "scikit-learn__scikit-learn-11346": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, environment details (OS, Python, NumPy, scikit-learn versions), exact error message, and clear reproduction steps. A developer can reproduce and debug the read-only buffer issue when parallelizing SparseCoder, so the ticket is well specified."
    },
    "scikit-learn__scikit-learn-11391": {
        "input_bounce": false,
        "trace": "The issue clearly describes when and how the bug occurs (using a string missing_value on a numeric array), shows the traceback, and points to the shared helper _get_mask as the right place to add a dtype\u2010compatibility check. While it doesn\u2019t spell out the exact error message or tests, there is a sensible interpretation: detect mismatched types between X and missing_values in _get_mask and raise a clear ValueError. This is enough to attempt a targeted fix."
    },
    "scikit-learn__scikit-learn-11496": {
        "input_bounce": false,
        "trace": "The issue clearly describes a bug in the SimpleImputer when handling sparse matrices with explicit zeros. It includes minimal reproducible code, the actual and expected outputs, and indicates exactly what the behavior should be. This is sufficient to scope a fix and write tests, so it is well-specified."
    },
    "scikit-learn__scikit-learn-11574": {
        "input_bounce": false,
        "trace": "The request clearly states what needs to be done\u2014move the deprecation warning for the `contamination` parameter out of the `__init__` method and into `fit`, and then update the tests accordingly. While it doesn\u2019t list specific file names or code lines, any developer working with the codebase can locate the current warning placement and the associated tests and make the necessary adjustments. Thus there is enough guidance to carry out the change."
    },
    "scikit-learn__scikit-learn-11578": {
        "input_bounce": false,
        "trace": "The report precisely identifies the bug in _log_reg_scoring_path (lines and call sites), shows a minimal reproducer, and even suggests the exact change (passing multi_class through). All required context is provided to implement and verify the fix."
    },
    "scikit-learn__scikit-learn-11585": {
        "input_bounce": false,
        "trace": "The bug is clearly described (transform\u2019s per-component scaling uses a sum over samples rather than a fixed scale), the exact lines of code are identified, a minimal repro is provided along with expected vs. actual results, and two reasonable fixes are proposed. A maintainer could pick one and implement it without any further clarification."
    },
    "scikit-learn__scikit-learn-11596": {
        "input_bounce": false,
        "trace": "The request is clear: add a `sklearn.show_versions()` function mirroring pandas\u2019 version, including numpy BLAS binding details via system_info. The overall goal and requirements are defined, though minor implementation details (exact output format, placement) can be inferred from pandas. This makes it reasonably specified for a PR."
    },
    "scikit-learn__scikit-learn-11635": {
        "input_bounce": true,
        "trace": "The issue describes a general question rather than a concrete change request, doesn\u2019t specify exactly what behavior to change (e.g. remove the check vs add an option vs conditionally apply it), and doesn\u2019t scope the change to particular models or code paths. There isn\u2019t enough detail on the desired API or tests, so it\u2019s too vague to start an implementation."
    },
    "scikit-learn__scikit-learn-12421": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a discrepancy between the documented behavior (and the R implementation) and the scikit-learn output, provides a minimal reproducible example, and states the expected versus actual result. It\u2019s immediately clear what change is required (assign infinity for points that can never be core), so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-12462": {
        "input_bounce": false,
        "trace": "The issue comes with a clear description, a minimal reproducible example, observed versus expected behavior, version details, and even a suggested fix (\u201cadd a try\u2013except around shape detection so that non\u2010tuple shapes are ignored\u201d). That gives a precise location in sklearn\u2019s validation code to patch and test. Overall it\u2019s well\u2010scoped and actionable."
    },
    "scikit-learn__scikit-learn-12486": {
        "input_bounce": false,
        "trace": "The issue includes a concise repro case, the exact error, and a clear high-level fix (add a ValueError in scorer.py when the estimator isn\u2019t a classifier or y has only one class). While it doesn\u2019t spell out the precise function or line changes, there\u2019s a sensible interpretation of where and how to implement the check. You can meaningfully attempt a solution based on this information."
    },
    "scikit-learn__scikit-learn-12583": {
        "input_bounce": false,
        "trace": "The request is clear in intent\u2014add an add_indicator boolean parameter to existing imputers (especially SimpleImputer) that appends a MissingIndicator\u2019s output to the imputed data. It names the parameter, describes its behavior, and references the exact transformers involved. The remaining work is purely implementation detail within the codebase. Therefore it\u2019s reasonably specified."
    },
    "scikit-learn__scikit-learn-12585": {
        "input_bounce": false,
        "trace": "The issue includes a clear problem description, minimal reproducible code, the expected vs. actual behavior, environment details, and even a proposed fix location. There\u2019s enough information to implement and verify a solution."
    },
    "scikit-learn__scikit-learn-12625": {
        "input_bounce": false,
        "trace": "The issue includes a clear description, minimal reproducible code, expected vs. actual results, and environment versions. It\u2019s sufficiently detailed to implement and verify a fix."
    },
    "scikit-learn__scikit-learn-12656": {
        "input_bounce": true,
        "trace": "The issue description simply says \u201cRemove the labels parameter from hamming_loss\u201d but provides no details about the current behavior, exact function signature, tests that are failing, or how the change should interact with the rest of the codebase. There\u2019s no concrete example of input/output or a clear before-and-after contract. Without the code context and failing test cases, it\u2019s unclear how to verify or implement the fix. Therefore it\u2019s too vague to act on without further information."
    },
    "scikit-learn__scikit-learn-12682": {
        "input_bounce": false,
        "trace": "The issue clearly identifies that SparseCoder\u2019s use of Lasso doesn\u2019t allow adjusting max_iter, leading to convergence warnings. It suggests exposing additional estimator parameters (like max_iter) via the SparseCoder API. While the exact signature isn\u2019t spelled out (e.g. whether to add max_iter directly or accept a dict of lasso_params), it\u2019s obvious what needs to be done and how to test it. This makes the ticket reasonably specified for implementation."
    },
    "scikit-learn__scikit-learn-12704": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact error traceback, the version in which it regressed, and pointers to the failing code paths. This is enough detail to reproduce, locate, and fix the bug. A clear fix could involve updating the membership test in _validate_transformers to handle array/Index inputs properly."
    },
    "scikit-learn__scikit-learn-12827": {
        "input_bounce": false,
        "trace": "The request is clear in intent (enhance the QuantileTransformer docs with implementation details), and even points to an external resource to draw from. However it leaves open exactly which algorithmic steps or code comments to include and where in the docs. There\u2019s enough direction to make a reasonable plan (inspect the code, summarize the empirical CDF approach, reference the StackExchange answer), but some detail will need to be filled in through examination of the implementation. Thus it is REASONABLY_SPECIFIED."
    },
    "scikit-learn__scikit-learn-12860": {
        "input_bounce": false,
        "trace": "The request clearly identifies a gap (no native unpenalized logistic regression in LogisticRegression) and suggests the desired behavior (support penalty='none' rather than forcing C\u2192\u221e). While you\u2019d still need to decide how to hook it into the existing solvers and parameter checks, the feature\u2019s intent and requirements are unambiguous and can be implemented without further domain clarification."
    },
    "scikit-learn__scikit-learn-12908": {
        "input_bounce": false,
        "trace": "The request clearly defines the new parameters (e.g. `independent=True` or `drop_first` plus a `baseline`), describes exactly how many columns to emit, gives a concrete usage example and expected output, and points out interaction with existing options (e.g. `handle_missing='ignore'`). There\u2019s enough detail to implement and test this feature without further clarification."
    },
    "scikit-learn__scikit-learn-12961": {
        "input_bounce": true,
        "trace": "The report describes a runtime traceback and suspects an empty \u201cout\u201d list in _format_results, but offers no minimal example, no clear reproduction steps, and only intermittent behavior. There\u2019s too little concrete context to know what to fix or reproduce, so it\u2019s vague."
    },
    "scikit-learn__scikit-learn-12973": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the bug location (duplicate copy_X parameters in __init__ and fit), shows the conflicting behavior, and proposes a concrete fix (make fit\u2019s copy_X default to None and only override when explicitly passed). The scope and expected change are unambiguous, so a PR can be implemented based solely on this description."
    },
    "scikit-learn__scikit-learn-12983": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the bug (init estimator\u2019s predict output has the wrong shape), the missing test coverage, and the requirement to allow init estimators without sample-weight support (when no sample weights are used). An experienced engineer can locate the relevant code paths in the gradient boosting implementation, adjust the output shape handling, add tests, and conditionally handle sample weights. While not line-by-line detailed, it\u2019s sufficiently scoped and actionable with the existing codebase and referenced GitHub issues."
    },
    "scikit-learn__scikit-learn-12989": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the inconsistency (default init of NMF vs. non_negative_factorization) and proposes aligning them by changing the default in non_negative_factorization (with a standard deprecation process). While it doesn\u2019t spell out every detail of the deprecation steps, within the scikit-learn codebase there\u2019s an established pattern for deprecating parameters, so it\u2019s straightforward to implement. Hence, it\u2019s reasonably specified."
    },
    "scikit-learn__scikit-learn-13010": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clearly states the observed vs. expected behavior, provides the environment details, and even hints at a solution (up\u2010casting for mean/std). It\u2019s clear what change is needed (perform calculations in higher precision for float16 inputs), so you can implement and test it without further clarification."
    },
    "scikit-learn__scikit-learn-13013": {
        "input_bounce": false,
        "trace": "The issue clearly states what to change (use check_is_fitted instead of ad-hoc hasattr checks), gives examples and the expected outcome, and suggests a method to find occurrences. While the exact patterns and files aren\u2019t exhaustively listed, the task is well defined and actionable."
    },
    "scikit-learn__scikit-learn-13017": {
        "input_bounce": false,
        "trace": "The report includes a minimal, reproducible example, clear description of current vs expected behavior, and an unambiguous requirement (either error on negative indices or treat them the same as positive). This is well\u2010specified for a PR to fix the handling of negative column indices in ColumnTransformer."
    },
    "scikit-learn__scikit-learn-13087": {
        "input_bounce": false,
        "trace": "The request clearly defines the function to change (`calibration_curve`), exactly what new argument semantics are wanted (accepting an explicit sequence of bin edges, analogous to `np.histogram`), why it\u2019s needed (skewed predictions lead to empty bins), and even includes a minimal working hack for reference. The scope, API change, and expected behavior are all unambiguous, so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-13124": {
        "input_bounce": false,
        "trace": "The issue clearly describes a mismatch between the documented behavior of StratifiedKFold.shuffle (which says \u201cshuffle each stratification of the data before splitting into batches\u201d) and the actual implementation (which only shuffles the order of the resulting folds, not the samples within each stratum). The reporter provides minimal reproducible code, expected vs. actual output, and a precise statement of what needs to change (i.e., samples within each class should be shuffled before fold assignment). There is no ambiguity about reproducing or fixing the bug, so the issue is well-specified."
    },
    "scikit-learn__scikit-learn-13135": {
        "input_bounce": false,
        "trace": "The report clearly describes the failure mode, provides minimal reproducible code, expected vs. actual behavior, and sufficient context (environment, versions). The required fix (sorting the cluster centers/bin edges before calling np.digitize) is obvious from the description. This is well-specified."
    },
    "scikit-learn__scikit-learn-13142": {
        "input_bounce": false,
        "trace": "The report clearly describes the discrepancy, provides minimal reproducible code, shows expected vs actual behavior, and even identifies the missing test coverage. A developer can reproduce the issue, determine the root cause in fit_predict when n_init>1, and write both a fix and a new test. This is WELL_SPECIFIED."
    },
    "scikit-learn__scikit-learn-13143": {
        "input_bounce": false,
        "trace": "The report clearly shows a reproducible code snippet, the exact discrepancy between actual and expected outputs, and the desired result. It\u2019s obvious what change is wanted (labels with no true/predicted samples should yield precision 1 rather than 0), but the report doesn\u2019t detail broader API implications or how to handle related edge cases. It\u2019s enough to start implementing a fix, but leaves some design choices implicit."
    },
    "scikit-learn__scikit-learn-13157": {
        "input_bounce": false,
        "trace": "The issue clearly points out an inconsistency: r2_score\u2019s default multioutput changed to \u201cuniform_average\u201d in v0.19, but base.RegressorMixin still hard-codes \u201cvariance_weighted\u201d. The task\u2014unify the defaults to avoid this mismatch\u2014is evident, and code locations are linked. While not an exhaustive spec, it\u2019s straightforward enough to implement, making it reasonably specified."
    },
    "scikit-learn__scikit-learn-13165": {
        "input_bounce": false,
        "trace": "The report clearly identifies the affected component (KBinsDiscretizer quantile strategy), describes the specific numerical instability (percentiles sometimes non-monotonic), and even suggests the remedy (apply a running maximum on the edges array). While it doesn\u2019t supply the exact diff, an engineer familiar with the code can locate the percentile calls in fit() and insert a simple np.maximum.accumulate step. Therefore it\u2019s reasonably specified."
    },
    "scikit-learn__scikit-learn-13174": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal (relax input validation for X in ensemble methods like AdaBoost to allow non-numeric inputs that the base estimator can handle) and points to the relevant component (AdaBoost, and by extension other ensemble methods). While it doesn\u2019t give exact code changes, it\u2019s a reasonably scoped enhancement request and can be implemented by someone familiar with the codebase. Therefore it is REASONABLY_SPECIFIED."
    },
    "scikit-learn__scikit-learn-13253": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal (accept DataFrames in OneHot/OrdinalEncoder without forcing a full-array conversion), explains why (to preserve per-column dtypes and avoid mixed-object arrays), and even suggests the implementation approach (iterate over DataFrame columns, apply check_array per column). While some implementation details (e.g.\nreturn type, exact API changes and tests) would need to be worked out, the requirements and motivations are sufficiently clear for a meaningful PR."
    },
    "scikit-learn__scikit-learn-13283": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a memory bottleneck in the IsolationForest\u2019s decision_function (specifically in its loop that builds full n_samples\u00d7n_trees arrays) and suggests refactoring so that per\u2010tree scores are aggregated incrementally rather than stored in large intermediate matrices. The problematic code is pinpointed (lines 267\u2013281 in iforest.py), the repro is described, and a high\u2010level solution (move average_path_length logic into each tree\u2019s scoring to avoid full-array accumulation) is sketched. While implementation details and benchmarks are not given, there\u2019s enough concrete context\u2014file locations, code snippets, and performance goal\u2014to make a meaningful attempt at a fix. Thus, it is REASONABLY_SPECIFIED."
    },
    "scikit-learn__scikit-learn-13302": {
        "input_bounce": true,
        "trace": "The issue is just a high-level to-do with references to other PRs (#11155) and lacks concrete details on the bug, expected behavior, or code locations. There\u2019s no clear reproduction or specification of the casting rules or where changes must occur, making it too vague to implement directly."
    },
    "scikit-learn__scikit-learn-13313": {
        "input_bounce": false,
        "trace": "The issue clearly identifies that two test helper functions (check_class_weight_balanced_classifiers and check_class_weight_balanced_linear_classifier) exist in estimator_checks.py but are never invoked by the test suite. While it doesn\u2019t spell out exactly where to hook them into the tests, it\u2019s straightforward to locate the relevant test file (e.g. test_estimator_checks.py) and add calls for these checks. There\u2019s a clear, actionable fix, so it\u2019s reasonably specified."
    },
    "scikit-learn__scikit-learn-13328": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, provides minimal reproducible code, shows expected vs actual behavior, and specifies that boolean predictors should be cast to float as in other estimators. A well-scoped fix is to ensure X is converted to float in HuberRegressor.fit (e.g., via check_array), so this is WELL_SPECIFIED."
    },
    "scikit-learn__scikit-learn-13333": {
        "input_bounce": false,
        "trace": "The issue clearly states that the docstring for `n_quantiles` in `QuantileTransformer` should explain that values above the number of training samples are redundant (i.e. capped at `n_samples`), and illustrates this with concrete code examples. The change is limited to improving documentation, and the scope and desired behavior are unambiguous."
    },
    "scikit-learn__scikit-learn-13363": {
        "input_bounce": false,
        "trace": "The issue includes a minimal code snippet to reproduce the error, the exact traceback, expected vs. actual behavior, and environment versions. It clearly states when and why the UnboundLocalError occurs (when return_intercept=True) and what the correct output should be, making it straightforward to triage and fix."
    },
    "scikit-learn__scikit-learn-13368": {
        "input_bounce": false,
        "trace": "The issue includes a clear description, minimal reproducible code, expected vs. actual output, and environment details. A developer can immediately reproduce the problem and know what a successful fix should achieve."
    },
    "scikit-learn__scikit-learn-13392": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal (add a common multi-output test for classifiers and regressors that support it) and points to where the redundant tests must be removed, with an example snippet. While it doesn\u2019t list every estimator or exact test file to modify, it provides enough context (link to prior discussion, example code, expected behavior) for an experienced engineer to implement and integrate the new common test suite. Hence it is reasonably specified."
    },
    "scikit-learn__scikit-learn-13436": {
        "input_bounce": true,
        "trace": "This is a broad feature-improvement request without concrete requirements or acceptance criteria. It points out that the current repr is confusing and suggests a high-level idea (trim per outer step) but lacks detail on exactly how the repr should change or examples of desired output. There\u2019s no clear spec for a solution, making it too vague to implement directly."
    },
    "scikit-learn__scikit-learn-13439": {
        "input_bounce": false,
        "trace": "The issue clearly describes the missing behavior (__len__ on Pipeline), provides code to reproduce the error, and implicitly defines the expected behavior (len(pipe) should return the number of pipeline steps). Implementing __len__ to return len(self.steps) is an obvious fix. There\u2019s no ambiguity about what success looks like."
    },
    "scikit-learn__scikit-learn-13447": {
        "input_bounce": false,
        "trace": "The issue clearly states the function (label_ranking_average_precision_score), the specific behavior (skipping sample_weight for samples with all-zero labels), points to the exact code lines, provides an example with expected vs. actual output, and defines the correct behavior. A developer can immediately locate the branch that special-cases zero-label samples and add sample_weight handling there. This is sufficient for a straight-forward fix."
    },
    "scikit-learn__scikit-learn-13454": {
        "input_bounce": false,
        "trace": "The issue comes with a minimal reproducible example and clearly pinpoints that the error message is outdated (referring to \u201cn_values\u201d instead of categories) and confusing when a single list of categories is passed. It even suggests improving detection for this misuse. While it doesn\u2019t spell out the exact new wording, it\u2019s clear where in the code (`OrdinalEncoder`\u2019s input validation) the fix should occur and what the end goal is. This is sufficiently specified to implement a solution."
    },
    "scikit-learn__scikit-learn-13472": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (using a Pipeline as an initial estimator in GradientBoostingRegressor causes a signature mismatch), includes minimal reproducible code, the full traceback, the exact source line, and even a candidate one-line patch. All required context is present, making it straightforward to implement and test the fix."
    },
    "scikit-learn__scikit-learn-13485": {
        "input_bounce": true,
        "trace": "The issue reads more like a discussion question than a concrete request. It doesn\u2019t point to the exact code location, specify the desired new behavior or acceptance criteria, or outline how shape validation should change. Without those details, it\u2019s unclear what a successful implementation would look like, so the issue is too vague to act on directly."
    },
    "scikit-learn__scikit-learn-13496": {
        "input_bounce": false,
        "trace": "The issue clearly describes the desired feature (exposing a warm_start parameter in IsolationForest.__init__), how it currently behaves, what changes to make (add parameter, docs, tests, examples), and even gives sample docstring text. There is a direct mapping to code changes, documentation updates, and tests, so it is well-specified."
    },
    "scikit-learn__scikit-learn-13497": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a specific bug in _estimate_mi: using \u201cdiscrete_features == 'auto'\u201d will break when discrete_features is an array or mask. It also points out missing test coverage for non-'auto' cases. While it doesn\u2019t prescribe the exact code change, it\u2019s straightforward to (1) change the check to something like isinstance(discrete_features, str) and/or use a proper comparison for arrays, and (2) add tests for array and boolean-mask inputs. This makes it reasonably specified for implementation."
    },
    "scikit-learn__scikit-learn-13536": {
        "input_bounce": false,
        "trace": "The issue clearly identifies where the problem occurs (in Pipeline.fit/_fit), shows a minimal reproducible example, and states exactly what the improved behavior should be (a friendlier error message pointing out the need for step_name__sample_weight). A contributor could write a patch to catch bare sample_weight keys and raise a custom ValueError with the suggested format."
    },
    "scikit-learn__scikit-learn-13549": {
        "input_bounce": false,
        "trace": "The issue clearly calls for adding a `stratify` parameter to `utils.resample` (or a new `subsample` util) that behaves much like the stratification in `train_test_split`, but without failing when the requested sample size equals or is close to the dataset size. While the edge\u2010case behaviors (exact API signatures, error messages, replacement vs. no replacement) aren\u2019t spelled out in minute detail, there\u2019s an obvious reference implementation (the current `train_test_split` stratify logic) and a clear goal. This makes it reasonably specified: enough to start a PR and fill in minor details by following existing patterns."
    },
    "scikit-learn__scikit-learn-13554": {
        "input_bounce": false,
        "trace": "The report clearly describes the discrepancy, provides a minimal reproducible example with expected vs. actual output, and lists environment versions. A reviewer or contributor can straightforwardly identify and implement a fix for float32 precision in pairwise_distances. Therefore it\u2019s well\u2010specified."
    },
    "scikit-learn__scikit-learn-13584": {
        "input_bounce": false,
        "trace": "The issue provides a minimal reproducible example, identifies the specific error (ValueError in the new repr when handling array-valued parameters under print_changed_only), and implies the expected behavior (no exception and proper display of the array). While it doesn\u2019t spell out the exact desired output, it\u2019s straightforward to infer that the repr logic needs to detect array parameters and format them without evaluating their truth value. Therefore it\u2019s sufficiently clear to start a fix."
    },
    "scikit-learn__scikit-learn-13620": {
        "input_bounce": false,
        "trace": "The issue provides reproducible code samples, precise observed vs. expected behavior, environmental details (versions), and even staged outputs pinpointing when the bug appears. It\u2019s clear what the bug is and how to reproduce it, so a developer can meaningfully attempt a fix or investigation."
    },
    "scikit-learn__scikit-learn-13628": {
        "input_bounce": false,
        "trace": "The report gives a clear, minimal repro (constant targets with all predictions at 0 or 1), explains that the private helper `_check_binary_probabilistic_predictions` forced the single retained class to 0 (flipping errors to the opposite sign), and shows the expected behavior. While it doesn\u2019t prescribe exact code changes, it clearly identifies the faulty function, the symptoms, and the correct outcomes, making it reasonably specified for a fix."
    },
    "scikit-learn__scikit-learn-13641": {
        "input_bounce": true,
        "trace": "The issue points out that CountVectorizer\u2019s input parameter is ignored when a custom analyzer is provided, but it lacks clear reproduction steps for actual file inputs, a specified expected behavior (should custom analyzers override input? should files be read first?), and acceptance criteria for a fix or documentation change. Without concrete detail on the desired outcome, it\u2019s unclear how to implement a meaningful solution."
    },
    "scikit-learn__scikit-learn-13704": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducer, clear description of expected vs actual behavior, and environment details. It\u2019s unambiguous what the VarianceThreshold should do and how it\u2019s failing here, so one can jump straight to diagnosing/fixing the bug."
    },
    "scikit-learn__scikit-learn-13779": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, provides a minimal reproducible example with code and stack trace, and specifies the condition (an estimator set to None plus sample_weight) under which the VotingClassifier.fit method fails. From this, it is straightforward to identify where to add a None check in the VotingClassifier\u2019s sample_weight handling. Thus the request is well-specified."
    },
    "scikit-learn__scikit-learn-13780": {
        "input_bounce": false,
        "trace": "The request clearly states that VotingClassifier and VotingRegressor should treat the string 'drop' exactly as they currently treat None (i.e., omit that estimator from the ensemble). It points to the specific classes and the existing behavior, so a developer can update the validation logic, docs, and tests accordingly without needing further clarification."
    },
    "scikit-learn__scikit-learn-13828": {
        "input_bounce": false,
        "trace": "The issue clearly states that AffinityPropagation should accept a sparse precomputed affinity matrix, provides minimal reproduction code, the expected behavior (no error) vs. actual traceback, and even references a related issue. It\u2019s unambiguous what change is needed\u2014support or conversion of sparse inputs\u2014so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-13910": {
        "input_bounce": false,
        "trace": "The report clearly describes a regression in euclidean_distances from v0.20.3 to v0.21.1 on a specific float32 dataset, provides environment details, a minimal reproducible script plus the actual data and expected vs. actual results. It\u2019s fully actionable for debugging and fixing."
    },
    "scikit-learn__scikit-learn-13915": {
        "input_bounce": false,
        "trace": "The issue provides a clear description of the bug, exact steps and code to reproduce it, the expected versus actual behavior, and the relevant environment (32-bit Windows with int64 indptr). It\u2019s straightforward to identify where in sparsefuncs.min_max_axis one needs to handle/convert the indptr dtype to the platform\u2019s pointer size (intp) so the ufunc.reduceat call won\u2019t error. A developer can write a PR to cast or enforce the correct index dtype based on this information."
    },
    "scikit-learn__scikit-learn-13933": {
        "input_bounce": true,
        "trace": "The issue is essentially a discussion/question without concrete specifications or guidance on how to implement separate binning (e.g., whether to derive thresholds from training only and apply them to validation, or compute separate thresholds per split, how to handle mismatches, which functions/modules need updates, etc.). There is no clear acceptance criteria or detailed requirements, so it\u2019s too vague for a meaningful PR attempt."
    },
    "scikit-learn__scikit-learn-13960": {
        "input_bounce": false,
        "trace": "The report clearly states the desired behavior (sparse support in IncrementalPCA), provides minimal reproduction code, shows the exact error, and even outlines a concrete patch strategy. A maintainer can directly work from this to implement and test the feature."
    },
    "scikit-learn__scikit-learn-13983": {
        "input_bounce": false,
        "trace": "The request \u201cAdd matplotlib to show_versions()\u201d is clear and actionable: the show_versions utility should be extended to import matplotlib, retrieve its __version__, and include it in the output. There\u2019s no ambiguity about what\u2019s needed or where to make the change. Thus the issue is WELL_SPECIFIED."
    },
    "scikit-learn__scikit-learn-14053": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact error, environment details, and a clear statement of the problem (export_text fails when only one feature is present). It\u2019s straightforward to reproduce and understand the expected behavior, so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-14067": {
        "input_bounce": false,
        "trace": "The issue gives a clear description of the problem (ARDRegression suddenly produces much larger coefficient errors under SciPy 1.3.0), provides exact environment versions, minimal code to reproduce on a single seed, scripts to batch-test over 1,000 seeds, and sample outputs (including histograms and summary statistics). This is more than enough to attempt to reproduce and debug the regression, making the task well-specified."
    },
    "scikit-learn__scikit-learn-14087": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, exact error traceback, expected vs. actual behavior, and environment details. It\u2019s clear what\u2019s happening and what the desired outcome is, making it well-specified for a bug fix."
    },
    "scikit-learn__scikit-learn-14114": {
        "input_bounce": true,
        "trace": "The issue pinpoints a runtime error when using AdaBoostClassifier with algorithm='SAMME' and a base estimator lacking predict_proba, but it does not define the expected behavior or desired fix. It doesn\u2019t specify whether AdaBoost should: 1) require probability-enabled estimators only, 2) derive probabilities from predict, 3) raise a clearer error, or 4) adjust documentation. Without a clear success criterion, it\u2019s too ambiguous to implement a solution."
    },
    "scikit-learn__scikit-learn-14141": {
        "input_bounce": false,
        "trace": "The request clearly identifies a missing dependency (joblib) in the show_versions utility (or issue template) for scikit-learn versions >0.20. While it doesn\u2019t spell out the exact file paths or code snippets to update, it\u2019s straightforward to locate the show_versions implementation and add joblib to the reported dependencies. This makes a reasonable interpretation possible without further clarification."
    },
    "scikit-learn__scikit-learn-14237": {
        "input_bounce": false,
        "trace": "The issue comes with a minimal reproducible example, clear description of expected vs. actual behavior, exact code pointers, and environment details. It\u2019s straightforward to understand the bug and implement a fix, so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-14450": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible snippet, clearly identifies the root cause (constant column in Y causing a misleading \u2018contains nan\u2019 error), and implicitly asks for a more appropriate check/error message for zero\u2010variance features. It doesn\u2019t spell out exact wording of the new error or whether to drop such columns vs. error out, but there\u2019s a clear, reasonable interpretation for a fix."
    },
    "scikit-learn__scikit-learn-14464": {
        "input_bounce": true,
        "trace": "The report clearly shows a minimal reproducible example and the discrepancy between expected and actual behavior when using sklearn.clone. However, it never clearly states the intended API change or the correct fix\u2014should clone copy every attribute, special-case nested dicts, or just warn users? The desired resolution is ambiguous, so there's not enough specification to begin coding a patch."
    },
    "scikit-learn__scikit-learn-14496": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug scenario, pinpoints the lines of code (l439 & l440) where min_samples remains a float, shows the resulting TypeError, and even proposes a minimal change (casting with int(round(...))) to fix it. All necessary details are present for a straightforward implementation and test, making it WELL_SPECIFIED."
    },
    "scikit-learn__scikit-learn-14544": {
        "input_bounce": true,
        "trace": "The issue is seeking a design discussion (an RFC) around ColumnTransformer\u2019s API and behavior (input validation, handling extra columns, n_features_in_) rather than specifying clear, implementable requirements or acceptance criteria. It poses questions rather than defining a concrete change, making it too vague for a straightforward implementation task."
    },
    "scikit-learn__scikit-learn-14591": {
        "input_bounce": false,
        "trace": "The user clearly describes the problem: LassoCV\u2019s \u201cprecompute=True\u201d option is ignored for the final fit because the code unconditionally sets `model.precompute = False`. They show where in the code this happens, demonstrate the performance impact, and point out exactly what behavior they expect (to honor the user\u2019s `precompute` setting for the final fit/Gram-matrix precomputation). That gives enough detail to propose a concrete fix: preserve `precompute` instead of forcing it to False (e.g. remove or guard that assignment)."
    },
    "scikit-learn__scikit-learn-14629": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (AttributeError due to missing classes_ on MultiOutputClassifier), points to the offending code lines, provides minimal reproducible example, expected vs actual behavior, and environment details. A patch can be directly targeted at cross_val_predict to handle MultiOutputClassifier\u2019s per-estimator classes_."
    },
    "scikit-learn__scikit-learn-14710": {
        "input_bounce": false,
        "trace": "The bug report contains a minimal reproducible example, clear error traceback, description of expected vs. actual behavior, and even a suggested patch with file/line context. A fix can be directly implemented and verified. Therefore the issue is well-specified."
    },
    "scikit-learn__scikit-learn-14732": {
        "input_bounce": true,
        "trace": "This issue is more of a question (\u201cis it design or unimplemented?\u201d) than a precise feature request. It doesn\u2019t detail the desired API, expected behavior for multioutput (e.g. averaging options), or concrete steps for implementation. Without that, it\u2019s unclear what a successful solution entails."
    },
    "scikit-learn__scikit-learn-14764": {
        "input_bounce": false,
        "trace": "The issue clearly identifies exactly where in the code (samples_generator.py lines 165 and 171) the boolean test on `weights` is failing for numpy arrays, provides both reproduction steps and the exception, and even supplies the precise replacement logic (using `all(weights)`) and docstring edits. There\u2019s no ambiguity about what needs to change or why, so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-14806": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current and desired behavior, provides code examples illustrating both, points to the exact lines in the source where the behavior is enforced, and even suggests an API change (adding a parameter). It\u2019s unambiguous what needs to be done and how to verify it."
    },
    "scikit-learn__scikit-learn-14869": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates a reproducible bug (using categorical_crossentropy with binary targets yields wrong predictions) and specifies the expected behavior (either support binary cases or raise an error). While it leaves the choice of approach (generalization vs. explicit error) open, the fault and desired outcome are well\u2010defined, so it\u2019s reasonable to draft a fix or an API guard."
    },
    "scikit-learn__scikit-learn-14878": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates a bug (an AttributeError when SimpleImputer tries to access .dtype on a DataFrame) and shows where in the code it happens. While it doesn\u2019t spell out exactly how the API should behave on DataFrame inputs (e.g. whether to reject non-numeric columns outright or to coerce to numpy before checking), there is a straightforward, sensible fix: detect pandas DataFrames, pull out their dtypes correctly (using .dtypes or converting to numpy), and then raise the existing ValueError for non-numeric data as intended. The scope is narrow, the location in code is pointed out, and the expected behavior (properly rejecting object columns with a ValueError rather than crashing) is clear enough to implement a solution."
    },
    "scikit-learn__scikit-learn-14890": {
        "input_bounce": false,
        "trace": "The issue clearly states the problem (TransformedTargetRegressor cannot accept sample_weight when its regressor is a Pipeline), provides a minimal reproducible example, shows the expected vs. actual behavior, and lists the relevant versions. There\u2019s no ambiguity about what needs to be fixed (forwarding sample_weight into a Pipeline\u2019s final estimator without causing the split error)."
    },
    "scikit-learn__scikit-learn-14894": {
        "input_bounce": false,
        "trace": "The ticket includes a clear description of the bug, minimal code to reproduce it, expected vs. actual behavior, and environment details. A developer could directly implement a guard for empty sparse support_vectors_ and return an empty dual_coef_ to satisfy the expected result."
    },
    "scikit-learn__scikit-learn-14908": {
        "input_bounce": false,
        "trace": "The issue clearly states where to change the error message (in DummyClassifier.fit), shows the current exception and the desired enhanced message with both the provided constant and valid classes. It includes a code snippet, expected output, and context. This is sufficient to implement a concrete fix."
    },
    "scikit-learn__scikit-learn-14983": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (missing __repr__ override), shows how to reproduce it, and specifies the exact expected output. A developer can locate the classes in model_selection/_split.py and implement __repr__ accordingly. The requirements are unambiguous and actionable."
    },
    "scikit-learn__scikit-learn-15028": {
        "input_bounce": false,
        "trace": "The issue clearly states what to change (deprecate/remove the public `classes_` attribute on DecisionTreeRegressor by renaming it to `_classes`, remove it from the docstring, and add a corresponding test) but leaves some implementation details (exact deprecation warning style and target version, code locations) to the contributor. It\u2019s specific enough to act on while still requiring some interpretation, so it\u2019s REASONABLY_SPECIFIED."
    },
    "scikit-learn__scikit-learn-15084": {
        "input_bounce": false,
        "trace": "The issue comes with complete repro code, environment details, and the exact error in VotingClassifier\u2019s hard voting when mixing regressors and a classifier. It\u2019s clear that using LinearRegression and Ridge (continuous outputs) in a hard-voting classifier causes the TypeError in np.bincount, and that the user must either use classification estimators (e.g. RidgeClassifier/LogisticRegression variants) or switch to VotingRegressor. You can directly propose the fix. Hence it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-15086": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the incorrect behavior, a minimal reproducible example, the environment details, and the expected vs. actual outputs. A developer can immediately reproduce the bug and know what to fix, so the issue is well-specified."
    },
    "scikit-learn__scikit-learn-15094": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, expected vs. actual outputs, environment details, and a clear ask (adding a dtype parameter or a workaround to preserve float32). The scope and requirements are unambiguous, so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-15096": {
        "input_bounce": false,
        "trace": "The report clearly describes the unwanted behavior (fitted estimators ending up in cv_results_[\"params\"]), the context (using Pipeline with estimator parameters, n_jobs=1), the expected behavior, and even a hypothesis about the missing cloning. It\u2019s straightforward to locate the GridSearchCV code handling parameter storage and adjust it (e.g. clone params or strip out estimator objects before saving)."
    },
    "scikit-learn__scikit-learn-15100": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact expected vs. actual behavior, and a clear description of the root cause (input already in NFKD form skips accent\u2010stripping). It\u2019s straightforward to implement and verify a fix to always strip combining diacritics regardless of the input\u2019s normalization state. Thus the issue is WELL_SPECIFIED."
    },
    "scikit-learn__scikit-learn-15138": {
        "input_bounce": false,
        "trace": "The issue clearly states what feature to add, including parameter name, default behavior, description, and even points to an existing implementation for reference. An engineer can go ahead and add the boolean option to the StackingClassifier API and update the fit logic accordingly without needing further clarification."
    },
    "scikit-learn__scikit-learn-15393": {
        "input_bounce": false,
        "trace": "The issue pinpoints a specific bug in IterativeImputer\u2019s logic for \u2018ascending\u2019 vs \u2018descending\u2019 ordering, provides the exact file and line reference, and clearly states that the two modes are swapped. It\u2019s immediately clear that the fix is to invert the current conditional or swapping logic to match the documented behavior. No further clarification is needed to implement and test the correct order."
    },
    "scikit-learn__scikit-learn-15495": {
        "input_bounce": false,
        "trace": "The issue clearly states the refactoring goal (replace custom sample_weight checks with _check_sample_weight), provides a concrete list of estimator classes/methods to update, and even gives pointers on locating each class. There\u2019s little ambiguity about what needs to be done, so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-15512": {
        "input_bounce": false,
        "trace": "The report reproduces the mismatch between the documented behavior and the actual output, includes minimal code to reproduce it, states expected vs. actual results unambiguously, and even specifies the desired fix (either correct the behavior to return empty array/-1 labels on non\u2010convergence or add a \u2018converged_\u2019 flag). All necessary details (versions, exact API calls) are provided. This is WELL_SPECIFIED."
    },
    "scikit-learn__scikit-learn-15524": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact error message, expected vs. actual behavior, and environment details. It clearly describes the bug (nested CV with precomputed metric) and what a correct outcome looks like, making it straightforward to attempt a fix."
    },
    "scikit-learn__scikit-learn-15625": {
        "input_bounce": false,
        "trace": "The request clearly states what needs to be done (add a normalize parameter to confusion_matrix for direct normalization) and even references existing similar functionality for guidance. While it doesn\u2019t enumerate every implementation detail (like exact normalization modes), there\u2019s a straightforward, sensible way to proceed by mirroring the normalize behavior in other metrics. Thus it\u2019s reasonably specified for a first implementation."
    },
    "scikit-learn__scikit-learn-24145": {
        "input_bounce": false,
        "trace": "The request clearly defines the desired behavior (adding a `sparse=True` option to return a scipy sparse matrix), shows the expected usage, and even points to the SciPy function to leverage. While minor details (choice of sparse format, version guarding) will need to be decided, there\u2019s a clear, implementable path."
    },
    "scikit-learn__scikit-learn-24677": {
        "input_bounce": true,
        "trace": "The description is just a high-level PR stub that references fixing silhouette_samples on sparse matrices and mentions two vague failure modes, but it doesn\u2019t specify where in the code to make changes, how the functions should behave, or provide examples/tests of the failures or expected behavior. There isn\u2019t enough detail to know what a correct solution looks like without further investigation into issue #18524 or the codebase. Thus it\u2019s too ambiguous for a direct implementation."
    },
    "scikit-learn__scikit-learn-25102": {
        "input_bounce": false,
        "trace": "The issue clearly describes the desired feature (an option to preserve input dtypes in pandas DataFrame outputs), gives a minimal reproducible example, and even sketches how to extend the existing SetOutputMixin API. While some implementation details (e.g. naming of the new flag, edge\u2010cases across various transformers) will need filling in, there\u2019s a sensible interpretation and path forward. Thus it\u2019s reasonably specified."
    },
    "scikit-learn__scikit-learn-25232": {
        "input_bounce": false,
        "trace": "The request clearly states the missing feature (a fill_value parameter in IterativeImputer), where it should apply (only when initial_strategy='constant'), and even suggests allowing np.nan. An engineer can straightforwardly update the __init__ signature, pass fill_value through to the underlying SimpleImputer, update docs, and add tests. This is precise enough to implement without further clarification."
    },
    "scikit-learn__scikit-learn-25363": {
        "input_bounce": true,
        "trace": "The description lacks details on what \u201cexplicit configuration\u201d entails, where and how to pass it into `delayed`, what the warning should look like, and what existing behavior is broken. It simply references other issues without summarizing their content or expected behavior, making it unclear what changes are required for a successful fix."
    },
    "scikit-learn__scikit-learn-25500": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, includes a minimal reproducible example, shows expected vs. actual behavior, and pinpoints where the DataFrame output needs to be coerced to a NumPy array in `_CalibratedClassifier.predict_proba`. There\u2019s enough detail to implement a fix (e.g. converting the pandas output to numpy before assignment)."
    },
    "scikit-learn__scikit-learn-25570": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, provides minimal reproducible code, shows expected vs actual behavior, and specifies that empty transformers should be ignored when using pandas output. All required details are present."
    },
    "scikit-learn__scikit-learn-25601": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, provides a minimal repro, expected versus actual behavior, and even suggests acceptable remediation strategies (either force at least one sample or raise a descriptive error). With knowledge of where the empty-index problem occurs in the bootstrap sampling code, an implementer can write a guard to check for zero-sample draws and raise a ValueError. Thus it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-25694": {
        "input_bounce": false,
        "trace": "The report includes a concise description of the bug, a minimal reproducible example, the exact error traceback, the expected vs actual behavior, and environment versions. It\u2019s clear what is going wrong (using early_stopping with partial_fit) and what a successful resolution would look like (either graceful handling or full support), so it is well-specified."
    },
    "scikit-learn__scikit-learn-25697": {
        "input_bounce": false,
        "trace": "The request clearly states which parameters in which classes need to be renamed and deprecated, and it\u2019s straightforward to follow existing deprecation patterns elsewhere in the codebase (e.g., other estimators using max_iter). The scope and required changes are unambiguous."
    },
    "scikit-learn__scikit-learn-25744": {
        "input_bounce": false,
        "trace": "The issue clearly describes the buggy behavior (allowing min_samples_split=1 when it should raise), provides repro code, expected vs actual results, relevant parameter constraints in the source, and environment details. It\u2019s straightforward to locate the parameter validation in DecisionTreeClassifier and add/fix the check for min_samples_split >= 2 when it\u2019s an integer. Thus it\u2019s well-specified for implementation."
    },
    "scikit-learn__scikit-learn-25747": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example (with code and environment), a clear description of the failure (ValueError on index length mismatch), and a precise expectation (\u201cNo error is thrown when using pandas output\u201d). A developer can reason about how to change the pandas output wrapper (or FeatureUnion logic) so that mismatched index lengths don\u2019t blow up. This is sufficient to drive a concrete PR."
    },
    "scikit-learn__scikit-learn-25752": {
        "input_bounce": false,
        "trace": "The issue clearly states the problem (sample_weight is ignored during initialization), provides minimal reproducible code, expected vs. actual output, and environment details. It\u2019s unambiguous what to change\u2014use sample_weight in the KMeans initializer\u2014so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-25805": {
        "input_bounce": true,
        "trace": "The report lays out user code and an error, but it\u2019s not clear whether the intended fix is to change user usage (it looks like they swapped X and y arrays) or to adjust how CalibratedClassifierCV slices fit_params like eval_set. The issue doesn\u2019t specify a concrete desired behavior or location for a code change, so it\u2019s ambiguous what a proper fix would be."
    },
    "scikit-learn__scikit-learn-25931": {
        "input_bounce": false,
        "trace": "The issue contains a clear description of the problem, minimal reproducible code, expected vs. actual behavior, environment details, and even a pointer to the relevant code path. It is sufficiently specified to start working on a fix."
    },
    "scikit-learn__scikit-learn-25969": {
        "input_bounce": true,
        "trace": "The description is essentially a high-level PR roadmap rather than a concrete, self-contained issue. It lists intentions (e.g. add a mixin, remove a file, implement helper functions across several modules) without specifying exactly what code changes are required, how the API should behave, or what tests must pass. There\u2019s no clear scope or acceptance criteria, making it too vague to implement directly."
    },
    "scikit-learn__scikit-learn-25973": {
        "input_bounce": false,
        "trace": "The report provides a minimal reproducible example, the exact error and stack trace, and the expected vs actual behavior. The cv argument behavior is clearly described and the user gives version info. It\u2019s straightforward to identify the misuse/bug (passing a generator of splits) and propose a fix or documentation update. This makes the issue well-specified."
    },
    "scikit-learn__scikit-learn-26194": {
        "input_bounce": false,
        "trace": "The issue clearly states the problem (roc_curve sometimes returns thresholds >1 when passed probabilities), shows a minimal failing test, points to the offending code snippet, and even suggests a possible workaround (clipping). While it doesn\u2019t prescribe an exact fix, there\u2019s a sensible path forward for a PR (add a check on input range or adjust the +1 behavior for probability estimates and add the suggested test), so it\u2019s reasonably specified."
    },
    "scikit-learn__scikit-learn-26242": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, provides repro steps, shows expected vs actual behavior, and even hints at the specific location to change (adding None to _parameter_constraints). A solution is straightforward to implement."
    },
    "scikit-learn__scikit-learn-26289": {
        "input_bounce": false,
        "trace": "The issue includes a clear code snippet, expected behavior (export_text should accept feature_names like export_graphviz), and the exact error message with stack trace. It\u2019s obvious what\u2019s going wrong (an array truth-value check) and how a fix would look, so it\u2019s well-specified."
    },
    "scikit-learn__scikit-learn-26318": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the mismatch between the documented and actual behavior of `warm_start` in BaseForest, points to the specific doc and code locations, and even suggests two concrete ways to resolve it (update docs or update behavior). There is no ambiguity about what needs to be fixed."
    },
    "scikit-learn__scikit-learn-26323": {
        "input_bounce": false,
        "trace": "The report clearly states what\u2019s wrong (set_output doesn\u2019t apply to the remainder estimator), provides minimal reproducible code, shows expected vs. actual output, and even points to the exact location in the source. A PR can be drafted to include the remainder in set_output()."
    },
    "scikit-learn__scikit-learn-26400": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, provides a minimal reproducible example, shows the expected vs actual behavior, and pinpoints where the error occurs. The requested outcome (either preserve all-NaN columns or raise a descriptive error) is unambiguous. This is well-specified and actionable."
    },
    "scikit-learn__scikit-learn-26644": {
        "input_bounce": false,
        "trace": "The request clearly identifies which function to change (inspect.partial_dependence), what new parameter to add (sample_weight), and how it should alter behavior (use weighted averages instead of arithmetic means for aggregated curves). The scope and intent are well defined, though implementation details (e.g. argument validation, test cases) would need fleshing out. Overall, it\u2019s a sensible, actionable feature request."
    },
    "scikit-learn__scikit-learn-7760": {
        "input_bounce": true,
        "trace": "The issue outlines a high-level problem (current common tests do not catch improper parameter handling in estimators) but does not specify which additional tests should be written or how exactly to detect the misuse. There are no concrete failure cases, test snippets, or expected behaviors defined. Key details (where to hook in check_estimator, what exact assertions to add) are left unspecified, making it unclear how to craft a meaningful solution without further clarification."
    },
    "scikit-learn__scikit-learn-8554": {
        "input_bounce": false,
        "trace": "The report clearly states the discrepancy (doc vs. behavior), shows the exact error, points to the offending `check_array` calls in specific files/lines, and even suggests the concrete change (add `accept_sparse=True`), so a developer can immediately propose a PR. This makes the issue WELL_SPECIFIED."
    },
    "scikit-learn__scikit-learn-9274": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (using maxfun instead of maxiter), provides reproduction code, expected vs. actual behavior, and even a starting patch. The scope and fix are unambiguous and actionable."
    },
    "scikit-learn__scikit-learn-9288": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, clear expected vs actual results, environment details, and a precise description of the problem. A developer can write a test case and trace how parallel jobs affect RNG and inertia calculation. This is sufficiently detailed for a meaningful attempt at a solution."
    },
    "scikit-learn__scikit-learn-9775": {
        "input_bounce": false,
        "trace": "The request clearly identifies the function to change (sklearn.manifold._t_sne.trustworthiness), the behavior to replace (a boolean precomputed flag) and the desired new API (a metric parameter that accepts 'precomputed' or custom callables). There is a straightforward analogy to existing scikit-learn patterns (e.g. in pairwise and neighbors modules) for implementing this. While minor details (deprecation timing, exact signature, tests) would need filling in, the core requirement is clear and actionable."
    },
    "sphinx-doc__sphinx-10021": {
        "input_bounce": false,
        "trace": "The report clearly states the configuration (`autodoc_unqualified_typehints = True` with `autodoc_typehints = \"description\"`), the mismatched behavior (type hints in the info-field-list remain fully qualified), and the expected outcome (they should be shortened). While it lacks a full minimal example, the bug and desired fix are precise enough for a developer familiar with Sphinx\u2019s autodoc to implement and verify the change."
    },
    "sphinx-doc__sphinx-10067": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (no language setting in conf.py), the accessibility impact, the existing sphinx-quickstart prompt for language, and the desired change (have quickstart write the chosen language into conf.py). The scope is well defined (modify quickstart template/logic), so it\u2019s actionable without further clarification."
    },
    "sphinx-doc__sphinx-10097": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (long option names overflowing the LaTeX index), provides a minimal reproducible snippet, environment details, and a screenshot. Although it omits an explicit \u201cexpected behavior\u201d statement, the desired outcome is obvious (the entry should wrap or break instead of overflowing). That makes it reasonably specified and actionable without further clarification."
    },
    "sphinx-doc__sphinx-10137": {
        "input_bounce": true,
        "trace": "The issue is more of a discussion/brainstorm than a concrete spec. It\u2019s unclear exactly what API or config should be provided, what behavior should be conditioned on, and how it should be exposed. There\u2019s not enough detail to implement a clear solution without further clarification."
    },
    "sphinx-doc__sphinx-10191": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the bug, minimal reproducible example (index.rst), exact commands to reproduce (make latexpdf), expected vs. actual output, environment details (OS, Python, Sphinx versions), and a screenshot. This is sufficient to begin diagnosing and fixing the issue."
    },
    "sphinx-doc__sphinx-10207": {
        "input_bounce": true,
        "trace": "The description actually bundles three distinct tickets (keyboard shortcut `/`, napoleon attribute formatting, and autodoc dict abbreviation) and never focuses on one. Even the first (\u201c/ focuses search\u201d) is only a brief feature request with no details on which templates or JS to update, what selectors to use, or how to toggle it. Because the scope and requirements are unclear and muddled across multiple issues, it\u2019s too vague to implement without further clarification."
    },
    "sphinx-doc__sphinx-10323": {
        "input_bounce": false,
        "trace": "The report clearly states the problem (literalinclude\u2019s prepend text loses leading whitespace), gives a minimal repro (index.rst and pom.xml), shows actual vs expected output, and lists environment versions. That is everything needed to diagnose and fix the formatting behavior in Sphinx\u2019s literalinclude implementation."
    },
    "sphinx-doc__sphinx-10325": {
        "input_bounce": false,
        "trace": "The request clearly defines the current behavior (inherited-members applies to all base classes) and what\u2019s needed: allowing a comma-separated list of base class names to be passed to the inherited-members option so that members from only those classes are ignored. The two use cases are spelled out and the desired change to the Sphinx autodoc option is unambiguous, making this issue well-specified."
    },
    "sphinx-doc__sphinx-10435": {
        "input_bounce": false,
        "trace": "The report clearly describes the unwanted behavior (extra spaces around inline highlighted code in the LaTeX output), gives minimal reproduction steps, sample markup, and before/after screenshots, and implicitly states the desired outcome (no leading/trailing spaces). There\u2019s a clear target for code changes (the LaTeX writer\u2019s inline code template), so a developer can reasonably dive in and implement a fix without further clarifications."
    },
    "sphinx-doc__sphinx-10449": {
        "input_bounce": false,
        "trace": "The issue gives a minimal reproducible example, exact Sphinx config, steps to reproduce, expected vs. actual behavior, environment details, and even a demo build. It\u2019s clear what the bug is (return type shown for __init__ in autoclass when using autodoc_typehints=\"description\") and how to verify a fix. All necessary details are present."
    },
    "sphinx-doc__sphinx-10457": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (filter_meta_fields only removing the first meta field), provides a minimal reproduction case, the expected vs actual behavior, environment details (Sphinx versions, Python), and even points to the relevant function and commit. It\u2019s sufficiently detailed to write a test and patch."
    },
    "sphinx-doc__sphinx-10466": {
        "input_bounce": false,
        "trace": "The report clearly describes the duplication bug in generated .pot files, shows concrete examples, points to the exact code location, gives reproduction steps, environment details, and even a candidate fix. It\u2019s straightforward to implement and verify, so the issue is WELL_SPECIFIED."
    },
    "sphinx-doc__sphinx-10481": {
        "input_bounce": false,
        "trace": "The issue clearly describes the error scenario (language = None in conf.py causing a TypeError), shows the exact traceback, and states the desired behavior (treat None as 'en' and warn). An implementer familiar with the Sphinx config system knows where to catch and normalize this value. The scope and solution are unambiguous."
    },
    "sphinx-doc__sphinx-10492": {
        "input_bounce": false,
        "trace": "The report pinpoints the exact file and line range, shows the incorrect spellings, and states the expected text. A trivial fix (correcting the two typos) is all that\u2019s needed. This is clearly defined and implementable without further info."
    },
    "sphinx-doc__sphinx-10504": {
        "input_bounce": true,
        "trace": "The issue report provides a traceback and environment details but lacks any pinpointed cause or minimal reproduction steps beyond a generic Sphinx build. It doesn\u2019t identify which document, directive, or pattern is triggering the IndexError, so it\u2019s unclear what needs to be fixed. A meaningful solution would require more specifics (e.g., the problematic source file or code snippet)."
    },
    "sphinx-doc__sphinx-10551": {
        "input_bounce": false,
        "trace": "The issue clearly describes the unwanted behavior (a space between the minus sign and digit in default parameter values), provides multiple real-world examples, and points to potential scope (Sphinx vs the PyData theme). While it lacks a minimal repro and exact versions, there\u2019s enough detail to reproduce the bug and identify its root cause. Therefore it\u2019s reasonably specified."
    },
    "sphinx-doc__sphinx-10614": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, provides a minimal reproducible example archive, step-by-step repro instructions, sample output vs expected output, environment details (OS, Python, Sphinx versions), and the root cause hypothesis. A developer can reproduce and fix it without missing information."
    },
    "sphinx-doc__sphinx-10673": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current warning when users include genindex, modindex, and search in a toctree and shows the exact directive and errors. The desired behavior is also unambiguous: allow those special pages to be listed without warning. While the implementation details (e.g. special-casing these names in the toctree transform) are left to the developer, the feature request itself is well defined and actionable."
    },
    "sphinx-doc__sphinx-10807": {
        "input_bounce": false,
        "trace": "The issue clearly describes the undesired behavior of automodule placing members under the last docstring header, provides a minimal reproducer, shows expected vs. actual output, and even proposes a concrete code diff. There\u2019s enough detail to implement and test a fix. "
    },
    "sphinx-doc__sphinx-11109": {
        "input_bounce": false,
        "trace": "The issue clearly lays out the desired annotation formatting transformations (PEP 604 syntax for Union/Optional, stripping Literal and syntax\u2010highlighting constants) and even points to an existing AST\u2010based implementation in the tensorstore docs. While it doesn\u2019t prescribe exact config\u2010option names or API details, there\u2019s a straightforward, sensible interpretation and path to implementation, so the spec is reasonably complete for getting started."
    },
    "sphinx-doc__sphinx-11192": {
        "input_bounce": false,
        "trace": "The report clearly describes the regression (parallel builds produce a truncated search index in 6.1.0+), gives exact repro steps, shows the working vs. failing command, includes environment details, and even links to a minimal example repo. A developer can reproduce the issue and begin diagnosing it without further clarification."
    },
    "sphinx-doc__sphinx-11266": {
        "input_bounce": false,
        "trace": "The report clearly states what\u2019s wrong (the missing space before the colon in the French \u201cVoir aussi\u201d heading), how to reproduce it, and even points to the commit that introduced the change. A patch simply needs to adjust the French localization or LaTeX writer to insert the proper space before the colon. This is sufficient to implement and verify a fix."
    },
    "sphinx-doc__sphinx-11311": {
        "input_bounce": false,
        "trace": "The issue clearly states the current behavior and its drawbacks, and it proposes concrete changes: auto-registering subclasses of desc_sig_element via __init_subclass__, enhancing the fallback transform to carry over a _sig_node_type attribute, and defining how custom translators should be detected and handled. While some implementation details (e.g. exact error conditions or integration hooks) are left to the implementer, the overall feature scope and mechanics are well laid out and can be turned into a PR without further clarification."
    },
    "sphinx-doc__sphinx-11312": {
        "input_bounce": false,
        "trace": "The report clearly states the problem (non\u2010deterministic ordering of nested sets in Sphinx\u2019s object_description), shows examples of the broken output, and points to the relevant function in the codebase. While it doesn\u2019t fully diagnose the root cause or provide a repro test case, there is a clear and actionable fix\u2014always sort set elements even when they appear inside other collections\u2014so a PR can be written against util.inspect.object_description with reasonable confidence."
    },
    "sphinx-doc__sphinx-11316": {
        "input_bounce": false,
        "trace": "The issue clearly describes the specific warning ('Inline interpreted text or phrase reference start-string without end-string') triggered by Sphinx Napoleon when a dataclass field docstring\u2019s first line contains a reference, provides minimal reproducible examples (one failing, one passing), and lists environment and extensions. It is sufficiently detailed to attempt a fix."
    },
    "sphinx-doc__sphinx-11445": {
        "input_bounce": false,
        "trace": "The bug report clearly describes the problem, gives precise reproduction steps, shows both the faulty and the expected behavior, and includes environment details. It\u2019s straightforward to understand what needs to be fixed: headings starting with a domain directive should render correctly and appear in the toctree even when rst_prolog is set."
    },
    "sphinx-doc__sphinx-11489": {
        "input_bounce": false,
        "trace": "The request clearly states the problem (anchor checks failing on JS-driven pages), proposes a specific configuration option (`linkcheck_anchors_disabled`) with example usage, and describes expected behavior (skip anchor validation for matching URLs but still check page existence). This gives a concrete requirement and enough detail for implementation."
    },
    "sphinx-doc__sphinx-11510": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example (conf.py, RST files, extension code), clear reproduction steps, actual vs expected output, environment details (Sphinx/Python/OS), and links for context. It\u2019s clear what\u2019s wrong and what the fix should achieve. A developer can jump in and write or adjust the Sphinx hook to propagate edits on included files to the final output."
    },
    "sphinx-doc__sphinx-11550": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, provides minimal reproducible code and config, shows the exception, and gives environment details. There\u2019s a specific trigger (multiline lambda in a property with autodoc_preserve_defaults) and obvious expected behavior (no exception). A contributor can begin a meaningful fix immediately."
    },
    "sphinx-doc__sphinx-7234": {
        "input_bounce": true,
        "trace": "The issue suggests adding support for detecting and listing @functools.singledispatch overloads in documentation, but it doesn\u2019t specify the context (which documentation tool or codebase), the desired output format, or how the links should be generated. Without knowing the environment, existing plugin architecture, or user expectations, there\u2019s too much ambiguity to implement a solution."
    },
    "sphinx-doc__sphinx-7268": {
        "input_bounce": true,
        "trace": "The issue only states that the sphinx.ext.autodoc.typehints extension should be auto-loaded by autodoc once \"typehints have matured,\" without specifying any acceptance criteria (e.g. version thresholds, config options, or exact loading behavior). It\u2019s unclear when and how this should happen, so the task is too underspecified for a direct implementation."
    },
    "sphinx-doc__sphinx-7305": {
        "input_bounce": false,
        "trace": "The report clearly reproduces the bug (Sphinx fails to parse default values using the power operator), shows minimal repro, environment, and error messages. While the \u201cExpected behavior\u201d section is left blank, it\u2019s reasonably inferred that Sphinx should accept BinOp (`2**4`) in default values when building the arg list. The scope of work is clear\u2014add support for parsing binary operations in the arglist parser\u2014so it\u2019s sufficiently specified for an attempt at a fix."
    },
    "sphinx-doc__sphinx-7350": {
        "input_bounce": false,
        "trace": "The report clearly states the buggy behavior (the :noindex: option being ignored for Attributes), provides minimal reproducible example code, the expected behavior (no entries in the index), and the environment setup. A developer can reproduce and fix the directive to honor the :noindex: flag. Thus it is well-specified."
    },
    "sphinx-doc__sphinx-7351": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, gives a minimal reproducible example (index.rst, a.md, a.rst), details the unexpected versus expected behavior, and even suggests how the solution should work (configurable extension-preference or at least a warning). Environment and context are provided, so a developer can confidently start coding a fix. It\u2019s therefore WELL_SPECIFIED."
    },
    "sphinx-doc__sphinx-7356": {
        "input_bounce": false,
        "trace": "The issue clearly describes what regressed (Python function anchors switched from underscore to dash), how to reproduce it, and what the expected behavior should be (preserve the old underscore-based anchors to avoid breaking existing links). While it doesn\u2019t prescribe the exact implementation details (e.g. dual-anchor generation or redirect logic), it\u2019s straightforward to interpret what a suitable fix would need to do, so it\u2019s reasonably specified."
    },
    "sphinx-doc__sphinx-7374": {
        "input_bounce": true,
        "trace": "The report clearly describes that Python domain anchors changed from underscores to dashes and that existing links now break, but it doesn\u2019t specify the desired remediation (e.g. whether to restore the old style, add aliases, make it configurable, etc.). There\u2019s enough context to know roughly what needs doing, but critical details about the intended solution are missing, making it ambiguous. Therefore it\u2019s too vague for a direct implementation."
    },
    "sphinx-doc__sphinx-7380": {
        "input_bounce": false,
        "trace": "The report includes a clear bug description, minimal reproducible example, steps to reproduce, expected vs. actual behavior, environment details, and an example repository. It\u2019s straightforward to reproduce and diagnose, so the issue is well-specified."
    },
    "sphinx-doc__sphinx-7395": {
        "input_bounce": true,
        "trace": "The issue clearly describes an inconsistency between two directives\u2019 index entry outputs, but it doesn\u2019t specify which style is the \u201ccorrect\u201d one or how exactly they should be unified (parentheses placement, linking behavior, single vs. multi-line, etc.). There\u2019s no explicit desired output format or clear implementation path, so the requirements are ambiguous."
    },
    "sphinx-doc__sphinx-7440": {
        "input_bounce": false,
        "trace": "The report clearly shows a Sphinx \u201cduplicate term\u201d error, pinpoints the glossary file and line range, and gives repro steps. While it doesn\u2019t mandate exactly whether to drop or rename one of the two \u2018mysql\u2019 entries (or alter Sphinx\u2019s case-sensitivity), it\u2019s evident what must be done: resolve the duplicate by choosing one entry or making them case-distinct. You can open doc/glossary.rst at the given lines, inspect the two definitions, and apply the needed change. This is sufficiently clear to begin work."
    },
    "sphinx-doc__sphinx-7454": {
        "input_bounce": false,
        "trace": "The report clearly describes the behavior difference, provides a minimal repro with exact steps and sample files, shows the undesired and desired outputs, and states the expected behavior. There\u2019s no ambiguity about what needs to change: ensure that `None` in type hints is linked in both \u2018signature\u2019 and \u2018description\u2019 modes. This is enough for a straightforward fix."
    },
    "sphinx-doc__sphinx-7462": {
        "input_bounce": false,
        "trace": "The report gives a clear reproduction case (Tuple[()]), full stack trace, expected behavior, environment details, Sphinx version, and even a minimal snippet/project link. A developer can write a fix that guards against empty args in unparse()."
    },
    "sphinx-doc__sphinx-7578": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the failure, the exact warning message, the commit where it regressed, and reproducible steps (clone sphinx-gallery, install, cd to tinybuild, make). Even if the root cause isn\u2019t known yet, it\u2019s straightforward to reproduce the bug, see the exact failure, and begin diagnosing or fixing it. There\u2019s a minimal test suite to validate the fix, so this is well-specified enough for a meaningful solution attempt."
    },
    "sphinx-doc__sphinx-7590": {
        "input_bounce": false,
        "trace": "The report clearly identifies the broken feature (user-defined literal suffixes in the C++ domain), gives a minimal repro, points to the exact location in Sphinx\u2019s C++ parser, and requests that UDLs be supported. While low-level implementation details (e.g. the regex to change) aren\u2019t spelled out, the intent and scope are clear enough to start coding and add the feature. This makes it reasonably specified rather than vague or impossible."
    },
    "sphinx-doc__sphinx-7593": {
        "input_bounce": false,
        "trace": "The request clearly identifies the goal (split a :kbd: sequence into multiple <kbd> tags), gives examples of desired output, and cites prior discussion. However it leaves open details (e.g. whether you wrap inner <kbd> items inside a final parent <kbd>, how to configure this behavior, what splitting rules to use exactly). Those gaps can be reasonably filled by an implementer, but the spec isn\u2019t fully nailed down, so it\u2019s REASONABLY_SPECIFIED."
    },
    "sphinx-doc__sphinx-7615": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, provides a minimal repro snippet, shows expected vs actual behavior, and includes environment details. It\u2019s straightforward to implement and test a fix in the Sphinx rendering code."
    },
    "sphinx-doc__sphinx-7670": {
        "input_bounce": true,
        "trace": "The request merely states \u201cadd support for C++20 requires clauses\u201d without specifying the target codebase (presumably a parser like Doxygen), providing example code, pointing out the current vs. expected behavior, or detailing how the feature should integrate with existing functionality. There isn\u2019t enough context to draft a meaningful PR."
    },
    "sphinx-doc__sphinx-7738": {
        "input_bounce": false,
        "trace": "The issue contains a clear description of the bug, minimal code to reproduce, explicit Sphinx config changes, exact commands to run, and the expected vs. actual behavior. A developer can directly attempt a fix from this information."
    },
    "sphinx-doc__sphinx-7748": {
        "input_bounce": true,
        "trace": "The report points out that only the first signature in a SWIG-generated docstring is picked up and requests support for multiple overloads, but it provides no concrete examples of the docstring format or the exact desired behavior in the generated docs. Without details on how signatures are formatted, parsed, and rendered or what the intended output should look like, there\u2019s too much ambiguity to start coding. More specifics are needed."
    },
    "sphinx-doc__sphinx-7757": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (defaults missing for positional-only args), provides a minimal repro, expected vs actual behavior, and environment details. A developer can directly locate and fix the code path rendering default values in Sphinx\u2019s Python domain."
    },
    "sphinx-doc__sphinx-7760": {
        "input_bounce": false,
        "trace": "The request clearly describes modifying the Sphinx \u201ccoverage\u201d builder to emit warnings (when coverage is missing) under a new config flag (e.g. `coverage_print_missing_as_warning`), so that a tox run with `-W` will fail on missing coverage. The location of the change (the Sphinx coverage extension), the desired behavior (warnings on missing items), and a proposed config name are all spelled out. While minor details (exact default value or log channel) can be sensibly inferred, the ticket gives enough information for a straightforward implementation."
    },
    "sphinx-doc__sphinx-7762": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the hardcoded header in linkcheck.py (with a direct link), describes the problem (GitHub\u2019s 406 response), and specifies the high\u2010level solution (make HTTP headers configurable). An implementer can design a conf.py option and hook it into the existing requests setup. This is precise enough for a meaningful PR."
    },
    "sphinx-doc__sphinx-7814": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, includes precise reproduction steps, environment details, expected behavior, example code, and even a proposed patch. It\u2019s straightforward to understand the desired fix and verify it, making it well-specified."
    },
    "sphinx-doc__sphinx-7859": {
        "input_bounce": false,
        "trace": "The report provides a clear reproduction recipe, the exact error, and where it fails in the Sphinx typehints extension. You can reasonably infer that the fix is to guard or default the missing \u2018module\u2019 attribute (e.g. use signature.get('module', None)) so that setting autodoc_typehints to \u201cdescription(s)\u201d no longer blows up. While the expected formatting outcome isn\u2019t spelled out in detail, it\u2019s enough information to craft and validate a patch."
    },
    "sphinx-doc__sphinx-7889": {
        "input_bounce": false,
        "trace": "The report gives a clear description of the error (TypeError in autodoc.mock._make_subclass when encountering TypeVar), steps to reproduce (clone repo, install deps, make html), expected behavior (docs build with generics), environment details, and even an attached log. This provides sufficient information to diagnose and implement a fix in Sphinx\u2019s autodoc mocking logic."
    },
    "sphinx-doc__sphinx-7906": {
        "input_bounce": false,
        "trace": "The report clearly shows the steps to reproduce, the actual vs. expected output, and the environment. It\u2019s unambiguous what behavior needs to change (retain IDs and permalinks even when `:noindex:` is used), so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-7910": {
        "input_bounce": false,
        "trace": "The report clearly describes the specific Sphinx configuration, the decorated-__init__ symptom, the commit that introduced the break, the exact line where the lookup fails (using obj.__globals__), and why that fails for wrapped functions. There\u2019s a concrete root cause and desired behavior, so a developer can jump in and propose a fix (e.g. follow __wrapped__ to recover the real function\u2019s globals)."
    },
    "sphinx-doc__sphinx-7930": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the bug (a dataclass type link missing under nitpicky mode), steps to reproduce against a minimal example project, expected behavior, environment details, and version range for regression. That is enough to attempt a fix."
    },
    "sphinx-doc__sphinx-7961": {
        "input_bounce": true,
        "trace": "The issue is simply a high-level feature request (\u201cSupport MathJax 3.0\u201d) without any acceptance criteria, scope definition, or concrete pointers to what modifications are required in the Sphinx codebase. There\u2019s no specification of config changes, compatibility guarantees, or testing strategy. As written it\u2019s a discussion starter rather than a well\u2010scoped ticket for implementation."
    },
    "sphinx-doc__sphinx-7975": {
        "input_bounce": false,
        "trace": "The issue clearly describes a bug in how symbol entries are split into two \"Symbols\" sections in the HTML index (one before and one after the letter entries), both sharing the same anchor so that the second link is broken. The desired outcome is implicit\u2014treat all symbol entries as a single section with a unique anchor\u2014so while implementation details and context (e.g. code snippets, version) are missing, the high-level problem and expected fix are clear enough for a developer to proceed. "
    },
    "sphinx-doc__sphinx-7985": {
        "input_bounce": false,
        "trace": "This is a clear feature request\u2014linkcheck should also validate local (internal) targets\u2014but it leaves out implementation details (e.g. what exactly counts as \u201clocal,\u201d how to resolve paths/extensions, handling of anchors, Sphinx targets, etc.). A developer can sensibly interpret the goal (treat non-HTTP URLs or file references like external links and error on missing files), but will need to fill in those specifics when coding. Thus it\u2019s reasonably specified but not fully detailed."
    },
    "sphinx-doc__sphinx-8007": {
        "input_bounce": true,
        "trace": "The issue states a clear need (an option to preserve user-defined type aliases in generated docs rather than always unfolding them), but it provides no context about which autodoc tool or version is in use, where in the codebase this change would apply, or any API/implementation hints. Without knowing the specific documentation generator or code structure to target, it\u2019s ambiguous how to implement the feature or even locate the relevant code. Therefore it\u2019s too vague to begin a meaningful PR."
    },
    "sphinx-doc__sphinx-8035": {
        "input_bounce": false,
        "trace": "The request clearly defines the desired new behavior\u2014allowing a private-members option to take explicit names just like members\u2014and points to the existing pattern in Sphinx. While you\u2019d still need to refer to Sphinx\u2019s directive parsing to nail down exact syntax and edge\u2010cases, it\u2019s absolutely clear what to implement and how to validate it."
    },
    "sphinx-doc__sphinx-8037": {
        "input_bounce": false,
        "trace": "The report gives full context (versions, traceback), a minimal reproduction (clone repo + make html), the exact code snippet that trips the C++ parser, and the expected outcome. It\u2019s clear what is wrong and what needs fixing, so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-8056": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (rendering combined parameters as separate unnamed items), gives minimal reproducer code, shows the incorrect output, states expected behavior, and lists environment and extension setup. There\u2019s enough detail to attempt a fix in Sphinx/napoleon rendering. "
    },
    "sphinx-doc__sphinx-8075": {
        "input_bounce": false,
        "trace": "The reporter provides a concrete minimal reproducible example, shows the exact errors in HTML and LaTeX, and states clear goals (produce valid LaTeX, allow references to uncaptioned figures, improve the warning). While there is some room for interpretation around exactly how to handle uncaptioned figures (e.g. default caption text vs. configuration option), the scope and expected outcome are well defined enough to attempt a fix."
    },
    "sphinx-doc__sphinx-8117": {
        "input_bounce": false,
        "trace": "The issue clearly states what\u2019s wrong (a trailing attribute macro isn\u2019t recognized and causes a parse error), provides a minimal repro with exact Sphinx config and error message, describes expected behavior (ignore the macro), and even points at the relevant domain/config setting (`c_id_attributes`). That\u2019s sufficient to implement a fix in the C domain parser, so it\u2019s well specified."
    },
    "sphinx-doc__sphinx-8120": {
        "input_bounce": false,
        "trace": "The report gives a clear description of the bug, shows exact reproduction steps with a sample repo, specifies expected vs. actual behavior, and includes environment details. It\u2019s unambiguous what success looks like (the local .po/.mo override being used), so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-8125": {
        "input_bounce": false,
        "trace": "The user clearly describes the current behavior (Sphinx only offers names in __all__ to the autodoc-skip-member event) and the desired change (offer all members, not just those in __all__, and ideally flag which were excluded by __all__). The problem context and goal are understandable, though the specific API shape (what exact flag/property to add) would need to be worked out. There\u2019s enough here to start a PR, so it\u2019s REASONABLY_SPECIFIED."
    },
    "sphinx-doc__sphinx-8202": {
        "input_bounce": false,
        "trace": "The report provides a minimal, reproducible example (both Python and RST), clear reproduction steps, the exact warning message, expected behavior, and environment details. It\u2019s straightforward to reproduce and localize the bug, so the issue is well-specified."
    },
    "sphinx-doc__sphinx-8264": {
        "input_bounce": true,
        "trace": "The issue only provides a long Sphinx stack trace without any minimal reproducible example, sample config, or pointers to the problematic code/type hints. We cannot reproduce the error or know what annotation triggered __args__ to be a non\u2010iterable type. It\u2019s too vague to attempt a meaningful fix without further details."
    },
    "sphinx-doc__sphinx-8265": {
        "input_bounce": false,
        "trace": "The issue clearly describes a specific rendering bug in Sphinx/HTML docs (tuple default args losing parentheses), includes reproduction steps (Dockerfile), actual vs expected output, links to the project and docs, environment details, and a screenshot. There\u2019s no ambiguity about what needs fixing."
    },
    "sphinx-doc__sphinx-8269": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, steps to reproduce, actual vs expected behavior, and environment. A developer can immediately identify what to change in the linkcheck extension to distinguish HTTP errors from missing anchors."
    },
    "sphinx-doc__sphinx-8273": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior, the desired directory layout (man/man1, man/man3, etc.), and why it\u2019s needed. While implementation details (e.g. handling defaults or backwards\u2010compat flags) would need to be worked out, the core requirement is clear and actionable."
    },
    "sphinx-doc__sphinx-8278": {
        "input_bounce": false,
        "trace": "The report clearly describes the unexpected behavior (hex defaults being shown in decimal), provides minimal repro steps and code snippet, shows screenshots, and states the desired outcome. A developer can reproduce and implement a fix without further clarification."
    },
    "sphinx-doc__sphinx-8282": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear reproduction steps, the expected behavior, and environment details. There\u2019s no ambiguity about what needs fixing: autodoc_typehints should apply to overloaded functions just as it does to regular callables."
    },
    "sphinx-doc__sphinx-8284": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (all man pages in a single `man/` directory), the desired behavior (split by section into `man/man1`, `man/man3`, etc.), and even points out where Sphinx already tracks the section for each page via its config. There\u2019s enough detail to implement the change in the man builder (just create subdirectories based on the section field) and update docs/tests accordingly. No further clarification is needed, so it\u2019s WELL_SPECIFIED."
    },
    "sphinx-doc__sphinx-8435": {
        "input_bounce": false,
        "trace": "The report clearly states the current behavior, provides minimal reproducible example code (example.py, index.rst, conf.py), outlines the expected behavior, and includes environment details. A developer can reproduce the issue and implement or adjust autodoc_type_aliases for variables and attributes accordingly."
    },
    "sphinx-doc__sphinx-8459": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the problem, minimal reproducible example (types.py and conf.py), actual vs expected output, and environment details. It\u2019s straightforward to understand what change is needed to make autodoc_type_aliases apply when autodoc_typehints='description'."
    },
    "sphinx-doc__sphinx-8474": {
        "input_bounce": true,
        "trace": "The report simply notes a new warning after upgrading Sphinx and asks where numref logic changed, but gives no minimal repro, no example tables, and no config details. It\u2019s unclear what specific code paths or setup triggers it, so there isn\u2019t enough to jump in with a concrete fix."
    },
    "sphinx-doc__sphinx-8475": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (infinite redirect loops on HEAD requests), the desired behavior (fall back to GET when requests.TooManyRedirects is raised), and even points to where in the linkchecker code the except clause needs to be extended. That is sufficient to implement a focused bugfix."
    },
    "sphinx-doc__sphinx-8506": {
        "input_bounce": false,
        "trace": "The issue clearly describes the regression (Sphinx 3.2 rejecting an option:: string that earlier versions accepted), gives a concrete example, and states the desired behavior (accept arbitrary option strings rather than only a limited pattern). While it doesn\u2019t spell out exactly which code to change or include tests, there\u2019s a straightforward interpretation of what needs to be modified in Sphinx\u2019s option directive parser. Hence it\u2019s reasonably specified."
    },
    "sphinx-doc__sphinx-8509": {
        "input_bounce": false,
        "trace": "The request clearly states the needed change: switch the default `latex_engine` from platex to uplatex for Japanese documentation in Sphinx. There is sufficient context (version support, rationale) to make a concrete code change (adjust the default in the LaTeX builder when language is Japanese). While exact file locations aren\u2019t spelled out, the scope and goal are unambiguous."
    },
    "sphinx-doc__sphinx-8539": {
        "input_bounce": false,
        "trace": "The report includes minimal reproducible examples (config, source files, and tarball), clear reproduction steps, environment details, expected vs actual behavior, and context about related settings. It\u2019s detailed enough to implement and verify a fix."
    },
    "sphinx-doc__sphinx-8548": {
        "input_bounce": false,
        "trace": "The report clearly states the observed bug (inherited data members aren\u2019t included), the root cause (lookup only uses the current namespace, not base classes\u2019), and the expected behavior (autodoc inherited-members should include inherited attributes). While it lacks a code snippet or repro steps, it\u2019s sufficient for a Sphinx contributor familiar with autodoc to implement a fix. Thus it\u2019s reasonably specified."
    },
    "sphinx-doc__sphinx-8551": {
        "input_bounce": false,
        "trace": "The issue clearly describes a mismatched lookup behavior between implicit xrefs in :type:/:rtype: fields vs explicit roles, provides minimal reproducible RST, shows the exact warnings emitted, and states the expected behavior (use current-module-first resolution to avoid ambiguity). There\u2019s enough context and examples to write a reproducible test and patch the lookup logic in the Python domain. Hence it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-8552": {
        "input_bounce": false,
        "trace": "The issue clearly states the need to add support for the \u201cReceives\u201d section in the Napoleon NumpyDoc parser, points to the exact NumpyDoc guideline, and indicates it should mirror the existing \u201cYields\u201d behavior. While it doesn\u2019t give line-by-line instructions, the requirements are unambiguous and a reasonable implementation path exists by following the Yields support as a template."
    },
    "sphinx-doc__sphinx-8579": {
        "input_bounce": false,
        "trace": "This issue clearly describes the crash, provides full reproduction steps (clone, install, make linkcheck), shows the stack trace and environment details, and states the expected outcome. A developer can reproduce the error reliably and knows exactly what needs fixing (prevent the task_done()/queue errors), so it\u2019s well-specified for a solution attempt."
    },
    "sphinx-doc__sphinx-8593": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, provides a minimal repro with expected and actual behavior, and lists environment details. A developer can reproduce the issue and determine the needed fix in autodoc. Thus it is well-specified."
    },
    "sphinx-doc__sphinx-8595": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, gives minimal reproducible code, the exact Sphinx setup, and the expected vs. actual behavior. It\u2019s straightforward to implement autodoc support for an empty __all__ (skip all members) based on this description."
    },
    "sphinx-doc__sphinx-8599": {
        "input_bounce": false,
        "trace": "The issue clearly defines the feature request, desired configuration variables, their expected defaults, and usage examples. It\u2019s straightforward to implement: add two new HTML-based config options and inject their values into the HTML writer for permalinks and viewcode links."
    },
    "sphinx-doc__sphinx-8611": {
        "input_bounce": false,
        "trace": "The report clearly states what\u2019s broken (Sphinx issuing an \u201cundocumented\u201d warning on an inherited attribute), provides minimal code, exact reproduction steps, environment details, and the expected behavior (no warning for inherited attributes). A developer can reproduce and fix the issue without needing further clarification."
    },
    "sphinx-doc__sphinx-8621": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, shows concrete repro cases and what HTML output is being produced vs. what is expected, and narrows the problem down to the separator-splitting logic in the kbd role\u2019s regex/algorithm. While it doesn\u2019t hand you the exact regex to use, it gives enough detail to make a sensible fix (e.g. treat standalone \u201c-\u201d, \u201c+\u201d, \u201c^\u201d as a single key, and only split on those when between tokens). That makes it reasonably specified for an engineer to write and validate a solution."
    },
    "sphinx-doc__sphinx-8633": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the failure, exact Sphinx and Requests versions, full traceback and log, and minimal reproduction steps (importing requests.codes and calling restify). There\u2019s no ambiguity about the error or how to reproduce it, so it\u2019s sufficiently specified to start working on a fix."
    },
    "sphinx-doc__sphinx-8638": {
        "input_bounce": false,
        "trace": "The report provides a clear description of the unexpected autodoc linking behavior, a minimal reproducible example (GitHub repo, exact branch, build steps, browser test), environment details, and the expected behavior. There is no ambiguity about what the failure is or how to reproduce it. A developer could take this and work on a fix or diagnostic without further clarification."
    },
    "sphinx-doc__sphinx-8674": {
        "input_bounce": false,
        "trace": "The request clearly states the need to pass arbitrary Pygments lexer options (e.g. :startsinline: for PHP) both globally (via conf.py) and per\u2010block. While the precise names/formats of the new config/directive options aren\u2019t spelled out, the scope and behavior are well understood. A developer can sensibly introduce a config key (e.g. pygments_options) and directive option parsing and wire them into the existing highlight machinery. This is \u201creasonably specified.\u201d"
    },
    "sphinx-doc__sphinx-8679": {
        "input_bounce": false,
        "trace": "The report includes a clear code snippet, reproduction steps, expected vs. actual behavior, and a minimal public repro project. It\u2019s clear what\u2019s broken and what the fix should achieve (preserve inline quotes in rubric references)."
    },
    "sphinx-doc__sphinx-8684": {
        "input_bounce": true,
        "trace": "The issue is a high-level feature request with minimal detail. It states the desired behavior (empty \u2018:dedent:\u2019 should invoke full dedent like textwrap.dedent) but provides no examples, no indication of current behavior, no pointers to the relevant code, and no spec of edge cases or tests. There\u2019s too much left unspecified to make a direct implementation plan."
    },
    "sphinx-doc__sphinx-8707": {
        "input_bounce": false,
        "trace": "The report gives a concrete reproduction (make clean singlehtml html), the environment, and the precise divergence in behavior (viewcode works on a fresh html build but not when preceded by singlehtml). It also states the expected rule (\u201calways enabled for HTML builds except singlehtml and epub\u201d), so an engineer can write and test a fix. There are minor gaps (no logs or error dumps), but enough to attempt a solution."
    },
    "sphinx-doc__sphinx-8721": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (viewcode still generates pages for the epub target even when viewcode_enable_epub=False), gives reproduction steps, and defines the expected behavior (no module pages in the epub). That is sufficient to write a patch in the viewcode extension to skip page generation when building epub with viewcode_enable_epub=False."
    },
    "sphinx-doc__sphinx-8729": {
        "input_bounce": false,
        "trace": "The report clearly describes the current vs. expected behavior, includes reproduction steps, sample project, environment, and a specific suggestion for how the tool should change. A developer can reproduce the bug and know when it\u2019s fixed, so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-8771": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired change (preserve the original constant name in function signatures rather than the evaluated literal) along with a minimal example illustrating the current vs. expected output. While it leaves implementation details\u2014such as config\u2010option naming, edge\u2010case handling, and API decisions\u2014up to the developer, it\u2019s straightforward to interpret and implement a sensible solution (e.g. adding an autodoc flag and resolving defaults by identity lookup). Thus it\u2019s reasonably specified for a meaningful PR."
    },
    "sphinx-doc__sphinx-8801": {
        "input_bounce": false,
        "trace": "The report provides a minimal reproducible example, clear reproduction steps, the observed vs expected behavior, environment details, and the Sphinx configuration used. There\u2019s no ambiguity about what the bug is or what outcome is desired, so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-8969": {
        "input_bounce": false,
        "trace": "The reporter clearly describes the current vs. desired behavior, gives repro steps, environment, and explicitly asks that the csv-table directive treat \"/...\" paths as source\u2010relative (like figure/image directives do) rather than real filesystem roots. That\u2019s a specific requirement with a sensible implementation path."
    },
    "sphinx-doc__sphinx-9015": {
        "input_bounce": false,
        "trace": "The bug is clearly described (inline type annotations for TracebackType incorrectly linking to the local property instead of the external type), the expected behavior is stated, and sufficient context (code snippet, environment, Sphinx setup) is provided. While you might need to explore Sphinx\u2019s name resolution logic to implement the fix, the requirement itself is unambiguous and actionable."
    },
    "sphinx-doc__sphinx-9104": {
        "input_bounce": false,
        "trace": "The reporter gives a precise reproduction (full steps, logs, code location), the exact warning text, and even describes the desired outcome (no py:class warning for the ellipsis, render it as a plain \u201c\u2026\u201d). It\u2019s clear what change is needed (treat Ellipsis in type hints as literal text rather than trying to link it), so a meaningful fix can be written without further clarification."
    },
    "sphinx-doc__sphinx-9128": {
        "input_bounce": false,
        "trace": "The bug report includes a minimal reproducible example, environment details, exact warning text, and clear expected behavior (no warning when documenting an alias). There\u2019s no ambiguity about what needs to change (suppress duplicate warnings for aliased objects), so it is well-specified."
    },
    "sphinx-doc__sphinx-9155": {
        "input_bounce": false,
        "trace": "The issue clearly states the unexpected warning when using built-in C types in Sphinx\u2019s C domain, provides minimal reproduction steps, actual vs expected behavior, and environment details. There\u2019s no ambiguity about what needs to be fixed."
    },
    "sphinx-doc__sphinx-9171": {
        "input_bounce": true,
        "trace": "The report is essentially a how-to question (suppressing the constructor signature in Sphinx\u2019s autoclass output) rather than a clear feature request or bug report with defined acceptance criteria. There\u2019s no explicit API change or code path specified, no version context, and no definitive \u201cdone\u201d condition. It\u2019s asking for user guidance, so it\u2019s too vague to implement directly."
    },
    "sphinx-doc__sphinx-9207": {
        "input_bounce": false,
        "trace": "The report includes a clear description of the bug, a minimal reproduction repository with step-by-step instructions, the exact warning message, software versions, and even the bisected commit that introduced the issue. This is fully sufficient to attempt a solution."
    },
    "sphinx-doc__sphinx-9229": {
        "input_bounce": false,
        "trace": "The issue provides a minimal reproducible example, clear reproduction steps, actual vs expected behavior, environment details, and related context. It\u2019s clear what a successful solution should do (consistently render type-alias docstrings instead of the default \u201calias of\u2026\u201d text), so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-9230": {
        "input_bounce": false,
        "trace": "The issue gives a clear description of the bug, reproduction steps, expected vs. actual rendering, environment details and even a minimal test project. That makes it straightforward to implement and verify a fix."
    },
    "sphinx-doc__sphinx-9231": {
        "input_bounce": false,
        "trace": "The report clearly states that the man_make_section_directory setting must be reverted to off by default (it currently breaks existing projects) and even calls out the directory\u2010naming issue (<builddir>/1 vs. <builddir>/man1). The desired change and its rationale are unambiguous, so a PR can be crafted directly to disable the option by default and adjust the naming scheme."
    },
    "sphinx-doc__sphinx-9233": {
        "input_bounce": false,
        "trace": "The issue clearly describes what new functionality is needed (a hook to customize the class bases list), references an existing similar hook (`autodoc-process-signature`), proposes a concrete API signature with all parameters, and even offers two implementation options. There\u2019s enough detail to write the code and integrate it into the event system without further clarification."
    },
    "sphinx-doc__sphinx-9234": {
        "input_bounce": false,
        "trace": "The issue clearly defines the problem (unwanted redirects), the desired behavior (block unknown redirects but allow explicit ones), and even suggests a solution (list allowed redirect pairs). The specifics of where and how to configure those pairs can be fleshed out in implementation, but the overall requirements are clear enough for a meaningful PR."
    },
    "sphinx-doc__sphinx-9246": {
        "input_bounce": false,
        "trace": "The report gives complete reproduction steps, code samples, the exact error, Sphinx versions, and even pinpoints the missing snippet (`find_pending_xref_condition` usage) in the `missing_reference` handler. It clearly identifies the root cause and suggests where to add the fix. A developer can straightforwardly implement or propose the fix based on this information."
    },
    "sphinx-doc__sphinx-9258": {
        "input_bounce": false,
        "trace": "The issue clearly requests adding support for parsing multiple types separated by a vertical bar in docstring type fields (e.g. \u201cbytes | str\u201d). While it doesn\u2019t spell out every parsing edge case or where in the codebase to hook in, the intent is unambiguous and there\u2019s a straightforward implementation path (split on \u2018|\u2019, trim, handle each type). Thus it\u2019s reasonably specified for an engineer familiar with the docstring parser to proceed."
    },
    "sphinx-doc__sphinx-9281": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (ugly enum default values in autodoc signatures), provides a minimal reproducible example with steps to reproduce, and states the expected versus actual output. All necessary context and environment details are included, so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-9289": {
        "input_bounce": false,
        "trace": "The report provides a clear description of the bug, the exact configuration settings, a minimal reproducible example (conf.py, package.py, index.rst), and a screenshot of the actual vs expected behavior. A developer can directly reproduce and verify the issue and knows exactly what change in behavior is required. Therefore it is well-specified."
    },
    "sphinx-doc__sphinx-9320": {
        "input_bounce": false,
        "trace": "The report includes clear reproduction steps, observed vs expected behavior, environment details, and a screenshot. It\u2019s clear what the bug is and what a successful fix would entail."
    },
    "sphinx-doc__sphinx-9367": {
        "input_bounce": false,
        "trace": "The issue clearly states the incorrect behavior, the expected output, and even provides a specific test case to add. There\u2019s no ambiguity about what needs to be fixed\u2014preserve the trailing comma when rendering single-element tuples\u2014so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-9386": {
        "input_bounce": false,
        "trace": "The report clearly describes the unexpected behavior (type hints shown on properties despite autodoc_typehints=none), provides reproducible steps with a minimal example project, shows expected vs. actual output, and includes environment details. A maintainer can follow the reproduction, verify the bug, and implement a fix to suppress property type hints, making this issue well\u2010specified."
    },
    "sphinx-doc__sphinx-9461": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, gives a minimal repro project with exact steps to reproduce, lists the missing symbols, specifies the environment (OS, Python, Sphinx, extensions) and states the desired behavior. There\u2019s no ambiguity about what\u2019s broken or what fixing it should achieve, so it\u2019s well\u2010specified for someone with access to the codebase to implement a solution."
    },
    "sphinx-doc__sphinx-9464": {
        "input_bounce": false,
        "trace": "The issue clearly states the bug (PEP 585 generics not rendering), how to reproduce it, the expected behavior, the relevant source file and lines, and even suggests a concrete fix. All information needed to implement and verify the solution is provided."
    },
    "sphinx-doc__sphinx-9467": {
        "input_bounce": false,
        "trace": "The report clearly describes the regression: GitHub URLs with #L<line> anchors no longer pass linkcheck in Sphinx 4.1.0, includes reproduction steps, the specific commit that introduced the change, and links to logs. A developer can reproduce, identify and implement the necessary adjustments to restore the prior behavior, so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-9547": {
        "input_bounce": false,
        "trace": "The issue clearly states the errors encountered, shows the problematic declarations, points to the exact parser code locations, and even suggests which GNU extensions need to be supported (fixed-point and complex types). A PR can directly add those keywords/grammar rules in the C\u2010domain parser and add tests. It\u2019s unambiguous what a correct solution entails."
    },
    "sphinx-doc__sphinx-9591": {
        "input_bounce": false,
        "trace": "The issue provides a minimal reproducible example, clear reproduction steps, expected vs. actual behavior, environment details (OS, Python, Sphinx versions), and even a link to the example project and generated docs. There\u2019s no ambiguity about what\u2019s wrong or what success looks like, so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-9602": {
        "input_bounce": false,
        "trace": "The issue includes a clear description, minimal reproducible example with code, reproduction steps, expected behavior, environment (OS, Python/Sphinx versions), and even a sample repo. It\u2019s clear what a successful fix would entail (skip literal values in nitpick checks)."
    },
    "sphinx-doc__sphinx-9654": {
        "input_bounce": false,
        "trace": "The issue clearly states the bug (wrong base class shown), provides reproduction steps (clone torchgeo, build docs), links to the offending class, describes expected vs actual behavior, lists environment/versions, and even references related issues. All necessary details to investigate and implement a fix are present."
    },
    "sphinx-doc__sphinx-9658": {
        "input_bounce": false,
        "trace": "The report clearly defines the bug, lists exact Sphinx versions with differing behavior, shows reproduction steps, expected vs. actual output, project links, environment details, and screenshots. A developer can immediately reproduce and target the \u201cBases\u201d rendering logic, so the issue is well specified."
    },
    "sphinx-doc__sphinx-9665": {
        "input_bounce": false,
        "trace": "The feature request clearly describes the problem (automatically linking documented base classes or allowing the `autodoc-process-signature` hook to return custom base strings) and even suggests how the API could change (return a list of strings to append to \u201cBases:\u201d). While you\u2019ll need to dig into Sphinx\u2019s autodoc implementation and cross-reference related issues, there is a concrete goal and proposed approach, so the ticket is reasonably specified."
    },
    "sphinx-doc__sphinx-9673": {
        "input_bounce": false,
        "trace": "The issue clearly states the configuration options being used, the Sphinx/Napoleon settings, a minimal example of the docstring format, the exact behavior observed (missing return types) and the behavior expected. Reproduction steps, environment details, and a project link are provided. There\u2019s no critical missing information, so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-9698": {
        "input_bounce": false,
        "trace": "The report clearly shows how to reproduce the unwanted behavior, what the current (wrong) output is, and what the expected output should be. It identifies exactly which directive (`py:method` with `:property:`) is misbehaving and that it should omit parentheses in the index entry. A developer can jump straight into the Python domain\u2019s index-entry generation code, add the appropriate property check, and validate against the provided example, so the issue is well-specified."
    },
    "sphinx-doc__sphinx-9711": {
        "input_bounce": false,
        "trace": "The report clearly describes the incorrect string\u2010based version comparison in needs_extensions, shows how to reproduce it, and states the expected behavior (numeric version comparison so 0.10 \u2265 0.6). Fixing it is unambiguous: update needs_extensions to parse and compare versions numerically (e.g. via packaging.version)."
    },
    "sphinx-doc__sphinx-9799": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproduction (code snippet, steps to generate docs), the observed vs. expected behavior, environment details (OS, Python, Sphinx version, extensions), and a clear description of what should change (preserve hexadecimal literals or provide an option). It\u2019s straightforward to reproduce and implement a fix or add an option, so it\u2019s well-specified."
    },
    "sphinx-doc__sphinx-9828": {
        "input_bounce": false,
        "trace": "The request clearly states what feature to add (a new config option use_fuzzy_translations) and where to hook into (the write_mo call in sphinx/util/i18n.py) and even points to the Babel API. While you\u2019ll need to define the new config value, wire it through Sphinx\u2019s config system, and adjust the write_mo signature to pass it along, those details are standard boilerplate. Overall this is well enough scoped for a concrete implementation."
    },
    "sphinx-doc__sphinx-9829": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem (MathJax 3 needs a config script before loading but Sphinx always injects MathJax asynchronously), shows the relevant code path, and suggests three concrete ways to fix it (allow raw config strings, switch to \u2018defer\u2019 by default, or expose the async/defer flag to users). While the exact config API still needs to be designed, there\u2019s enough detail to make a targeted PR."
    },
    "sphinx-doc__sphinx-9902": {
        "input_bounce": false,
        "trace": "The issue clearly describes the problem with reproducible steps, minimal code examples, actual vs. expected output, environment details, and a project link. It\u2019s obvious what needs to be fixed: allow short type names imported in the module to resolve as cross-reference links rather than requiring fully qualified names."
    },
    "sphinx-doc__sphinx-9931": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (type hints always get fully qualified names), the desired behavior (type hints should honor add_module_names or a new config flag), provides minimal reproducer code/config and expected vs actual output, and even suggests possible config names. There\u2019s no ambiguity in what needs to change: strip module prefixes from type-annotated signatures when configured. This is well-specified for implementation."
    },
    "sphinx-doc__sphinx-9997": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug (missing links on parametrized type hints), provides minimal reproducible example code, exact reproduction steps, expected behavior, environment details, and a screenshot. There is no ambiguity about what needs fixing or how to observe the problem, so it\u2019s well-specified."
    },
    "sympy__sympy-11384": {
        "input_bounce": false,
        "trace": "The report clearly states what\u2019s wrong (fps prints like a standard series instead of its own FormalPowerSeries representation) and what behavior is desired (show the internal FormalPowerSeries(...) form on print, and on failure throw an exception instead of returning the original function). There\u2019s enough here to identify the methods to change (printer hooks and error handling in fps), even though exact code details aren\u2019t provided. Hence it\u2019s reasonably specified."
    },
    "sympy__sympy-11400": {
        "input_bounce": false,
        "trace": "The reporter clearly shows the current behavior of ccode(sinc(x)) and the desired output (a piecewise expansion of sin(x)/x with a default value of 1). They provide both input/output examples and a template for the expected C code. This is directly actionable by adding a special-case printer for sinc in the C code generator. That makes it WELL_SPECIFIED."
    },
    "sympy__sympy-11438": {
        "input_bounce": false,
        "trace": "The issue clearly points out that classify_diop() incorrectly labels equations with even powers of differing exponents (e.g. x^2 + y^2 + z^4) as 'general_sum_of_even_powers'. It calls for an added check that all exponents must be the same, not merely even, before assigning that category. The scope and expected change are sensible and unambiguous enough to implement without further clarification, even if the precise fallback classification isn\u2019t spelled out in detail."
    },
    "sympy__sympy-11618": {
        "input_bounce": false,
        "trace": "The report pinpoints exactly what\u2019s wrong (the 3rd coordinate is dropped when calculating distance via zip), shows input vs. output vs. expected result (\u221a5), and even hints at the fix (use a non\u2010truncating zip). That\u2019s enough to implement a correct solution."
    },
    "sympy__sympy-11788": {
        "input_bounce": false,
        "trace": "The report gives a clear repro (code + screenshot) and a concise description of the problem (Singularity function powers mis-printing in the qtconsole), but doesn\u2019t explicitly state the expected versus actual output in text or mention versions of Sympy/qtconsole. You can make a sensible fix (tweak the printing routines) but you\u2019d have to infer some details. Hence it\u2019s reasonably specified rather than fully self-contained."
    },
    "sympy__sympy-11794": {
        "input_bounce": true,
        "trace": "The issue statement provides almost no context or detail\u2014there\u2019s no description of what a \u201cSingularity Function\u201d is in this codebase, what ASCII printing entails, sample inputs/outputs, target API, or language specifics. Without these details, it\u2019s unclear how to proceed or what a successful implementation would look like."
    },
    "sympy__sympy-11822": {
        "input_bounce": false,
        "trace": "The report gives a concrete, reproducible failure (calling pprint on Symbol('') with unicode=True), includes the full traceback down to the offending call in pretty_symbology.py, and notes that use_unicode=False works. With the Sympy code at hand one can locate the unicode pretty\u2010printer, add a guard for empty (or None) symbol names, and return a safe fallback. There\u2019s nothing missing or ambiguous about what needs fixing, so the ticket is well\u2010specified."
    },
    "sympy__sympy-11862": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clearly states the unexpected behavior (high-precision Floats being down-cast to double when lambdified with mpmath), shows actual vs. expected results, and identifies the module/context where the bug occurs. A developer can locate the lambdify printer for mpmath and ensure Floats are rendered as mpmath.mpf calls with full precision strings. This is sufficient to begin a targeted fix."
    },
    "sympy__sympy-11870": {
        "input_bounce": false,
        "trace": "The issue clearly states the input expressions and the desired output (e.g. simplifying (\u2212I*exp(I*k)+I*exp(\u2212I*k))/2 to sin(k) and similarly to sinc(k)). While it\u2019s a feature request rather than a bug report, the examples give a concrete specification of expected behavior. There\u2019s enough information to attempt a solution (e.g. enhancing trigsimp or adding a new simplifier), so it\u2019s reasonably specified."
    },
    "sympy__sympy-11897": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired behavior (LaTeX output should match the pretty printer except when LaTeX can improve things), provides concrete examples of mismatches, and indicates assumptions shouldn\u2019t affect printing. While it doesn\u2019t prescribe exactly which code to change, a SymPy developer can sensibly interpret and work toward a solution. Thus it is reasonably specified."
    },
    "sympy__sympy-11989": {
        "input_bounce": false,
        "trace": "The issue gives concrete failing examples (2*x**2 + y**2 - 16 and 10*x**2 + 12*x*y + 12*y**2 - 34), shows actual vs expected outputs, and pinpoints the elliptic\u2010case solver as the suspect. While it doesn\u2019t prescribe the exact code change, it\u2019s clear what behavior must be fixed and tested. Therefore it\u2019s adequately specified for a meaningful implementation attempt."
    },
    "sympy__sympy-12088": {
        "input_bounce": false,
        "trace": "The report includes clear reproduction steps, shows both actual and expected behavior, and even points to the likely root cause (mix-up between base-10 \u201cdps\u201d and base-2 \u201cprec\u201d). A developer can immediately reproduce the bug and know to fix the conversion logic in Poly\u2019s mpmath domain so that high-precision mpf values produce the correct number of digits without manually setting mpmath.mp.dps. This is well enough specified for a concrete fix."
    },
    "sympy__sympy-12096": {
        "input_bounce": false,
        "trace": "The report clearly states the problem (evalf isn\u2019t applied recursively to the result of _imp_), gives a minimal repro example, and even points to the specific method to change (Function._eval_evalf). There is a straightforward fix\u2014call .evalf() on the output of _imp_\u2014so it is well specified."
    },
    "sympy__sympy-12108": {
        "input_bounce": false,
        "trace": "The issue clearly states the current behavior, the desired output format using `~`, `&`, and `|`, and the need to handle parentheses correctly. There\u2019s a direct mapping from the existing `And`, `Or`, and `Not` constructors to infix operators, so an implementer knows exactly what to change in the str printer."
    },
    "sympy__sympy-12171": {
        "input_bounce": false,
        "trace": "The report clearly identifies two specific bugs (Derivative and Float handling), gives concrete examples of incorrect vs. desired behavior, and even provides the exact code snippets to add. It\u2019s straightforward to implement and verify, so it\u2019s well-specified."
    },
    "sympy__sympy-12194": {
        "input_bounce": false,
        "trace": "The request clearly states the current behavior (factorint returns a dict), the desired output ([2, 2, 2, 3]), and even suggests an API change (e.g. aslist=True or new function). There\u2019s no ambiguous requirement or missing context. It\u2019s straightforward to implement and test."
    },
    "sympy__sympy-12214": {
        "input_bounce": true,
        "trace": "The report shows someone is calling `sy.bspline_basis_set` and passing knot arrays, but it doesn\u2019t state which library `sy` is from, what the signature or expected behavior of the function is, what error is raised, or what the desired basis matrix should look like. Without the function definition, version, input `x`, and a concrete example of the failure (error message or incorrect output), there\u2019s too much missing to craft a meaningful fix. "
    },
    "sympy__sympy-12227": {
        "input_bounce": false,
        "trace": "The issue clearly defines the desired new behavior (allow specifying binary precision via a `prec` argument, separate from decimal `dps`), outlines how the API should change (rename the existing `prec` to `dps`, add a new `prec`, error if both are passed), and notes backwards\u2010compatibility concerns and deprecation needs. While some details (e.g. exact positional vs. keyword handling or detection of old\u2010style calls) will require design decisions, there\u2019s enough here to draft a meaningful implementation and plan the deprecation cycle. Thus this is REASONABLY_SPECIFIED."
    },
    "sympy__sympy-12236": {
        "input_bounce": false,
        "trace": "The report gives a minimal, self-contained repro in Sympy 1.0, shows actual vs. expected output, and even what the correct expanded apart form should be. There\u2019s no missing context or ambiguity about what needs fixing."
    },
    "sympy__sympy-12270": {
        "input_bounce": false,
        "trace": "The report provides concrete reproducible examples (both expected and actual behavior), pinpoints the code location (`core/expr.py`), and even outlines the root cause (the behavior of `primitive()` producing a non-evaluated Mul). It\u2019s clear what the expected fix is: ensure `extract_multiplicatively(-2)` works as in the other cases. This is sufficient to begin a proper PR."
    },
    "sympy__sympy-12307": {
        "input_bounce": false,
        "trace": "The issue clearly describes a bug (invalid Fortran syntax for sign(x)), points to the correct Fortran signature, and even suggests how to generate sign(1, x) or sign(1d0, x) based on context. While some type\u2010and zero\u2010case details need filling in, there\u2019s a straightforward, sensible fix. It\u2019s thus reasonably specified for an implementation."
    },
    "sympy__sympy-12419": {
        "input_bounce": false,
        "trace": "The report clearly describes the incorrect behavior (double sum of an identity matrix returning 0 instead of n), includes minimal reproducible code, shows expected vs. actual outputs, and states the desired result. There\u2019s no ambiguity about what to fix, so it\u2019s well-specified."
    },
    "sympy__sympy-12454": {
        "input_bounce": false,
        "trace": "The issue clearly shows the failing input (a 4\u00d72 zero matrix), the traceback, the offending code snippet, and pinpoints that the inner loop runs j up to i even when i \u2265 number of columns. It\u2019s obvious that the solution is to cap j by self.cols (e.g. iterate over range(min(i, self.cols))). There\u2019s no ambiguity about the desired behavior (a tall zero matrix should return True) or how to fix it."
    },
    "sympy__sympy-12472": {
        "input_bounce": false,
        "trace": "The issue clearly describes the incorrect behavior (splitting a non-real factor outside of sqrt), provides a concrete example, and even references the PR where it was fixed. The fix needed is simply to add a regression test to ensure this case stays correct. That makes it well-specified for a meaningful attempt at a solution."
    },
    "sympy__sympy-12481": {
        "input_bounce": false,
        "trace": "The issue clearly defines the current behavior (raising a ValueError on non-disjoint cycles), gives the desired behavior (apply the cycles in left-to-right order and return the composed permutation), and even provides a simple example (two identical transpositions yielding the identity). There\u2019s no ambiguity about how the constructor should change, so it\u2019s well-specified."
    },
    "sympy__sympy-12489": {
        "input_bounce": false,
        "trace": "The report clearly describes the problem (subclassing always returns the base Permutation class), points to the methods involved (`__new__`, `_af_new`, `Basic.__new__`), and suggests the desired behavior (use `cls` via classmethods). While the exact code changes aren\u2019t spelled out line-by-line, there\u2019s enough detail to locate and fix the issue in the codebase. Thus this is REASONABLY_SPECIFIED."
    },
    "sympy__sympy-12798": {
        "input_bounce": true,
        "trace": "The issue only states that definitions for ff and rf changed in SymPy 1.0 and suggests reverting the change, without any detail on what ff and rf actually do, where they live in the codebase, what behavior changed, or what tests are failing. There\u2019s insufficient context to implement or validate this revert, making it too vague to act on meaningfully."
    },
    "sympy__sympy-12881": {
        "input_bounce": false,
        "trace": "The core bug is clearly that Poly.free_symbols should only include generators that actually appear in the polynomial, and the suggested monom-scan fix addresses exactly that. There is some ambiguity around how to merge in domain symbols (poly.free_symbols_in_domain), but the main change (skipping gens not present in any monomial) is unambiguous and implementable. Thus the issue is reasonably specified."
    },
    "sympy__sympy-12906": {
        "input_bounce": true,
        "trace": "The issue simply states that Relational.canonical is not idempotent in one specific example, but offers no detail on the intended behavior, relevant code paths, why it fails, or how canonicalization is meant to work. There\u2019s insufficient context to implement or test a fix without further clarification of the requirements or design."
    },
    "sympy__sympy-12977": {
        "input_bounce": false,
        "trace": "The request clearly states that nullary (zero\u2010argument) functions like f() should be allowed, highlights the traceback in sympy/core/function.py, and notes that both UndefinedFunction and explicit Function subclasses should support this. While it doesn\u2019t spell out the exact code change, it\u2019s straightforward to interpret: special\u2010case empty args in AppliedUndef.__new__ (skip the max/min on an empty sequence). This is enough to implement a fix."
    },
    "sympy__sympy-13001": {
        "input_bounce": true,
        "trace": "The report shows a failure case (cse leaving a non-evaluated Mul(-1,4,a**2, evaluate=False) so that the transformed expression isn\u2019t equality-comparable), but it doesn\u2019t specify the intended behavior or how the fix should work (e.g. whether CSE should auto-evaluate these Muls, change Mul\u2019s default, adjust equality, etc.). There\u2019s no clear acceptance criterion or scope, so it\u2019s too underspecified for a concrete implementation."
    },
    "sympy__sympy-13031": {
        "input_bounce": false,
        "trace": "The report includes minimal reproducible code, shows the expected behavior under 1.0 versus the broken behavior under 1.1, and clearly identifies the regression (hstack of zero\u2010row matrices should sum column counts). A developer can write a fix to restore the old output, so the issue is well\u2010specified."
    },
    "sympy__sympy-13043": {
        "input_bounce": true,
        "trace": "The issue highlights that the output ordering of decompose(separate=True) is arbitrary and causing test failures. However, it does not specify what deterministic order is desired (e.g. sorted by exponent, lexicographically, by coefficient, etc.), nor provide examples or criteria for sorting. Without guidance on the intended ordering or concrete examples of expected behavior, it\u2019s unclear how to implement the fix."
    },
    "sympy__sympy-13091": {
        "input_bounce": false,
        "trace": "The request clearly explains the desired behavior change (return NotImplemented instead of False in rich comparison defaults), points to the exact file and line for __eq__, and notes that the same pattern should apply to __lt__, __ge__, etc. While it doesn\u2019t enumerate every comparison method or file, there is a straightforward interpretation of updating all the default comparison methods. This is enough for a sensible implementation."
    },
    "sympy__sympy-13146": {
        "input_bounce": false,
        "trace": "The issue gives a minimal reproducible example (with code, current output, and desired output) and clearly states the problem (Sympy isn\u2019t collapsing two identical terms with a floating/rational exponent into zero). One can propose a concrete fix (e.g. use rational exponents instead of floats or adjust the simplification routine). It\u2019s well-defined what success looks like (getting 0)."
    },
    "sympy__sympy-13173": {
        "input_bounce": true,
        "trace": "The issue describes a behavior (the degree function silently picks the first generator in multivariate cases) and argues it\u2019s ambiguous, but it does not clearly specify the desired new behavior or API (e.g. should it raise an error when multiple symbols are present, change to total degree by default, require an extra argument, etc.). Without a concrete specification of the intended behavior and API changes, there\u2019s too much ambiguity to implement a meaningful solution."
    },
    "sympy__sympy-13185": {
        "input_bounce": true,
        "trace": "The issue describes a surprising behavior (cse introducing copies of MatrixSymbols when pulling out indexed elements) and shows example code and output, but it does not specify what the correct/desired behavior is or how the fix should work. Key requirements\u2014e.g. how cse ought to handle MatrixSymbol indexing\u2014are not defined. Therefore it\u2019s too vague to implement a solution."
    },
    "sympy__sympy-13236": {
        "input_bounce": false,
        "trace": "The issue clearly specifies desired behavior\u2014a rewrite/simplification rule so that factorial(n) % n (and more generally factorial(n) % k for 1 \u2264 k \u2264 n) automatically reduces to 0 when n and k are positive integers. The current (undesired) behavior and the needed change are concrete and actionable. No further clarification is required to implement this enhancement."
    },
    "sympy__sympy-13259": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example, the version, the exact wrong vs. expected behavior (including numeric checks), and even pinpoints the faulty transform in the simplify routine. A developer can reproduce and correct the mis\u2010handled complex argument, so the issue is well specified."
    },
    "sympy__sympy-13264": {
        "input_bounce": false,
        "trace": "The issue gives a clear reproduction (including environment, script, and expected behavior), a description of the simplify workflow, and even a concrete proposal for a new parameter to control recursive calls. A contributor can reproduce the problem and implement the suggested change without further clarification."
    },
    "sympy__sympy-13265": {
        "input_bounce": false,
        "trace": "The issue provides a clear minimal reproduction with input, current output, and the expected simpler form (recognizing the missing sin(1) term). It identifies exactly where simplification falls short. While it doesn\u2019t prescribe a precise code change, there\u2019s enough detail to implement a fix (e.g. extend the exponential-to-trig rewriting in simplify)."
    },
    "sympy__sympy-13286": {
        "input_bounce": false,
        "trace": "The issue clearly shows the incorrect behavior (Abs(sin(x)) returns 2*pi instead of pi) and the recursion error on relational expressions, and even specifies the expected outcomes (pi for Abs(sin(x)), None for relational inputs). While not exhaustively detailed for every edge case, it gives concrete examples and desired fixes/return values, making it possible to write a targeted patch."
    },
    "sympy__sympy-13301": {
        "input_bounce": false,
        "trace": "The request clearly states what the current behavior is, what the desired behavior is (examples of str and srepr output), and that the pretty printer should remain responsible for the angled-bracket form. There\u2019s no ambiguity in what needs to be changed, so it\u2019s well-specified."
    },
    "sympy__sympy-13361": {
        "input_bounce": false,
        "trace": "The issue provides a minimal reproducible example, shows actual vs expected behavior, pinpoints the root cause (incorrect precision propagation in evalf with subs), and even suggests a specific fix (apply subs before evalf). This is enough to start coding a PR."
    },
    "sympy__sympy-13364": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal (support pow(a, b, m) for Sympy, at least for Integer arguments) and provides the failing example, references to Python docs and a related issue. While some details (e.g. behavior for symbolic modulus or error cases) would need filling in, there is a straightforward interpretation and implementation path. Hence it\u2019s reasonably well-specified."
    },
    "sympy__sympy-13369": {
        "input_bounce": false,
        "trace": "The report clearly shows reproducible code, exact error, expected behavior (three symbolic roots), and even an alternative working workaround (solve on the characteristic polynomial). There\u2019s no ambiguity about what\u2019s broken or what the outcome should be. Thus it\u2019s well\u2010specified for a PR."
    },
    "sympy__sympy-13372": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example, points to the failing code in evalf_mul (in sympy/core/evalf.py), and even suggests the exact change (add an else: raise NotImplementedError for the missing reprec/imprec branches). This is concrete enough to implement and test a fix without further clarification."
    },
    "sympy__sympy-13429": {
        "input_bounce": false,
        "trace": "The report gives a concrete minimal reproducer, version information, exact input/output, and an expected outcome. It identifies the root cause (fallback to evalf with too few digits) and states the invariant that any rational vs \u03c0 comparison should be exact, so there\u2019s a clear fix: add a symbolic/exact path or bump precision to decide the sign. No key information is missing for implementing a solution."
    },
    "sympy__sympy-13441": {
        "input_bounce": true,
        "trace": "The issue merely states that count_ops is slow for large expressions and shows a hanging example, but it lacks any concrete requirements, performance targets, or guidance on approach. There is no specification of expected behavior or acceptance criteria (how fast is fast enough, what algorithms to improve, test cases, etc.). As such it is too vague to action directly."
    },
    "sympy__sympy-13471": {
        "input_bounce": false,
        "trace": "The report clearly states the problem (Python 2\u21923 pickle of a Sympy expression with floats fails), provides a minimal reproducible example with exact commands, environment details (Sympy commit, Python versions), and shows the full error. A developer has all necessary information to reproduce and fix the issue, so it\u2019s well-specified."
    },
    "sympy__sympy-13480": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducer, the exact error message, and points to the offending line in the code. It\u2019s clear that a variable `cotm` is referenced but never defined in `hyperbolic.py`\u2019s `coth.eval`, so a straight rename or definition fix is needed. This is fully actionable."
    },
    "sympy__sympy-13551": {
        "input_bounce": true,
        "trace": "The report shows a specific Sympy failure for Product(n + 2^{\u2212k}, [k,0,n\u22121]) and notes it should involve a q-Pochhammer closed form, but it doesn\u2019t give the actual target formula or sufficient detail on how to implement or represent it. Without the explicit desired expression or guidelines on how to integrate it into Sympy\u2019s product routines, it\u2019s unclear how to produce or verify a correct solution."
    },
    "sympy__sympy-13581": {
        "input_bounce": false,
        "trace": "The issue clearly requests the collapse of nested Mod expressions under addition (and, by extension, linear combinations), e.g. Mod(Mod(x+1,2)+1,2) \u21d2 Mod(x,2), and recursively for expressions like foo*Mod(x+1,2) + non_mod_terms + 1. While it doesn\u2019t spell out every edge\u2010case, the goal\u2014flattening nested Mods and eliminating integer offsets mod n\u2014is clear enough to attempt an implementation."
    },
    "sympy__sympy-13615": {
        "input_bounce": false,
        "trace": "The report gives a concrete example with input, current output, and the precise expected output. While it doesn\u2019t provide internal code pointers, it clearly specifies the desired behavior of `Complement` for mixed symbol/number sets, making a sensible fix possible."
    },
    "sympy__sympy-13647": {
        "input_bounce": false,
        "trace": "The report gives a small, reproducible snippet (with inputs and observed output), a clear statement of what\u2019s wrong, and even the Sympy version. It\u2019s straightforward to write a test expecting the two new columns inserted at position 3 and the remainder of the identity to stay aligned on the bottom half. That makes it well\u2010specified for a fix."
    },
    "sympy__sympy-13678": {
        "input_bounce": false,
        "trace": "The issue clearly lists which functions are misreporting is_real, provides the exact assertions that should pass, and defines the desired behavior (is_real should be None rather than False when the input symbol is non-real or has unknown sign for inverse functions). A developer can directly write tests and implement the changes to the .is_real logic for those functions. There\u2019s no missing critical information."
    },
    "sympy__sympy-13682": {
        "input_bounce": true,
        "trace": "This is a broad, high-level feature request rather than a detailed spec. It outlines desired capabilities (an OrdinalNumber class, new assumptions, arithmetic ops, Cantor normal form, etc.) but leaves key design and API details unspecified (how it should integrate with SymPy\u2019s assumptions, exact method signatures, behavior on edge cases, tests, performance constraints, etc.). As written it\u2019s too open-ended to begin a concrete implementation without substantial follow-up, so it is VAGUE."
    },
    "sympy__sympy-13744": {
        "input_bounce": true,
        "trace": "The issue simply reports a stack overflow during the coset_table doctests, but it doesn\u2019t show which specific doctest is failing, what the expected behavior is, or where in the code the recursion should be curtailed. There\u2019s no minimal reproduction, no description of the intended output, and no guidance on how to fix the infinite recursion. As a result, it\u2019s unclear what a successful resolution would entail without additional details."
    },
    "sympy__sympy-13757": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates a lack of left\u2010side dispatch in Poly multiplication with examples and expected behavior (i.e. x*Poly(x) should give Poly(x**2), S(-2)*Poly(x) should give Poly(-2*x), etc.). While it doesn\u2019t prescribe exactly where in the code to fix it, the problem and desired outcome are unambiguous, making it straightforward to implement a __rmul__ or adjust the dispatch logic. Thus it\u2019s reasonably specified."
    },
    "sympy__sympy-13761": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact traceback, and a clear statement of the (implicit) expected behavior\u2014simplify(x + csch(sinc(1))) should not raise but return the original expression. From this we know precisely where the failure is (KeyError in simpify\u2019s function map) and what to do (handle unknown functions by leaving them alone)."
    },
    "sympy__sympy-13773": {
        "input_bounce": false,
        "trace": "The issue calls out a specific function (`__matmul__`) and a clear desired change (reject non\u2010Matrix operands, e.g. scalar @ Matrix should error).  While it doesn\u2019t specify the exact exception class, it\u2019s straightforward to add an isinstance check and raise (ValueError or TypeError) to mirror NumPy.  There\u2019s enough detail to proceed."
    },
    "sympy__sympy-13798": {
        "input_bounce": false,
        "trace": "The user clearly describes the current limitation (only four predefined mul_symbol options), the specific desired behavior (allow arbitrary string, e.g. a thin space \\\\,), and provides examples. The goal\u2014to permit any mul_symbol string in the latex() printer\u2014is unambiguous and actionable."
    },
    "sympy__sympy-13806": {
        "input_bounce": true,
        "trace": "The request gives almost no context about the codebase, component, or expected behavior. It\u2019s unclear what \u201csupport\u201d means, where it should be added, or what system is being modified. Key details (framework, parser, renderer, tests) are missing, so it\u2019s too vague to implement."
    },
    "sympy__sympy-13840": {
        "input_bounce": true,
        "trace": "The issue statement is very brief and lacks crucial details: there\u2019s no example code, no description of the generation command used, no expected vs. actual output, nor any context about the version of SymPy or codegen modules involved. As written it\u2019s unclear exactly what the failure mode is or what a correct solution would entail."
    },
    "sympy__sympy-13852": {
        "input_bounce": true,
        "trace": "The issue text actually mixes two separate requests\u2014adding a special-case evaluation for polylog(2,1/2) and fixing the exp_polar behavior in the expansion of polylog(1,z)\u2014without a clear single scope or concrete spec for either. It\u2019s not clear which change is the focus or exactly how they want the exp_polar removed. That makes it ambiguous what a complete solution entails."
    },
    "sympy__sympy-13877": {
        "input_bounce": false,
        "trace": "The report gives concrete reproduction steps, the exact error traceback, and even suggests a likely root cause (Bareiss being applied to non-integer entries). While it doesn\u2019t spell out exactly how to fix it, it\u2019s clear what to reproduce, diagnose, and address (e.g. detect non-integer/symbolic entries and choose a different determinant algorithm)."
    },
    "sympy__sympy-13878": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a concrete task (adding internal _cdf methods for specific distributions whose CDFs currently fail), lists the exact distributions and test cases, and outlines success criteria (closed-form CDF, differentiation check, numeric tests). While the exact formulas must be sourced (e.g. from Wikipedia), the overall scope and requirements are well defined and actionable."
    },
    "sympy__sympy-13895": {
        "input_bounce": false,
        "trace": "The report reproduces a clear Sympy bug in `simplify` on power expressions: it shows the precise input, the incorrect simplified form, and a counterexample numeric evaluation. The desired behavior (no inequivalent rewrite) is implicit. This is enough to write a failing test and implement a fix in `simplify`'s power\u2010rewriting logic."
    },
    "sympy__sympy-13915": {
        "input_bounce": true,
        "trace": "The issue describes a surprising behavior when substituting b = a into an expression r, noting that the result is mathematically undefined (or should at least signal the indeterminate form) yet r.subs(b,a) returns 1. However, the report never clearly states what the desired API behavior should be (e.g. should .subs raise an error, return zoo, defer evaluation, automatically compute a limit, etc.?), nor does it outline any concrete requirements or edge\u2010cases. That makes it unclear how a PR should resolve the issue beyond the general notion of \u201cdon\u2019t return a wrong finite result when the subexpression is undefined.\u201d Thus it\u2019s too vague to implement without further clarification."
    },
    "sympy__sympy-13962": {
        "input_bounce": false,
        "trace": "The issue clearly describes the desired change (use the quantity\u2019s `abbrev` in the string printer instead of its `name`), points to the specific printer location (`str.py` line 713) and the test that must be updated, and includes examples of current vs desired output. This gives enough detail to implement and validate the fix."
    },
    "sympy__sympy-13971": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the problematic output (backslash-escaped square brackets) when printing a SeqFormula in Jupyter and shows both the incorrect and the desired rendering. It specifies that either the backslashes should be removed around the square brackets or the slots should render properly. While implementation details (exact method to override) must be derived from the codebase, the goal is unambiguous."
    },
    "sympy__sympy-13974": {
        "input_bounce": false,
        "trace": "The issue clearly identifies that TensorProduct powers aren\u2019t being simplified by expand(tensorproduct=True) or tensor_product_simp, shows minimal reproducible examples, and states the expected results. This gives a concrete bug, input/output pairs, and a clear goal, so it\u2019s well-specified."
    },
    "sympy__sympy-13978": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the codegen bug (missing multiplication sign before the imaginary unit in Octave code), gives an example of the problem (\"sqrt(3)i\" \u2192 error), and specifies the desired behavior (emit \"sqrt(3)*i\"). That\u2019s enough to implement the fix in the Octave code printer."
    },
    "sympy__sympy-14024": {
        "input_bounce": false,
        "trace": "The report gives clear minimal examples demonstrating the inconsistent results, shows the intended simplified form (\u20131)**x, and highlights the specific case that breaks. While it doesn\u2019t spell out every implementation detail, it\u2019s straightforward to interpret the goal (make numeric bases follow the same positive\u2010integer assumption logic as symbols) and write a meaningful fix and test. Thus it is reasonably specified."
    },
    "sympy__sympy-14031": {
        "input_bounce": false,
        "trace": "The report supplies a minimal reproducer (the code snippet and exact error), references related issue #13970 for context, and clearly states that integration should succeed where it currently fails. While it doesn\u2019t spell out the precise fix or the expected antiderivative, there\u2019s enough information to reproduce the bug and infer that the coercion logic for expressions involving exp(1/2) must be extended. Hence it\u2019s reasonably specified."
    },
    "sympy__sympy-14038": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates the incorrect behavior (the product wrongly returns 0) and states the mathematically correct result (sinc(a)). There\u2019s no ambiguity about the desired outcome or context\u2014this is a straight Sympy bug report with an explicit example and expected output."
    },
    "sympy__sympy-14070": {
        "input_bounce": false,
        "trace": "The bug report clearly states the input (logcombine(log(3) - log(2))), the observed (no change) and expected behavior (log(3/2)), notes a regression from version 0.6.7, and points to the relevant function. That provides enough context to implement or restore the desired functionality."
    },
    "sympy__sympy-14082": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example (code snippet showing wrong output), the correct expected result, and even references a related issue. It\u2019s clear what integration behavior is incorrect and what the fix would look like, so it\u2019s well-specified."
    },
    "sympy__sympy-14085": {
        "input_bounce": false,
        "trace": "The report clearly shows the failure case (S(\"\u03b1\") raising a SympifyError) and states the desired behavior (sympify should recognize Greek letters as symbol names). While the implementation details (e.g. mapping from Unicode to internal symbol names) aren\u2019t spelled out, the requirements and success criteria are clear enough to drive a concrete fix."
    },
    "sympy__sympy-14180": {
        "input_bounce": false,
        "trace": "The report clearly describes the incorrect behavior (ln is being rendered as \\log) and the desired output (use the LaTeX \\ln command). It\u2019s unambiguous what needs to change in the converter\u2019s mapping rules."
    },
    "sympy__sympy-14207": {
        "input_bounce": false,
        "trace": "The issue comes with a minimal reproducer, clear description of expected vs. actual output, the Sympy version, and identifies exactly where (print_Mul and codegen printers) the fix should go. There\u2019s enough detail to start writing a patch to add parentheses around a Mul base when it\u2019s raised to a negative power, so a meaningful solution can be attempted without further clarification."
    },
    "sympy__sympy-14248": {
        "input_bounce": false,
        "trace": "The report clearly states the unexpected behavior, provides minimal reproducible examples with code and output, and specifies the desired formatting. A contributor can immediately see what to change in the printers to display subtractions properly for MatrixSymbols. This is well-specified."
    },
    "sympy__sympy-14308": {
        "input_bounce": false,
        "trace": "The report gives clear reproduction steps and shows exactly how the pretty\u2010printer is mangling a vector expression, and even calls out the baseline misalignment. While it doesn\u2019t spell out the \u201ccorrect\u201d ASCII/Unicode art, a SymPy maintainer can infer how a powered fraction times a basis vector should center the vector glyph the way other tall expressions do. It\u2019s not fully sketched out top to bottom, but there\u2019s enough here to reproduce the bug and sensibly implement the needed printer fixes."
    },
    "sympy__sympy-14317": {
        "input_bounce": false,
        "trace": "The issue clearly describes the unexpected ordering in the LaTeX printer, shows input/output examples, and states the desired behavior (same descending\u2010degree order as str/pretty). That\u2019s enough to implement and test a fix in the LaTeX printer, so it\u2019s well\u2010specified."
    },
    "sympy__sympy-14333": {
        "input_bounce": false,
        "trace": "The issue clearly states the current behavior, the desired mathematical conventions (range [0, m) for m>0 and (m, 0] for m<0), cites examples from WolframAlpha, and provides expected outputs for all sign combinations. It\u2019s straightforward to implement: remove the m>1 guard for m<0, compute the inverse via extended GCD, then normalize the result into the specified interval. All requirements and examples are given."
    },
    "sympy__sympy-14396": {
        "input_bounce": true,
        "trace": "The issue shows a failure when passing a string \u2018RR[y,z]\u2019 as the domain, but doesn\u2019t spell out the intended behavior (e.g. how to parse or represent a multivariate coefficient domain from a string) or propose a concrete fix or error-message rewording. There\u2019s too much left unspecified, so it\u2019s unclear what a correct solution would be."
    },
    "sympy__sympy-14531": {
        "input_bounce": false,
        "trace": "The issue clearly states the unexpected behavior, provides minimal reproducible examples (with inputs and both actual and expected outputs), and identifies where the printer settings are not being propagated. With knowledge of the StrPrinter implementation, one can trace how subexpressions are rendered and adjust the code so that sympy_integers (and other settings) are honored recursively. This is actionable and unambiguous."
    },
    "sympy__sympy-14564": {
        "input_bounce": true,
        "trace": "The issue is primarily a design discussion around the semantics and API of ConditionSet (when to evaluate, what to return on substitution, whether to enforce a single variable, etc.). It lists several inconsistent behaviors and poses multiple questions (raise errors, auto-evaluate, add a doit method), but never settles on a concrete, unified specification of what ConditionSet should do in each case. There is room for multiple interpretations and no clear \u201ccorrect\u201d behavior defined, making it too ambiguous to implement directly."
    },
    "sympy__sympy-14627": {
        "input_bounce": true,
        "trace": "The report notes that binomial(n, n) no longer auto-simplifies to 1 after a certain commit and questions whether it should, but it doesn\u2019t specify the intended behavior, the assumptions under which simplification must occur (e.g. integer/positive), or what part of the code to change. It reads as a discussion prompt rather than a clearly scoped bug or feature request. As presented, it lacks enough detail to draft a targeted fix."
    },
    "sympy__sympy-14699": {
        "input_bounce": false,
        "trace": "The request is clear: extend ReferenceFrame.orientnew to accept an indices keyword just like the ReferenceFrame constructor (and optionally add a global default indices mechanism). The desired behavior and parameters are explicitly described, so a developer can implement and test this feature without further clarification."
    },
    "sympy__sympy-14711": {
        "input_bounce": false,
        "trace": "The issue clearly shows how to reproduce the error (summing a vector and zero via Python\u2019s built-in sum) and indicates that the sum should probably return a Vector rather than raising a TypeError. While the desired behavior (allowing 0 in vector addition/sum) can be sensibly inferred and there\u2019s a known one-line fix in Vector.__add__ or by adding __radd__, the report doesn\u2019t explicitly state the expected result or exact fix. Thus it\u2019s not perfectly detailed, but there\u2019s enough here for a straightforward implementation."
    },
    "sympy__sympy-14774": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug, gives minimal repros, specifies desired vs actual output, and even points to the exact file and code change needed. A PR can be written directly from this information."
    },
    "sympy__sympy-14817": {
        "input_bounce": true,
        "trace": "The report shows a traceback and complains about using sympify on string args in MatrixSymbol, and questions why MatAdd printing omits the \u2018+\u2019 for negative terms. However, it never defines the desired behavior, provides a minimal failing test or outlines a clear fix path. The symptoms are noted but the concrete requirements and scope of the change are not specified. Without an expected output or instructions on how to alter the printer, it\u2019s too ambiguous to act on."
    },
    "sympy__sympy-14821": {
        "input_bounce": false,
        "trace": "The report clearly identifies that the two-argument zeta function call is being emitted with its arguments in the wrong order by the Octave/Matlab code generator and gives the desired mapping (`zeta(x,n)` \u21d2 `zeta(n,x)`). While it doesn\u2019t point to the exact source file, it\u2019s easy to locate the codegen dispatch for special functions and add an argument swap for the two-argument zeta case. Thus, there\u2019s a sensible interpretation and a direct fix."
    },
    "sympy__sympy-14976": {
        "input_bounce": false,
        "trace": "The issue clearly identifies that lambdify with the mpmath module isn\u2019t converting Sympy Rationals to mpmath\u2019s high\u2010precision floats, shows a minimal reproducible example, and points to where to add support (in the mpmath dispatch map). While the exact implementation isn\u2019t spelled out, the required behavior is unambiguous and there is a straightforward fix (add a mapping for Rational \u2192 mp.mpf(n)/mp.mpf(d))."
    },
    "sympy__sympy-15011": {
        "input_bounce": false,
        "trace": "The report clearly describes the problem, provides minimal reproducible code, and shows both expected and actual behavior (including error messages). It\u2019s obvious what change is needed (allow lambdify to handle MatrixSymbol names with curly braces, even with dummify=True)."
    },
    "sympy__sympy-15017": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current (wrong) behavior of len for rank-0 (scalar) NDimArray, shows concrete examples, and states the expected behavior (return 1, matching the number of elements). There is no ambiguity about what needs to change in __len__ logic. This is sufficient to implement and verify a fix."
    },
    "sympy__sympy-15085": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, exact Sympy version constraints, the error trace, and a clear description of the unwanted behavior ([regression] lambdify fails with Matrix). It\u2019s clear what\u2019s wrong and what a fix should achieve, so the issue is well\u2010specified."
    },
    "sympy__sympy-15198": {
        "input_bounce": true,
        "trace": "The report notes a regression in code generation for Octave/Julia/JS after a specific commit, and that \u2018assoc_laguerre\u2019 should error instead of printing \u2018laguerre\u2019. However, it provides no test cases, code pointers, error messages, or reproduction steps. It\u2019s unclear where and how to fix or write tests. Thus it\u2019s too vague for a meaningful implementation attempt."
    },
    "sympy__sympy-15222": {
        "input_bounce": true,
        "trace": "The issue is just a brief code snippet and an expectation without any context or detail on the intended semantics of Subs.subs, the version of SymPy, or which parts of the internal state should be mutable vs. immutable. There\u2019s no specification of how substitutions on Subs objects ought to work in general, nor any clear requirements or edge\u2010case definitions. This lack of detail makes it impossible to proceed confidently on a fix\u2014there\u2019s too much ambiguity about desired behavior. "
    },
    "sympy__sympy-15225": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example showing the incorrect behavior (bool_map claiming identity mapping between XOR and XNOR), the actual vs expected output, and points to the suspect function. While it doesn\u2019t include version or internal code pointers, there\u2019s a clear path to reproduce, inspect bool_map\u2019s fingerprinting logic, and fix the bug. This is enough to attempt a solution."
    },
    "sympy__sympy-15231": {
        "input_bounce": false,
        "trace": "The issue comes with a minimal reproducible example, full error output, and the generated Fortran code showing the duplicate Mod declarations. The root cause is clearly identified and all information needed to propose a fix in the autowrap code generator is present."
    },
    "sympy__sympy-15241": {
        "input_bounce": false,
        "trace": "The issue lays out a single clear example of the desired behavior (re\u2010ordering the args of Derivative so that f(y), which is not a free symbol of f(x,y), ends up after the x\u2019s), and points at the specific sorting routine (_sort_variable_count) that must be tweaked. While you\u2019d have to read the existing implementation to fill in details, it\u2019s straightforward to see what change is wanted (group the free symbols of the function first, then any other args). That makes it reasonably\u2014though not exhaustively\u2014specified."
    },
    "sympy__sympy-15286": {
        "input_bounce": true,
        "trace": "The description conflates multiple features (recognition of elliptic integrals, new ellipse\u2010equation method, faster circumference routine, collinearity check, renaming of methods) and refers to several issue numbers and a PR. There isn\u2019t a single clear \u201cdo X, Y, Z\u201d requirement; the scope is all over the place. It\u2019s too ambiguous to know what specific change a solution should implement."
    },
    "sympy__sympy-15308": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (latex(trace(A**2)) \u2192 'Trace(A**2)'), and the desired behavior (use a LaTeX printer for Trace and for the inner A**2 so it prints as A^2). An implementer can locate the Latex printer code, add a _print_Trace method, and ensure fallback to the inner expression\u2019s printer. All necessary details are provided for a meaningful fix."
    },
    "sympy__sympy-15320": {
        "input_bounce": false,
        "trace": "The issue comes with clear, reproducible examples showing current vs. expected behavior and pinpoints that RootOf is ignoring the substituted generator. It\u2019s obvious what needs to change (make RootOf use the correct generator after substitution), so it\u2019s well-specified for a solution."
    },
    "sympy__sympy-15345": {
        "input_bounce": false,
        "trace": "The report clearly identifies the function in question (`mathematica_code`), gives a minimal reproducible example, shows the incorrect and desired outputs, and specifies the change needed (use square brackets and preserve argument order). A developer can directly write a test and implement the fix, so the issue is well-specified."
    },
    "sympy__sympy-15346": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, shows the expected versus actual behavior, and clearly states that sin(a)*sin(b) + cos(a)*cos(b) isn\u2019t being simplified to cos(a-b) when a,b are Rational. It\u2019s obvious what change is required (extend the trig simplifier to handle numeric Rational arguments the same way it handles symbolic ones)."
    },
    "sympy__sympy-15349": {
        "input_bounce": false,
        "trace": "The report includes Sympy version, minimal reproducible code, actual vs expected output, and points to the exact source location. There\u2019s enough detail to identify and correct the sign error in the rotation matrix and add or update tests."
    },
    "sympy__sympy-15446": {
        "input_bounce": false,
        "trace": "The report gives reproducible code, shows the current (undesired) output and clearly implies the desired behaviour (i.e. add parentheses around a negated MatrixSymbol in a product). It\u2019s evident where in the LaTeX printer the change must go. This is well\u2010specified."
    },
    "sympy__sympy-15523": {
        "input_bounce": true,
        "trace": "The issue simply reports test failures under Python 3.7 but doesn\u2019t say what the correct behavior should be or hint at a specific intended fix. There\u2019s no clear specification of how the parser or tests should change, so it\u2019s too ambiguous to start coding against."
    },
    "sympy__sympy-15555": {
        "input_bounce": true,
        "trace": "The issue reproduces a TypeError when primepi is called with a symbolic argument, but it doesn\u2019t specify what the correct behavior should be (e.g. return unevaluated, support limit evaluations, define a symbolic function, etc.). There\u2019s no clear specification of the intended API or mathematical behavior for symbolic inputs, so it\u2019s too vague to implement a meaningful solution without more details."
    },
    "sympy__sympy-15586": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible code snippet, the exact error message, and links to live code and a StackOverflow thread. It\u2019s clear the user wants a lambdify() call that applies numpy.linalg.inv to a float matrix rather than using element-wise power or bitwise XOR. While they haven\u2019t spelled out the precise mapping change needed in lambdify\u2019s modules argument, there\u2019s a straightforward, sensible fix (e.g. supplying a custom mapping for MatPow to numpy.linalg.inv)."
    },
    "sympy__sympy-15596": {
        "input_bounce": true,
        "trace": "The issue simply notes an unexpected output for degree((x-2)/(x**2+1), x) and asks if it should fail, but does not define what the correct behavior for rational functions should be (e.g. degree of numerator vs. difference of degrees, or other convention), nor state an expected result. Without a clear spec for \"degree\" on rational functions or a concrete proposal for desired behavior, it\u2019s too ambiguous to implement or test a solution."
    },
    "sympy__sympy-15599": {
        "input_bounce": false,
        "trace": "The ticket clearly explains the incorrect behavior (Mod(3*i,2) not simplifying to Mod(i,2)), provides a concrete code diff, the exact location (sympy/core/mod.py, test file), and the expected new test. The goal is unambiguous and all details to implement and verify the fix are present."
    },
    "sympy__sympy-15625": {
        "input_bounce": false,
        "trace": "The issue clearly describes how to reproduce the LaTeX error, explains the root cause (double math delimiters), and even specifies the exact change desired (replace the $$\u2026$$ wrapper with a $\\displaystyle \u2026$ wrapper). All necessary context and a concrete fix are provided, making it straightforward to implement and verify."
    },
    "sympy__sympy-15635": {
        "input_bounce": false,
        "trace": "The issue gives concrete examples of broken outputs and the exact desired behavior for str and srepr (valid Python reconstruction, use of S namespace, etc.). While it doesn\u2019t spell out every detail of how to implement it in the printer code, it clearly defines the problem cases and expected fixes, so a developer familiar with SymPy\u2019s printing framework can proceed. It\u2019s not fully boilerplated, but it\u2019s certainly actionable."
    },
    "sympy__sympy-15678": {
        "input_bounce": false,
        "trace": "The ticket clearly identifies two missing features in the idiff function\u2014support for Eq inputs and for using an applied function like f(x) as the dependent variable\u2014and provides failing examples as well as a working y-based example whose result one should mirror. While it doesn\u2019t spell out every line of code, it\u2019s straightforward for someone familiar with SymPy\u2019s structure to infer the needed changes (strip Eq to lhs\u2013rhs and accept AppliedUFunctions in place of plain Symbols). Thus it\u2019s reasonably specified."
    },
    "sympy__sympy-15685": {
        "input_bounce": false,
        "trace": "The issue clearly explains the user\u2010facing problem (ohm scale_factor is wrong) and the desired goal (hide the internal workaround by making .scale_factor private), but it does not spell out exactly how to refactor the API (e.g. rename the attribute, introduce a new property, preserve backwards compatibility, update docs/tests). There is a sensible interpretation for a solution, but some implementation details are left to the developer."
    },
    "sympy__sympy-15809": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired change: when Min() or Max() are called with no arguments, they should return +\u221e and \u2212\u221e respectively instead of raising an error. While implementation details (e.g. which infinity constant to use, updating tests, backward compatibility) will need to be worked out, the functional requirement is unambiguous and implementable."
    },
    "sympy__sympy-15875": {
        "input_bounce": false,
        "trace": "The issue gives a concrete failing example (Add of complex terms that sum to zero incorrectly returns False) and the desired behavior (is_zero must be True or None but never wrong). It specifies where in the code this applies (Add\u2019s is_zero logic on complex terms) and even includes a test snippet. That is enough to craft a fix and a test/PR, so the spec is reasonably clear."
    },
    "sympy__sympy-15948": {
        "input_bounce": true,
        "trace": "The description conflates two separate problems (unexpected behavior of subs on matrices vs. a fix for Mul.flatten returning Add/Mul instead of MatAdd/MatMul) and mixes issue narrative with a proposed PR. It\u2019s unclear which bug to address or what the expected correct behavior and scope of changes should be. There isn\u2019t a clear, focused description of what needs to be implemented or fixed."
    },
    "sympy__sympy-15970": {
        "input_bounce": false,
        "trace": "The request clearly states that in the LaTeX printer for lists, tuples, and dicts we should stop using '\\quad' and instead use the '\\ ' spacing command. Although no code references are given, it\u2019s straightforward to locate the LaTeX printer implementations, adjust the spacer from '\\quad' to '\\ ', and add/update tests accordingly. There\u2019s a clear and unambiguous change to be made, with a reasonable assumption of where to apply it."
    },
    "sympy__sympy-15971": {
        "input_bounce": true,
        "trace": "The issue simply states \u201cAdd pretty printing functionality for lerchphi function\u201d without any examples of the desired output or details on formatting conventions to follow. It doesn\u2019t specify what the pretty-printed form should look like or reference existing patterns for similar functions, so it\u2019s unclear what a correct solution would be."
    },
    "sympy__sympy-15976": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clear description of the incorrect versus expected behavior, environment details, and screenshots. It is straightforward to reproduce the issue in MathML output and implement a fix."
    },
    "sympy__sympy-16003": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current incorrect MathML rendering of higher\u2010order derivatives versus the desired LaTeX\u2010style output, shows before/after examples, and calls out exactly what needs to change (_print_Derivative grouping, exponent formatting, single\u2010line variable list, optional function\u2010line break). It even points to related code (#15975, #3926) for reference. While some minor details (when to break the function onto its own line) are left a bit open, there is a straightforward interpretation for a SymPy maintainer to implement. A meaningful solution can be attempted without further clarification."
    },
    "sympy__sympy-16056": {
        "input_bounce": false,
        "trace": "The issue clearly defines the problem (mixed use of `\\mathrm` vs. `\\text`), gives pros/cons of each, and even suggests adding a single helper function and a configuration switch to pick the standard. While it doesn\u2019t nail down the exact API or default setting name, the scope and desired behavior are clear enough to begin designing a solution (e.g. adding a `print_text` helper in the LaTeX printer class with a new setting)."
    },
    "sympy__sympy-16088": {
        "input_bounce": false,
        "trace": "The issue clearly states the missing behavior (pulling constant factors out of an Integral in simplify()), gives analogous Sum behavior, example inputs and outputs, references a previous discussion (#7971), and even drafts release notes. While it doesn\u2019t spell out the exact code changes, it\u2019s straightforward for someone familiar with Sympy\u2019s simplify system to implement the same pattern used in Sum.simplify for Integral. Thus it is reasonably specified."
    },
    "sympy__sympy-16221": {
        "input_bounce": true,
        "trace": "The issue statement merely says \u201cadd support for printing matrices and arrays\u201d without specifying which printer or code component is affected, what the expected output format is, or any details about the existing implementation or requirements. There\u2019s no context on how the matrices/arrays should be represented, what edge cases or types to handle, or examples of desired behavior. This makes it impossible to devise a concrete solution without further clarification."
    },
    "sympy__sympy-16281": {
        "input_bounce": true,
        "trace": "The issue points out cosmetic defects (an extra blank line, too wide/fat \u220f, possibly adjusting the top bar) but doesn\u2019t specify the exact target formatting rules or metrics. It reads as a request for feedback rather than a concrete spec (e.g. \u201cremove the blank line,\u201d \u201cmatch the width of Sum,\u201d use specific character patterns). As written it\u2019s open-ended and leaves too much to interpretation for a definitive implementation."
    },
    "sympy__sympy-16331": {
        "input_bounce": false,
        "trace": "The report gives a minimal repro, the full traceback pinpointing the redeclared _y in the Cython wrapper, and notes it only happens for two arguments with the Cython backend.  That clearly identifies where the wrapper generator is shadowing names and what to change, so it\u2019s well\u2010specified."
    },
    "sympy__sympy-16334": {
        "input_bounce": false,
        "trace": "The issue clearly describes the incorrect behaviour of .is_positive for 0**nonzero-real, gives minimal reproducible code, and states the expected outcome (False). This is a straightforward, self\u2010contained request to update the is_positive logic for zero bases with nonzero real exponents."
    },
    "sympy__sympy-16437": {
        "input_bounce": false,
        "trace": "The bug report clearly shows the misbehavior of Float parsing when underscores are used (with input, actual output, and expected output) and even points to the upstream mpmath source. It\u2019s unambiguous what needs to be done (treat underscores as digit separators and ignore them when parsing)."
    },
    "sympy__sympy-16449": {
        "input_bounce": true,
        "trace": "The issue simply states \u201cAdd CDF to Maxwell distribution\u201d and references the Wikipedia page, but gives no context on the codebase, language, module or function signatures, parameter conventions, tests, or where exactly to add it. It lacks the details needed to implement and integrate the feature without further clarification."
    },
    "sympy__sympy-16450": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example, shows the current vs. desired behavior (finite gets dropped), and specifies that posify should preserve the \u2018finite\u2019 assumption (and possibly others). It\u2019s clear what to change in the code (carry over the finite assumption to the new symbol), even if the exact implementation details must be discovered by reading the posify code. Thus it\u2019s reasonably specified for someone familiar with the codebase to implement a fix."
    },
    "sympy__sympy-16474": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the classes involved (HadamardPower and HadamardProduct) and enumerates the required printers (LaTeX, MathML, pretty). While the exact symbols or formatting details (e.g. the \u201cdivision symbol\u201d for HadamardProduct) aren\u2019t spelled out, a developer familiar with the codebase can infer where to add or extend `_print_*` methods in the respective printer modules. There\u2019s a straightforward interpretation of what needs to be done, so it\u2019s reasonably specified."
    },
    "sympy__sympy-16503": {
        "input_bounce": true,
        "trace": "The issue pinpoints a misalignment in the pretty\u2010printed Sum output and notes that the \u2018x\u2019 and \u2018+3\u2019 should be aligned, but it doesn\u2019t specify which element should move (whether to lower the \u2018x\u2019 or raise the \u2018+3\u2019) nor provide a concrete desired output example. Without a clear target layout or decision on the baseline, implementers would lack the necessary detail to know what a correct solution looks like."
    },
    "sympy__sympy-16527": {
        "input_bounce": false,
        "trace": "The report gives a minimal repro (with code and current vs. expected output) and clearly states that `collect_const` should factor out rational numbers (e.g. 1/2) when Numbers=True. An engineer familiar with the SymPy codebase can locate the `collect_const` implementation and extend it to handle Rational constants accordingly. While it doesn\u2019t detail the exact code changes, the goal is unambiguous and actionable."
    },
    "sympy__sympy-16597": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates the unexpected behavior (Symbol('m', even=True) yields m.is_finite == None) and states the expectation (even numbers must be finite). It gives minimal but sufficient context to identify the place in the assumption\u2010system to add finite as an implied property of even. No further clarification is needed to draft a fix."
    },
    "sympy__sympy-16601": {
        "input_bounce": false,
        "trace": "The report gives a clear reproducible example, pinpoints where the boolean comparison fails under symbolic inputs, and the correct geometric result (the midpoint) is easily inferred. However, it doesn\u2019t explicitly state the expected symbolic return, so some geometric insight is needed. This makes it reasonably, but not fully, specified."
    },
    "sympy__sympy-16632": {
        "input_bounce": false,
        "trace": "The report includes exact code snippets, the observed (wrong) behavior, what they tried (simplify, powsimp, powdenest, local_dict, transformations), and the precise desired outcome (expr1 - expr2 \u2192 0).  It\u2019s clear what needs to be fixed and tested. "
    },
    "sympy__sympy-16637": {
        "input_bounce": false,
        "trace": "The issue clearly describes the incorrect behavior (Plane.intersection treats a Segment3D like an infinite line), gives a minimal repro, and states the expected behavior (no intersection for points outside the finite segment). It even suggests the exact kind of change needed (filter intersection points by checking if they lie within the segment). All necessary details are present to implement and test the fix."
    },
    "sympy__sympy-16766": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the missing behavior (printing of Indexed in PythonCodePrinter), shows how it currently fails and what output is desired, and even provides a snippet of the method to add. The requirements are unambiguous and ready for implementation."
    },
    "sympy__sympy-16781": {
        "input_bounce": false,
        "trace": "The report clearly states that the dot\u2010printer is emitting the arguments of Pow in the wrong order (showing 2\u2192x instead of x\u21922), and that both the code and the tutorial snippet need to be updated. There\u2019s no ambiguity about what correct output looks like (a Pow node with left child x and right child 2), and a developer familiar with the dot printer can implement and verify the change directly. Therefore it\u2019s WELL_SPECIFIED."
    },
    "sympy__sympy-16792": {
        "input_bounce": false,
        "trace": "The bug report includes a minimal reproducible example, shows expected vs. actual behavior, pinpoints the incorrect function signature generation (double vs double *), and even suggests where the fault lies. It\u2019s clear what needs to be fixed: ensure unused array arguments are still emitted as pointer parameters in the Cython backend. This is enough to start coding a solution."
    },
    "sympy__sympy-16840": {
        "input_bounce": false,
        "trace": "The report clearly identifies a mismatch: using SymPy\u2019s floor\u2010division (`//`) on `S(2)` by `S.Half` currently raises a ZeroDivisionError, even though in pure Python `2//0.5` yields `4`. The expected remedy\u2014implementing floor\u2010division for SymPy rationals to return the correct result\u2014is obvious. Some details (exact return type, code location) aren\u2019t spelled out, but there\u2019s a straightforward, sensible interpretation of what needs to change."
    },
    "sympy__sympy-16862": {
        "input_bounce": false,
        "trace": "The report points to an exact file and line number, describes that `args[0]` will throw an IndexError on an empty linsolve result, and even cites the specific failing test. It doesn\u2019t spell out the exact desired behavior in that branch (e.g. return an empty ImageSet, raise a specific error, etc.), but there\u2019s enough context to write a patch (check for emptiness before accessing `args[0]`, adjust the handling accordingly). Hence it\u2019s reasonably specified."
    },
    "sympy__sympy-16886": {
        "input_bounce": false,
        "trace": "The issue clearly identifies the incorrect mapping in simpy.crypto.crypto, specifies the wrong entry (`\"----\": \"1\"`) and the correct one (`\".----\": \"1\"`). A straightforward code change to update the mapping is all that\u2019s needed. This is well-specified for implementation."
    },
    "sympy__sympy-16943": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates that fps on a polynomial returns the raw Pow instead of a FormalPowerSeries, so the fix is to wrap polynomial input in the same FPS class (and support indexing, etc.). While it doesn\u2019t spell out every detail (e.g. exact type signatures or tests), there is a straightforward, sensible interpretation of the desired behavior."
    },
    "sympy__sympy-16963": {
        "input_bounce": true,
        "trace": "The description mixes two separate feature requests (dict\u2192Dict conversion and changes to N/sympify precision) in one ticket, so it\u2019s unclear which problem should be solved and how. It\u2019s not well-focused on a single, actionable issue."
    },
    "sympy__sympy-16988": {
        "input_bounce": true,
        "trace": "The request mixes two concerns (deduplicating arguments in Intersection and changing evaluation to a Piecewise or leaving unevaluated) without a clear specification of which behaviour is required (or under what conditions). There are no details on how to detect duplicates in practice, where in the code to apply it, or whether to implement the piecewise logic or simply block evaluation. The success criteria are left ambiguous, so it\u2019s not well-specified."
    },
    "sympy__sympy-17010": {
        "input_bounce": true,
        "trace": "The issue describes a real problem (infinite recursion when using could_extract_minus_sign) and pinpoints example code, but it doesn\u2019t specify the exact desired behavior, API changes, or a concrete approach to fix it. It poses an open-ended question (\u201cIs there a fast way to do that?\u201d) rather than defining success criteria or a well-scoped solution. This makes it too vague to implement a meaningful fix without further clarification."
    },
    "sympy__sympy-17038": {
        "input_bounce": false,
        "trace": "The issue provides concrete failing examples, points to the exact code location, explains the root cause (using math.sqrt beyond safe bounds), and even outlines a clear fix strategy (reduce the threshold or add a post-check and fallback). This makes a meaningful solution straightforward to implement."
    },
    "sympy__sympy-17067": {
        "input_bounce": false,
        "trace": "The issue gives a minimal reproducible example (with code, input expr, actual Sympy output, and the correct expected result), plus verification via Mathematica.  Reproducing the bug and knowing the fix target (-cos(alpha)*cot(beta)) is crystal\u2010clear.  This is WELL_SPECIFIED."
    },
    "sympy__sympy-17115": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, the full traceback, pointers to the exact code path in Piecewise.eval, and a clear statement of the failure (TypeError on constructing a Piecewise with a Boolean condition). The expected behavior (constructing a Piecewise without error) is implicit and standard. This gives enough information to attempt a targeted fix or workaround."
    },
    "sympy__sympy-17139": {
        "input_bounce": true,
        "trace": "The report shows a reproducible crash and its location (comparison of a complex exponent in fu.py), but never states the expected outcome of simplify(cos(x)**I) or how it should be guarded. Without any description of desired behavior or constraints, it\u2019s unclear what a correct fix would be. This ticket is too vague to act on directly."
    },
    "sympy__sympy-17150": {
        "input_bounce": false,
        "trace": "The report clearly reproduces the bug (calling log(Rational(408,499), 2) yields zoo), gives the expected result, points to the exact code location, and even suggests concrete code changes. A developer could implement and test the fix without needing further clarification."
    },
    "sympy__sympy-17176": {
        "input_bounce": false,
        "trace": "The issue comes with concrete examples, current vs. expected behaviour, and points to the relevant routines (_finger, bool_map). While it doesn\u2019t prescribe exactly how to fix the fingerprint or bool_map algorithms, it clearly demonstrates the bug for XNOR3/XOR3 (and hints at XOR4/XNR4), providing enough to start diagnosing and writing tests. Hence it is reasonably specified."
    },
    "sympy__sympy-17194": {
        "input_bounce": false,
        "trace": "The issue clearly identifies specific functions (acoth, acsc, asec) whose MathML tags are misnamed, shows the current output and the desired output for each, and implicitly points to the MathML printer mapping that needs updating. There\u2019s no ambiguity about what needs changing or how success is measured."
    },
    "sympy__sympy-17223": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates the unexpected behavior with concrete code examples and describes the expected outcome. A SymPy developer can locate the pattern\u2010matching logic in Mul.match and update it to respect the order of non-commutative factors. Though the last line has a typo (it meant e1.match(e2)), the intent and scope of the fix are clear, so the issue is reasonably specified."
    },
    "sympy__sympy-17239": {
        "input_bounce": false,
        "trace": "The issue clearly demonstrates the wrong-printed outputs for various language printers, identifies which printers are failing (glsl, jscode, julia, mathematica, octave, rust) and notes that C/Fortran printers work because they override `_print_Relational`. It\u2019s straightforward to implement the missing overrides in those printers (mirror the C/Fortran implementations, handling \u2018==\u2019, \u2018!=\u2019, \u2018<\u2019, etc.). While it doesn\u2019t include code snippets for each printer\u2019s internals, there\u2019s a sensible interpretation of what change is needed for a successful fix."
    },
    "sympy__sympy-17271": {
        "input_bounce": true,
        "trace": "The report shows that frac(zoo) currently raises a TypeError, but the author explicitly states \u201cNot sure what should happen, but not this,\u201d without prescribing the correct or desired behavior. There is no specification of the intended output or semantics of frac when applied to zoo (complex infinity). Without knowing what frac(zoo) should return (e.g. zoo, NaN, a tuple, etc.), there\u2019s insufficient information to implement a meaningful fix or even write a proper test. Hence the issue is too vague."
    },
    "sympy__sympy-17273": {
        "input_bounce": false,
        "trace": "The report clearly identifies the mismatched constant (hbar in sympy.physics.units), points to the authoritative CODATA value (1.054571817e-34 J\u00b7s), and provides a reference. Fixing it simply requires updating the numeric value in the code. This is a precise, actionable request."
    },
    "sympy__sympy-17288": {
        "input_bounce": false,
        "trace": "The report includes a clear problem description, a minimal code example showing the incorrect output, and the precise expected LaTeX form. It\u2019s straightforward to understand what change in the LaTeX printer (grouping superscripts) is needed to satisfy the user\u2019s requirement."
    },
    "sympy__sympy-17313": {
        "input_bounce": true,
        "trace": "The issue lacks any concrete context: there\u2019s no indication of which language or library the `ceiling`/`floor` functions come from, how `pos` and `neg` are defined, what the current behavior is, or where in the code this applies. Without examples, code snippets, or expected inputs/outputs, it\u2019s unclear what needs to be changed or tested."
    },
    "sympy__sympy-17318": {
        "input_bounce": false,
        "trace": "The report gives the exact failure case, a clear desired fallback behavior (return the original expression when it can\u2019t be denested), and an example of the before/after result. It even points to the relevant functions/files. That is enough detail to write a minimal fix (e.g. catching IndexError in sqrtdenest and returning expr) and add a test. Hence it\u2019s well\u2010specified."
    },
    "sympy__sympy-17340": {
        "input_bounce": true,
        "trace": "The issue statement is extremely terse and provides no context, file references, test failures, or examples. It simply notes that \"Permutation args\" have been changed from a list subtype to a Tuple subtype, but does not specify where in the code this occurs, what the expected behavior is, or any details about related tests or modules. There\u2019s insufficient information to form a concrete implementation plan without exploring the entire codebase and guessing at intent. Therefore the description is too vague for a meaningful solution."
    },
    "sympy__sympy-17394": {
        "input_bounce": false,
        "trace": "The issue clearly calls out that SymPy\u2019s lambdify for the incomplete gamma functions should map to SciPy\u2019s gammainc/gammaincc, and that the regularized vs. unregularized scaling (i.e. multiplying by gamma(a)) must be handled (see #16533). It also notes that unsupported modules (\u2018numpy\u2019, \u2018math\u2019) should error (see #16535). While it references other tickets for exact formulas, an experienced engineer can infer the required implementation: in the 'scipy' module, lowergamma(a,x) \u2192 special.gamma(a) * special.gammainc(a,x), and similarly for uppergamma with gammaincc. The requirements are concrete enough to code against, so I\u2019d rate it as REASONABLY_SPECIFIED."
    },
    "sympy__sympy-17512": {
        "input_bounce": false,
        "trace": "The ticket clearly outlines current vs. desired behavior for Range(range(10)) (it should error, not silently convert), and also specifies that ImageSet should automatically sympify its arguments and error if its second argument isn\u2019t a Set. Examples of current REPL interactions are provided along with the expected outcome. While there are implementation details left to the developer (where exactly to hook in the checks and how to raise the proper error), the scope and acceptance criteria are well enough defined for a meaningful PR."
    },
    "sympy__sympy-17630": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducer, clear description of expected vs actual behavior, full traceback, and even pinpoints the likely cause (Zero instead of ZeroMatrix blocks). A developer can jump in and address the block multiplication logic directly. It\u2019s well-scoped and actionable."
    },
    "sympy__sympy-17653": {
        "input_bounce": false,
        "trace": "The reporter provides clear reproduction steps, the relevant code snippet, and a concrete description of the undesired behavior (loss of subclassed Symbol type due to the line `label = Symbol(label.name)`). They also indicate exactly how commenting that line fixes their use-case. While some knowledge of SymPy\u2019s assumption handling and Symbol internals is required, the root of the bug and the intended behavior (don\u2019t upcast TypedSymbol to plain Symbol) are unambiguous. A developer can reasonably propose a fix (e.g. only re-instantiate when `type(label) is Symbol`, preserving subclasses)."
    },
    "sympy__sympy-17655": {
        "input_bounce": false,
        "trace": "The report reproduces a clear minimal example, shows the traceback, and states the expected behavior (commutative scalar multiplication of Point). There\u2019s no ambiguity about what needs fixing (implement __rmul__ for Point to mirror __mul__)."
    },
    "sympy__sympy-17696": {
        "input_bounce": false,
        "trace": "The issue clearly states what behavior is wrong (refine(sign(x), \u2026) still returns sign(x)) and what is expected (it should return 1 when x is known positive or x+1>0). It even points to a prior PR #17019 as a model. A developer familiar with Sympy\u2019s refine machinery can sensibly implement and test this missing logic. Thus it is reasonably specified."
    },
    "sympy__sympy-17770": {
        "input_bounce": true,
        "trace": "The issue merely states that some internal methods (`_eval_is_real`, `_eval_is_finite`) were \u201ccorrected\u201d but still incomplete, without specifying what the current behavior is, what cases are missing, or any desired test cases or specifications. It gives no concrete examples or requirements to guide implementation. This makes it too vague to act on meaningfully."
    },
    "sympy__sympy-17809": {
        "input_bounce": false,
        "trace": "The issue clearly states the two changes required: (1) in the cosh function, override is_positive to return True when its argument is real; and (2) in the Abs class, have the constructor return the argument itself if it\u2019s known positive or its negation if known negative. Example REPL sessions and expected simplify results are provided to verify the behavior. A SymPy contributor can implement these two small, scoped modifications and write the corresponding tests\u2014this is well\u2010specified."
    },
    "sympy__sympy-17821": {
        "input_bounce": true,
        "trace": "The issue is asking for two loosely related changes\u2014a rewrite method for Catalan numbers to express them as a Sum, and a demonstration of auto-generating LaTeX in docs\u2014without specifying the exact sum formula, method signature, or expected doctests. There\u2019s no clear specification of what the rewrite should produce or how to integrate the LaTeX generation, making it too ambiguous for a concrete implementation."
    },
    "sympy__sympy-17845": {
        "input_bounce": true,
        "trace": "The issue describes a mismatch between the current string output (bracket/set notation) and the principle that str(x) should be valid Python code, but it does not clearly specify what the new string format should be (e.g. how to represent open/closed endpoints succinctly, whether to keep Interval(...) syntax, etc.). There\u2019s ambiguity around the desired representation and no clear acceptance criteria, so it isn\u2019t sufficiently specified for implementation."
    },
    "sympy__sympy-18033": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal (remove the `print_cyclic` flag from the `Permutation` class, move it into the printing subsystem, deprecate the old flag, and ensure the default behavior is consistent across `str` and pretty printers) and points to the relevant PR discussion and deprecation policy. While the specific modules/functions to touch aren\u2019t laid out step-by-step, anyone with access to the SymPy codebase can locate the permutation class and printer implementations and follow the high-level instructions. Thus it\u2019s reasonably specified."
    },
    "sympy__sympy-18057": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates the bad behavior (eval'ing arbitrary reprs in __eq__), gives minimal repro cases and traces, and indicates the high\u2010level fix (stop sympifying unknown objects in __eq__ so you don\u2019t eval their repr). There\u2019s still room for design detail (e.g. exactly when to return NotImplemented vs False), but the bug and desired outcome are clear enough to make a meaningful PR."
    },
    "sympy__sympy-18062": {
        "input_bounce": false,
        "trace": "The report pinpoints a clear and reproducible bug: calling imageset on a Lambda with a constant plus I*n drops the constant term. It shows the input, actual output, and the intended behavior (i.e. retaining the constant). This is sufficient to write and test a fix, so it is well-specified."
    },
    "sympy__sympy-18087": {
        "input_bounce": false,
        "trace": "The report clearly identifies a specific buggy behavior (trigsimp treating sqrt(sin(x)**2) as sin(x) for general complex x) and notes the correct behavior when x is real. While it doesn\u2019t spell out the exact desired output in all cases (e.g. whether to leave sqrt(sin(x)**2) intact or convert to Abs), there\u2019s a straightforward interpretation: restrict that simplification to real\u2010valued x or introduce an Abs term. This is enough to begin designing a fix."
    },
    "sympy__sympy-18109": {
        "input_bounce": true,
        "trace": "The issue states that pretty(oo-oo) currently yields \"nan\" when evaluation is disabled, and the user is asking why. However, it never explicitly states what the correct behavior should be or what output is expected (for example, showing \"oo - oo\" or something else). Without a clear specification of the desired output or behavior, it\u2019s ambiguous what change is needed. Thus the report lacks sufficient detail to implement a solution unambiguously."
    },
    "sympy__sympy-18116": {
        "input_bounce": true,
        "trace": "The issue statement is very brief and lacks specifics: it doesn\u2019t list which Expr methods are incorrectly invoked, where in the code these calls occur, or how the separation should be implemented. Without examples or detailed requirements, it\u2019s unclear what changes are needed for a successful solution."
    },
    "sympy__sympy-18130": {
        "input_bounce": false,
        "trace": "The bug is clearly reproducible with a minimal code snippet: calling ImageSet(Lambda(n,n**2 - 1), Integers).intersect(Integers) returns an empty set when it should return the same image set (or its integer values). While the expected result isn\u2019t explicitly stated, the intention is evident and there is enough information to start diagnosing the diophantine\u2010solver interaction that leads to the empty result. This makes the issue reasonably specified."
    },
    "sympy__sympy-18168": {
        "input_bounce": true,
        "trace": "The issue is asking whether the `is_closed` and `is_open` flags on `S.Rationals` are \u201cvalid,\u201d but doesn\u2019t commit to a single desired behavior (should they both be False, or should they raise NotImplementedError?). It\u2019s more of a conceptual question than a clear bug/feature request with a defined expected outcome. There\u2019s no specification of how these flags should be used or which approach to follow, so it\u2019s too ambiguous to implement directly."
    },
    "sympy__sympy-18189": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example showing that calling diophantine with permute=True yields different results when the order of the syms tuple is reversed. It\u2019s clear that the expected behavior is to return the same full set of integer solutions regardless of symbol order. While the expected output isn\u2019t spelled out verbatim, there\u2019s a sensible interpretation (i.e. both calls should return the complete set of permutations). This provides enough information to attempt a fix."
    },
    "sympy__sympy-18191": {
        "input_bounce": true,
        "trace": "The issue points out a recursion error when computing sqrt(1/tan(1+I)) and refers to specific lines in power.py where an extra check should be added, but it does not specify what check is needed or how the behavior should change. There\u2019s no detailed description of the desired outcome or criteria for success, leaving implementation details ambiguous."
    },
    "sympy__sympy-18198": {
        "input_bounce": false,
        "trace": "The request clearly defines the desired new API (renaming core.evaluate to core.parameters, introducing a dict-like global_parameters with __getitem__, attribute access, assignment, and a context\u2010manager interface) but leaves some implementation details open (integration with the existing module, thread\u2010safety, nested contexts, etc.). It\u2019s not fully fleshed out in every detail, but it\u2019s concrete enough to start coding a workable solution and iterate from there. Thus it\u2019s reasonably specified."
    },
    "sympy__sympy-18199": {
        "input_bounce": false,
        "trace": "The issue clearly states that when a mod p == 0, the function should return x=0 as a root (and indeed the only solution) but currently does not. It even gives a concrete example (`nthroot_mod(289, 5, 17)`). The change required is unambiguous: add a special-case check for a % p == 0 and return [0]."
    },
    "sympy__sympy-18200": {
        "input_bounce": false,
        "trace": "The report clearly demonstrates a failing call, shows the traceback pinpointing the `int` vs. `.free_symbols` misuse in `intersection_sets`, and ties into the diophantine\u2010intersection handler. Although it doesn\u2019t spell out the precise \u201cshould return\u201d value, it\u2019s obvious that the intersection of all squares with the integers shouldn\u2019t crash, so a fix guarding against int results and falling back to a correct ImageSet is straightforward. Hence the issue is reasonably specified."
    },
    "sympy__sympy-18211": {
        "input_bounce": false,
        "trace": "The report clearly shows the current behavior (`NotImplementedError` on calling `as_set` for `Eq(n*cos(n) - 3*sin(n), 0)`) and the desired fallback (return a `ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)`). You can reproduce it with the given snippet, know where `as_set` and `solveset` live, and see that the fix is to catch `NotImplementedError` and return a `ConditionSet` instead. This is enough to unambiguously implement the change."
    },
    "sympy__sympy-18256": {
        "input_bounce": false,
        "trace": "The issue clearly describes the current behavior (SymPy prints (x^{i})^{2}) and the desired behavior (SymPy should print {x^{i}}^{2}), gives multiple examples and even references conventional LaTeX usage. It\u2019s immediately clear which part of the code (the LaTeX printer\u2019s handling of nested Pow objects) needs to change, and there is no ambiguity about the goal. Thus it\u2019s well-specified."
    },
    "sympy__sympy-18273": {
        "input_bounce": false,
        "trace": "The issue gives a minimal reproducible example (a snippet of code), the exact traceback, and points to the failure in `cse` when rebuilding a `CRootOf` node. From this it is clear that `cse` should not crash on `RootOf`/`CRootOf` objects (it should treat them as atomic or handle their full signature) and that a fix must be made in the CSE tree\u2010rebuild logic. While the user doesn\u2019t spell out the exact return value they want, the goal (no IndexError) and the location for the patch are clear. This makes the ticket reasonably specified for someone familiar with the codebase."
    },
    "sympy__sympy-18351": {
        "input_bounce": true,
        "trace": "The issue describes adding NumPy printer support for a list of matrix expression classes but provides no details on the expected output format (e.g. sample inputs/outputs) or conventions to follow. Without examples or clear guidelines for each expression, implementers must guess how to translate each SymPy matrix class into numpy code. Hence it\u2019s too ambiguous to start coding a complete solution."
    },
    "sympy__sympy-18477": {
        "input_bounce": false,
        "trace": "The issue clearly states what features need to be added (exposing min_fixed and max_fixed options to all Float printers, and unifying Float behavior across backends such as LaTeX vs string), so there is a sensible path to implementation. However, it doesn\u2019t spell out exact API signatures or code locations, so some reasonable assumptions must be made. Hence it is REASONABLY_SPECIFIED."
    },
    "sympy__sympy-18478": {
        "input_bounce": true,
        "trace": "The issue as written is more of a user question about why two different expressions yield different substitution results in Sympy rather than a clear bug report or feature request with expected behavior, input/output examples, version details, and reproduction steps. It lacks a precise statement of what needs to be changed or fixed and what the correct behavior should be, so it\u2019s too vague to implement a meaningful solution or PR."
    },
    "sympy__sympy-18587": {
        "input_bounce": false,
        "trace": "The issue clearly describes the buggy behavior (size argument ignored when smaller than the supplied list), provides a minimal reproducer, and specifies the desired outcome (raise an exception). There is no ambiguity about what change is expected, so it\u2019s well-specified."
    },
    "sympy__sympy-18605": {
        "input_bounce": false,
        "trace": "The issue clearly describes a bug in the Idx constructor: when given a tuple of bounds, non\u2010integer bounds are accepted whereas the same check for single bounds would reject them. The user even quotes the relevant code branch and the desired behavior (raising TypeError for non\u2010integer bounds). While it doesn\u2019t spell out the exact lines to change, there\u2019s enough context to locate the __new__ method in indexed.py and add the integer\u2010check on both tuple elements. Thus it\u2019s reasonably specified."
    },
    "sympy__sympy-18630": {
        "input_bounce": true,
        "trace": "The issue shows a traceback and identifies that a TupleArg object lacks compute_leading_term, but it gives no detail on what TupleArg is, why it\u2019s used in hyper, or what the correct behavior/output should be. There\u2019s no guidance on how to implement a fix or what the expected series or integral result is. As written, it\u2019s too ambiguous to start coding a solution without further clarification."
    },
    "sympy__sympy-18650": {
        "input_bounce": false,
        "trace": "The issue clearly describes the unwanted behavior (sqrt(8)**Rational(2,3) yields 2**(1/3)*2**(2/3)) and the desired outcome (it should simplify to 2). It\u2019s unambiguous what change is needed\u2014apply exponent rules to combine the factors\u2014so it is well-specified."
    },
    "sympy__sympy-18667": {
        "input_bounce": true,
        "trace": "The description merely announces that a new feature for computing Schur numbers has been added, without specifying any concrete problem, bug, or requested changes. There\u2019s no clear objective or failure modes to address, so it\u2019s too ambiguous to act on."
    },
    "sympy__sympy-18698": {
        "input_bounce": false,
        "trace": "The report clearly shows desired behaviour with concrete examples: sqf_list should group together all irreducible factors that share the same exponent into one square\u2010free polynomial factor (e.g. combine (x-2)^3*(x-3)^3 into (x^2-5*x+6, 3)), matching sqf\u2019s output format. Though it mentions both sqf and sqf_list, the intent and fix are unambiguous. This is enough to implement and test a correct squarefree decomposition grouping by exponent."
    },
    "sympy__sympy-18728": {
        "input_bounce": false,
        "trace": "The description clearly states the incorrect behavior of Pow.is_zero and Pow.is_positive with infinite bases/exponents, gives concrete examples of current vs. desired outputs, references the existing issue (#9532), and outlines the necessary changes and edge cases. There\u2019s enough detail to start coding against the provided test cases. This is WELL_SPECIFIED."
    },
    "sympy__sympy-18763": {
        "input_bounce": false,
        "trace": "The report clearly identifies the incorrect LaTeX output for a Subs with a negative argument, shows the input/output examples, and states the desired parenthesization. Implementing it simply requires updating the LaTeX printer for Subs to wrap the inner expression in parentheses when needed. This is a concrete, well-scoped change."
    },
    "sympy__sympy-18765": {
        "input_bounce": false,
        "trace": "The issue clearly describes current vs. desired behavior with concrete code examples, specifies that MatAdd/MatMul should accept an evaluate flag just like Add/Mul, and shows expected output. A developer can jump in and implement the evaluate keyword and its effect on canonicalization without further clarification."
    },
    "sympy__sympy-18810": {
        "input_bounce": false,
        "trace": "The bug report clearly demonstrates the incorrect behavior with examples (`'TRUMP'` vs. `'MPRTU'`) and explains that the generator is wrongly assuming its input is pre-sorted. The desired outcome (that generate_derangements should work for any input permutation order and exclude the identity arrangement) is evident. While implementation details aren\u2019t spelled out, the fix is unambiguous: remove or adjust the sorting assumption in the derangement algorithm. Thus it\u2019s reasonably specified for a straightforward patch."
    },
    "sympy__sympy-18835": {
        "input_bounce": false,
        "trace": "The issue clearly describes the undesired silent behavior, gives example code, and proposes a concrete fix (track initial list size and raise a RuntimeError if it changes). While you\u2019d need to find the uniq implementation in the codebase and decide on exact exception messages and test coverage, the requirements and desired behavior are unambiguous and actionable. "
    },
    "sympy__sympy-18903": {
        "input_bounce": true,
        "trace": "The issue simply states that nested floor/ceiling calls aren\u2019t fully simplified, shows a tiny REPL snippet, but gives no context (which system/language/library, where in the code, expected output vs. actual) or clear specification of the change required. There\u2019s not enough detail on the environment, API, or desired behavior to attempt a meaningful fix."
    },
    "sympy__sympy-18908": {
        "input_bounce": false,
        "trace": "The issue clearly states the goal\u2014extend SciPyPrinter to support additional special functions listed at the SciPy docs link. A developer can consult the linked list, compare against existing implementations in SciPyPrinter, and add the missing mappings. While it doesn\u2019t enumerate every function or show examples, it reasonably identifies the scope and approach, so it\u2019s REASONABLY_SPECIFIED."
    },
    "sympy__sympy-18922": {
        "input_bounce": true,
        "trace": "The issue description lacks any code snippets, library details or reproduction steps. We don\u2019t know what plotting commands were used or the intended vs actual behavior beyond a single screenshot. Without further context (e.g., code examples, environment, library version), it\u2019s unclear how to reproduce or fix, making the request too vague to tackle meaningfully."
    },
    "sympy__sympy-18961": {
        "input_bounce": false,
        "trace": "The issue clearly states the desired feature (adding a `bits` argument to `digits` for zero-padding), provides a concrete diff illustrating exactly where and how to change the code, and even indicates that tests should be added. There\u2019s a straightforward, unambiguous task to implement and verify this behavior."
    },
    "sympy__sympy-19007": {
        "input_bounce": false,
        "trace": "The report clearly shows the bug: BlockMatrix.__getitem__ eagerly simplifies C[i,0] to A[i,0], but when i is symbolic it could refer to A (for i=0) or B (for i>0). It gives a minimal example, current vs. intended behavior (\u201cshould not be simplified\u201d), and enough context to know where to change the code (in __getitem__). There\u2019s some detail left on the exact form of the unevaluated return, but it\u2019s straightforward to choose to return a BlockMatrixElement or defer evaluation. Hence it\u2019s reasonably specified."
    },
    "sympy__sympy-19016": {
        "input_bounce": false,
        "trace": "The request to implement is_finite_set on Range is clear: just add a @property that returns self.size.is_finite, and add tests. The follow-up about fixing sup/inf for symbolic endpoints is mentioned but lacks a clear spec for desired behavior. Overall there\u2019s enough here to start and deliver the is_finite_set feature, but the second part is underspecified."
    },
    "sympy__sympy-19040": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug, gives a minimal reproducible example with expected vs. actual output, and references related issues, so there is enough information to write a test and investigate the factor extension logic. However, it doesn\u2019t include any implementation hints or a proposed fix, so it isn\u2019t fully specified but is sufficient to begin development."
    },
    "sympy__sympy-19091": {
        "input_bounce": true,
        "trace": "The issue clearly identifies a bug in the ordering of tensor contraction vs. metric application and even pinpoints the relevant code, but it does not propose a concrete, self\u2010contained change or design for fixing it. Instead it calls for a broad refactor of the tensor representation without specifying how. That leaves too much ambiguity for a direct implementation."
    },
    "sympy__sympy-19093": {
        "input_bounce": false,
        "trace": "The issue clearly describes a regression (addition of two mutable BlockDiagMatrix objects no longer works), provides a minimal reproducible example, and states the expected behavior (it used to work in version 0.7.3). While implementation details are not provided, the defect and desired outcome are clear enough to attempt a fix."
    },
    "sympy__sympy-19201": {
        "input_bounce": false,
        "trace": "The issue clearly lays out current vs. desired slice-printing behavior with concrete examples, and points out a related parentheses bug. While you\u2019d need to hook into the appropriate printers in the codebase, the requirements and acceptance criteria are explicit enough to implement and test. A successful PR can directly target the shown cases."
    },
    "sympy__sympy-19254": {
        "input_bounce": true,
        "trace": "The issue states a high-level goal of replacing the Mignotte bound with the Knuth\u2013Cohen bound in two functions, but gives no details or formulas for the new bound, no pointers to the implementation or tests, and no concrete spec for multi-variable handling. It\u2019s too vague to implement without further information."
    },
    "sympy__sympy-19346": {
        "input_bounce": true,
        "trace": "The report points out odd behavior but never states what the correct `srepr` output should be for dicts and sets. Without specifying the expected representation, it\u2019s unclear what a proper fix would produce. Thus the request is too vague for a concrete implementation."
    },
    "sympy__sympy-19487": {
        "input_bounce": false,
        "trace": "The core request\u2014add a Sympy rewrite method for Sign so that `sign(x).rewrite(Abs)` returns `x/Abs(x)`\u2014is clear. The only open point is how to treat the x=0 case (e.g. keep 0 or switch to NaN, or guard via Piecewise). That design decision can be reasonably addressed in code review or discussion. Thus the ticket is reasonably specified."
    },
    "sympy__sympy-19495": {
        "input_bounce": false,
        "trace": "The report provides concrete, minimal reproducible examples (with in\u2010 and out\u2010puts), clearly states the expected vs. actual behavior, and references a related issue. This is sufficient detail to diagnose and implement a fix."
    },
    "sympy__sympy-19601": {
        "input_bounce": true,
        "trace": "The issue is a request for a new release (v1.6.1) rather than a concrete bug or feature with actionable steps. There\u2019s no clear specification of code changes to make or tests to update\u2014it\u2019s simply a question about release timing. Thus it\u2019s too vague to act on without further clarification from maintainers."
    },
    "sympy__sympy-19637": {
        "input_bounce": true,
        "trace": "The report only shows an import, a one-line call and an UnboundLocalError; it doesn\u2019t include the implementation of kernS, the Sympy version, expected behavior, or any context about how kern should be set. Without those details it\u2019s unclear what the function is meant to do or how to fix it. This makes the issue too vague to act on directly."
    },
    "sympy__sympy-19783": {
        "input_bounce": false,
        "trace": "The report clearly shows the undesired behavior (Dagger(A) * IdentityOperator remains unsimplified) and the expected result (it should simplify to Dagger(A), just as A * Identity simplifies to A). While it doesn\u2019t provide implementation details or tests, the goal is straightforward and there is a clear interpretation of the fix needed (add a simplification rule for Dagger \u00d7 IdentityOperator)."
    },
    "sympy__sympy-19885": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example (code snippet plus a test archive), the exact functions in question (`linsolve` vs. `solve`), the input system of equations, and an illustration of the wrong output. This gives a contributor everything needed to reproduce the issue and write a failing test, so it is well\u2010specified."
    },
    "sympy__sympy-19954": {
        "input_bounce": false,
        "trace": "The report includes the environment, Sympy version, minimal reproducible code, the exact traceback and the expected behavior (sylow_subgroup should return a subgroup rather than crash). This is enough detail to reproduce and diagnose the IndexError, making it well-specified."
    },
    "sympy__sympy-20049": {
        "input_bounce": false,
        "trace": "The issue gives a clear code example, shows the current failure, and states precisely what the behavior should be (compute r.dt(A) when no explicit velocity is set). There\u2019s no ambiguity about inputs, outputs, or where to hook the change, so a contributor can jump straight in and implement the fallback in Point.vel()."
    },
    "sympy__sympy-20139": {
        "input_bounce": true,
        "trace": "The issue merely states \u201cUse Str instead of Symbol for name of MatrixSymbol\u201d and has no detail on what to change where, how to handle conversions, tests, or existing behavior. Key sections (description, examples, tests) are empty, so it\u2019s unclear what a complete solution should look like."
    },
    "sympy__sympy-20154": {
        "input_bounce": false,
        "trace": "The issue clearly states that the partitions() generator reuses the same dict for each yielded value and that this is confusing. The requested change\u2014making partitions() yield a fresh copy of the dict rather than the same object\u2014is straightforward. While you still need to locate the function in sympy.utilities.iterables and update the yield calls and docstring, there\u2019s no ambiguity about what constitutes a correct fix."
    },
    "sympy__sympy-20169": {
        "input_bounce": true,
        "trace": "The issue simply states that the existing implementation only handles thin lenses and that it \u201cshould also work\u201d for plano-convex, plano-concave, and thick lenses, but it provides no detail about the code context, function signatures, required input/output formats, or the exact formulas and parameter definitions to use (e.g. thickness, radii sign conventions, refractive index). There is too much ambiguity around what needs changing and how success is measured, so it\u2019s too vague to act on without clarification."
    },
    "sympy__sympy-20264": {
        "input_bounce": false,
        "trace": "The report clearly identifies the version, the exact failing code paths (cases with a Rational base of \u00b11 in the numerator and an exponent of \u20131), provides minimal repro steps and outputs (including working cases for comparison), and shows the recursion trace. From the pattern of the working examples one can infer the intended LaTeX output. This is sufficient to scope and implement a fix in the LaTeX printer."
    },
    "sympy__sympy-20428": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducer, points out exactly which representation is wrong (DMP([0],EX,None) vs DMP([],EX,None)), and describes the undesirable downstream effects and the expected behavior. From this you can write a failing test and a fix (strip the leading zero in clear_denoms or in DMP initialization). Everything needed for a patch is present."
    },
    "sympy__sympy-20438": {
        "input_bounce": true,
        "trace": "The report shows that for two identical sets b (a ProductSet) and c (a FiniteSet of pairs), b.is_subset(c) returns None while c.is_subset(b) returns True, and also that calling simplify on Eq(b, c) raises an AttributeError. However, it doesn\u2019t clearly define which of these issues should be fixed (is_subset, simplify logic, rewrite behavior), what the expected API is, or how broadly the fix should apply. The scope of the intended change is unclear, so a meaningful PR can\u2019t be scoped precisely without clarification."
    },
    "sympy__sympy-20442": {
        "input_bounce": true,
        "trace": "The report clearly shows an unexpected result when converting J\u00b7s to J, but it doesn\u2019t pin down the desired behavior or API change: should convert_to throw an error on mismatched dimensions, return the original expression, or expand to base units? Because the issue doesn\u2019t specify which of these to implement (or how to choose between them), there\u2019s too much ambiguity to write a precise solution."
    },
    "sympy__sympy-20565": {
        "input_bounce": false,
        "trace": "The report clearly identifies a concrete bug (Rationals.contains(0.5) returns False but should return True) and states the intended behavior (\u201cRationals should contain all floating\u2010point numbers\u201d). While you may need to decide how to treat infinities/nan, there is a straightforward, unambiguous implementation path (e.g. detect Float inputs and convert via as_integer_ratio or similar). Thus it\u2019s sufficiently specified for a meaningful PR."
    },
    "sympy__sympy-20590": {
        "input_bounce": false,
        "trace": "The report clearly describes a regression (Symbols now have __dict__ since v1.7, previously they did not) and a desired outcome (re-add __slots__ so that __dict__ isn\u2019t created). It doesn\u2019t point to the exact class in need of change, but there\u2019s a sensible path: locate which base class dropped __slots__ and restore it. That makes it reasonably specified, though some investigation will be needed to find the precise spot to fix."
    },
    "sympy__sympy-20639": {
        "input_bounce": false,
        "trace": "The report clearly states the version, shows minimal reproducible code, the incorrect pretty\u2010printed output, and contrasts it with the correct LaTeX and str outputs. The bug lies in the pretty printer\u2019s handling of the exponent 1/E, which is specific enough to implement a fix."
    },
    "sympy__sympy-20741": {
        "input_bounce": false,
        "trace": "The issue includes concrete code examples showing that simplify() and expand() on matrix expressions do not collapse to the zero matrix as expected. It references a specific GitHub issue and demonstrates the faulty behavior. While it doesn\u2019t spell out the exact desired return value, it\u2019s clear that expressions like -(-A + B) - A + B should simplify to ZeroMatrix(m, n). This is enough for a developer familiar with SymPy\u2019s simplify/expand internals to implement a fix."
    },
    "sympy__sympy-20801": {
        "input_bounce": false,
        "trace": "The report includes reproducible examples showing asymmetric behavior, references related issues, and states the desired outcome (make S(0.0) == S.false evaluate to True both ways). A developer can jump in and implement symmetric equality for Float vs Boolean. This is a clearly defined bug with an obvious expected fix."
    },
    "sympy__sympy-20916": {
        "input_bounce": true,
        "trace": "The issue statement is too brief and lacks context: there\u2019s no mention of the specific code or module where unicode printing is implemented, no reproduction steps or environment details, and no guidance on how the subscript handling should be integrated or tested. Without that information, it\u2019s unclear how to proceed toward a concrete fix."
    },
    "sympy__sympy-21101": {
        "input_bounce": true,
        "trace": "The report notes that `latex(Mul(6, S.Half, evaluate=False))` emits \u201c6 1/2\u201d without the usual number-separating space, but it never states what the correct LaTeX string should look like or how much spacing is expected. It assumes familiarity with internal printer settings (\u201cnumbersep\u201d) but gives no example of the desired output. Without an explicit \u201cexpected vs. actual\u201d or a precise spec for the spacing, it\u2019s unclear what code change will satisfy the report. Thus it\u2019s too vague to implement directly."
    },
    "sympy__sympy-21171": {
        "input_bounce": false,
        "trace": "The bug report provides clear reproduction steps, the exact error traceback, and identifies that _print_SingularityFunction is missing the 'exp' parameter. A maintainer can locate that method in printing/latex.py and update its signature (and handling) to accept exp. The requirements for a fix are unambiguous."
    },
    "sympy__sympy-21208": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example with explicit code, observed outputs, and a clear question (is this a bug or expected behavior?). It\u2019s straightforward to reproduce and reason about, so the issue is WELL_SPECIFIED."
    },
    "sympy__sympy-21260": {
        "input_bounce": false,
        "trace": "The report comes with a minimal reproducer, shows actual vs. expected behavior (simplify(s\u2013x) should give 0 even if s was unpickled and hence a different object), and points out exactly where the logic breaks (simplify is using object identity rather than Symbol.__eq__). That is enough to write a concrete PR to fix the simplify/add logic or the unpickling of Symbol, so it\u2019s well-specified."
    },
    "sympy__sympy-21271": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a failed doctest in sympy/physics/vector/frame.py (ReferenceFrame.orient_space_fixed), shows the exact expected vs. actual output, and points to the disabled test. While it doesn\u2019t prescribe the precise code change, it\u2019s clear what needs to be fixed (i.e. ensuring the DCM elements get fully simplified to the nicer sine/cosine form). Given this, an engineer can reasonably locate the function, understand the failure, and implement the needed trigsimp or simplify calls. Thus it\u2019s reasonably specified."
    },
    "sympy__sympy-21286": {
        "input_bounce": true,
        "trace": "The issue describes a mismatch between numeric and symbolic canonicalization of Range, shows some examples of wrong behavior, and hints at wanting the same ceil\u2010based normalization for symbolic args. However, the examples for the symbolic case are inconsistent (e.g. suggesting sup = i+1 when by the numeric rule it should be i+5), and the precise intended canonical formula for symbolic Ranges is never spelled out. That ambiguity around the expected normalization makes it unclear how to implement a correct fix."
    },
    "sympy__sympy-21313": {
        "input_bounce": false,
        "trace": "The ticket clearly describes the unexpected behavior, provides minimal reproducible examples, explains why the current canonicalization using Float modulo is wrong, and even sketches the desired approach (skip modulo for Floats). There\u2019s no ambiguity about what needs to change in SymPy\u2019s ImageSet canonicalization logic. This is WELL_SPECIFIED."
    },
    "sympy__sympy-21370": {
        "input_bounce": true,
        "trace": "The issue simply shows that minpoly raises NotImplementedError on a complicated algebraic expression but gives no guidance on the desired minimal polynomial, what factors to choose, or how success should look. There\u2019s no spec for how to handle multiple candidates or what the correct output is, so it\u2019s too under\u2010specified to attempt a meaningful fix."
    },
    "sympy__sympy-21379": {
        "input_bounce": false,
        "trace": "The report comes with a minimal reproducible example, clear Sympy version, exact steps to reproduce the error, expected versus actual behavior, and notes on which variations do or do not trigger the bug. A developer can directly run the MWE, inspect the `subs` code paths for `Piecewise` and hyperbolic functions, and verify the conditions. That makes it well-specified for a fix."
    },
    "sympy__sympy-21436": {
        "input_bounce": false,
        "trace": "The report clearly defines the unwanted behavior (orient() always clears all existing frame links), gives concrete examples of current vs. desired behavior (including the reversal and loop\u2010detection cases), and even points to the specific dcm_dict clearing. You can sensibly interpret the fix as: stop the blanket clear, only remove existing direct neighbors when explicitly re\u2010orienting a pair, and raise on any indirect \u201cloop\u201d link, leaving all other links intact. While the precise graph\u2010update algorithm will need to be designed and may require iterating on edge cases, there is a clear, coherent target and examples. This is \u2018reasonably specified\u2019 \u2014 you know what to change and what tests to add, even if you\u2019ll need to flesh out some details of the adjacency\u2010update logic."
    },
    "sympy__sympy-21476": {
        "input_bounce": false,
        "trace": "The report provides a minimal reproducible example, the exact exception and stack trace, and even pinpoints the suspicious comparison between CoordSystem objects and string keys in the Dijkstra path-building logic. The desired behavior (indirect transforms should route through the intermediate system instead of raising) is clear. A developer has all the information needed to implement and verify a fix."
    },
    "sympy__sympy-21527": {
        "input_bounce": false,
        "trace": "The report includes concrete, minimal code examples that reproduce the inconsistent behavior, and it\u2019s clear that all three test cases should return the trivial solution (0,0). The expected behavior is unambiguous, so no further clarification is needed to attempt a fix."
    },
    "sympy__sympy-21567": {
        "input_bounce": false,
        "trace": "The issue clearly states that expand_trig currently handles csc and sec by expanding their denominators into sin/cos, and that analogous behavior should be added for the hyperbolic csch and sech. The intended expansions follow directly from the addition formulas for sinh and cosh (i.e.\ncsch(x+y) \u2192 1/(sinh(x)*cosh(y) + cosh(x)*sinh(y)),\nsech(x+y) \u2192 1/(cosh(x)*cosh(y) + sinh(x)*sinh(y))). There is sufficient detail and examples to implement and test the change."
    },
    "sympy__sympy-21586": {
        "input_bounce": false,
        "trace": "The report includes a minimal, self-contained code example showing the Sympy parse_expr behavior (with and without a local_dict), the exact mismatch between actual and expected results, and the expected outcome. It\u2019s immediately reproducible and clearly states what needs to change, so it\u2019s well specified for implementation."
    },
    "sympy__sympy-21596": {
        "input_bounce": false,
        "trace": "The report includes concrete REPL examples showing the incorrect behavior, the desired corrected output, and a clear description of the intersection logic that\u2019s failing. That gives enough detail to write a failing test and implement the fix."
    },
    "sympy__sympy-21612": {
        "input_bounce": false,
        "trace": "The issue clearly defines the buggy behavior (nested \\frac parsing drops necessary grouping), shows the malformed output vs. the expected output, includes reproducible code examples, and lists tested versions. A contributor can implement and verify the correct bracket insertion for nested fractions without additional context."
    },
    "sympy__sympy-21614": {
        "input_bounce": false,
        "trace": "The bug report clearly shows the current and expected behavior: Derivative(A, x).kind should propagate the MatrixKind(NumberKind) from A just like Integral does. It\u2019s obvious what change is needed (have Derivative.kind return the argument\u2019s kind), so the issue is well-specified."
    },
    "sympy__sympy-21627": {
        "input_bounce": false,
        "trace": "The report gives a minimal reproducible example, shows the exact error, and pinpoints it to `expr.is_zero` on a nested `cosh(acos(...acosh...))`. While it doesn\u2019t state the exact expected return (presumably `False` or `None` rather than a crash), there\u2019s enough detail to reproduce and begin debugging the recursion in the `is_zero` logic. Thus it\u2019s reasonably specified."
    },
    "sympy__sympy-21769": {
        "input_bounce": false,
        "trace": "The issue includes a clear problem statement, minimal reproducible example, actual vs expected behavior, relevant code location, and even a proposed one-line fix. It\u2019s easy to understand the goal and implement the solution."
    },
    "sympy__sympy-21847": {
        "input_bounce": false,
        "trace": "The report includes a minimal repro (code snippet), clearly states the expected and actual behavior, cites the documentation, and shows how the bug manifests for different parameters. There\u2019s no ambiguity about what the function should do or how to test it, so it\u2019s well-specified."
    },
    "sympy__sympy-21849": {
        "input_bounce": false,
        "trace": "The report includes clear reproduction steps, example code, and the full traceback showing exactly where the Latex printer for LambertW is missing the \u201cexp\u201d parameter. It\u2019s obvious what to change (update _print_LambertW signature to accept an exp kwarg and format powers correctly), so it\u2019s well-specified."
    },
    "sympy__sympy-21930": {
        "input_bounce": false,
        "trace": "The report clearly describes the broken LaTeX output, provides a minimal reproducible example, and specifies the desired output format (wrapping the daggered operator in braces before applying the exponent). A developer can locate the printing logic in the secondquant module and implement the brace-wrapping fix. The success criteria (correct LaTeX string) are unambiguous."
    },
    "sympy__sympy-21932": {
        "input_bounce": false,
        "trace": "The report gives a clear minimal reproduction (calling imageset on a Range) and the exact exception encountered. While the desired behavior (producing the set of mapped values) is implied rather than spelled out, it\u2019s easy to infer what \u201cshould\u201d happen and how to fix it (e.g. make Range work with imageset by providing a size or iteration support). Hence it\u2019s reasonably specified."
    },
    "sympy__sympy-21952": {
        "input_bounce": true,
        "trace": "The issue mixes a feature request for enhanced even/odd detection in SymPy with questions about GitHub workflow, without a clear, concrete specification of the algorithm, API changes, or tests. It lacks precise requirements and is therefore too ambiguous to implement directly."
    },
    "sympy__sympy-22005": {
        "input_bounce": false,
        "trace": "The issue clearly identifies a missing check for infinite solution systems in solve_poly_system, provides failing examples, shows exactly where and how to change the code, and includes tests to cover the new behavior. It\u2019s straightforward to implement the suggested diff and verify with the provided tests."
    },
    "sympy__sympy-22080": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, a clear description of what is wrong (the unary minus is being applied to the wrong operand when printing with the `%` operator under `modules=[]`), and shows both the incorrect generated code and the expected behavior. That gives all the information needed to locate the printer for `Mod` in SymPy\u2019s lambdify machinery and adjust its precedence/parenthesization. This is WELL_SPECIFIED."
    },
    "sympy__sympy-22098": {
        "input_bounce": false,
        "trace": "The report gives minimal reproducible examples, shows actual vs. expected behavior for parse_expr(evaluate=False), and specifies the environment. It clearly defines the bug (evaluate isn\u2019t propagated under sqrt) and the desired outcome, so it\u2019s actionable."
    },
    "sympy__sympy-22236": {
        "input_bounce": false,
        "trace": "The report clearly shows the inconsistent printout for unevaluated Mul when an Add is first vs. second operand, provides minimal reproducing code, and states the desired behavior (wrap the Add in brackets). A developer could implement and test a fix in the printer without needing further clarification."
    },
    "sympy__sympy-22383": {
        "input_bounce": false,
        "trace": "The issue clearly states that CI testing for Python 3.6 and PyPy 3.6 should be removed, referencing NEP 29 and the related issue #21884. It\u2019s straightforward to implement by updating the CI configuration (e.g., GitHub Actions, Travis, etc.) to drop those versions. There\u2019s a clear expected outcome and no ambiguity about what needs to be done."
    },
    "sympy__sympy-22456": {
        "input_bounce": false,
        "trace": "The issue clearly states which class (codegen.ast String) needs to support the standard Basic invariance expr.func(*expr.args) == expr instead of only using **kwargs, and specifies the exact behavior to add. While it doesn\u2019t include code snippets or point to exact lines, it\u2019s straightforward to locate the String class in codegen/ast.py and adjust its constructor to treat its string value as a positional argument. There\u2019s no ambiguity about what must be done, so it\u2019s reasonably specified."
    },
    "sympy__sympy-22706": {
        "input_bounce": false,
        "trace": "The issue provides a clear reproduction case with the exact code snippet that triggers the IndexError in the StrPrinter for an unevaluated Mul, including the full error message. While it doesn\u2019t explicitly state the expected output, it\u2019s obvious that the printer should not crash and should instead render the expression (e.g. \u201cx**(-2)*3**(-1)\u201d). A developer can replicate the failure, find the call to _coeff_isneg, and add the necessary guard. Thus it\u2019s specified enough for a meaningful attempt at a fix."
    },
    "sympy__sympy-22714": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproduction (with code snippet and error trace) and explicitly states the expected behavior (that with evaluate(False) the call should not crash, matching sp.S('\u2026', evaluate=False)). While you\u2019ll need to dig into how evaluate(False) is wired through sympify/parse_expr, there\u2019s a clear bug to fix and a clear success condition, so this is reasonably specified."
    },
    "sympy__sympy-22740": {
        "input_bounce": false,
        "trace": "The report includes minimal reproduction steps, a clear failure scenario (lambdify on Heaviside(Min(x,y))), the root cause (ITE inside Piecewise leads to nested numpy.select with invalid condlist entries), and even a suggested remedy (detect ITE in Piecewise and rewrite conditions using Boolean And/Or or apply simplify). While it doesn\u2019t prescribe exactly which function to patch, it gives all the context a developer needs to write a test, trace through the lambdify pipeline, and add a preprocessing step on Piecewise to simplify away ITE. That makes it reasonably specified for implementation."
    },
    "sympy__sympy-22773": {
        "input_bounce": false,
        "trace": "The issue clearly states the incorrect behavior (determinant printed as |(A)|), the desired output (|A|), and even provides a working local patch. The scope (modify LatexPrinter\u2019s _print_Determinant) and expected result are unambiguous, so it\u2019s well-specified for a PR."
    },
    "sympy__sympy-22914": {
        "input_bounce": false,
        "trace": "The issue clearly states the missing functionality (Min and Max support in PythonCodePrinter), gives concrete examples of current and desired output, and even provides the exact methods to implement. It\u2019s unambiguous what needs to be done for a successful solution."
    },
    "sympy__sympy-22969": {
        "input_bounce": true,
        "trace": "The issue identifies a real problem (the beam waist formula ignores refractive index) and points to the exact code location, but it does not specify how the refractive index should be introduced, what API changes are required, or what the corrected formula should be. There\u2019s no clear specification of inputs/outputs or test cases. Without additional details, a meaningful PR cannot be scoped, so the ticket is too vague."
    },
    "sympy__sympy-23021": {
        "input_bounce": false,
        "trace": "The issue clearly describes the failure of decompogen on Min/Max, provides a before-and-after example (input and expected output), and specifies that Min/Max support should be added. There\u2019s enough detail (error trace, desired behavior) to implement and test a solution."
    },
    "sympy__sympy-23262": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, clearly states the regression between SymPy 1.9 and 1.10, shows actual vs expected output, and defines the desired behavior (including the trailing comma for single\u2010element tuples). It is clear what needs to be changed in the code printer, so the issue is well-specified."
    },
    "sympy__sympy-23296": {
        "input_bounce": false,
        "trace": "The report includes minimal reproducible code demonstrating the error, the exact failure message, the expected behavior, and points to the specific function (_collect_factor_and_dimension) that needs adjusting. That makes it clear what needs to be changed and how a correct solution should behave."
    },
    "sympy__sympy-23413": {
        "input_bounce": false,
        "trace": "The report gives a minimal, reproducible example (with exact code and data), shows the expected versus actual output, and clearly states the bug (rows being dropped by HNF). A fix simply needs to preserve all rows in the Hermite normal form under these flips/transposes. This is sufficient to implement and verify a correction."
    },
    "sympy__sympy-23534": {
        "input_bounce": false,
        "trace": "The report clearly states the Sympy version, shows minimal reproducible code, describes the expected vs actual behavior, and points to the documentation. It\u2019s straightforward to understand the problem and implement a fix in symbols parsing. Thus it\u2019s well-specified."
    },
    "sympy__sympy-23729": {
        "input_bounce": false,
        "trace": "The issue clearly describes the bug\u2014Julia\u2019s parser chokes on sequences like \u201c2.*\u201d because it can\u2019t disambiguate a float literal from the broadcast operator\u2014and shows the erroneous output and the error message. It also proposes a robust, simple fix of emitting spaces around binary operators by default (e.g. \u201c2 .* y\u201d). While the exact list of operators to space and formatting conventions aren\u2019t spelled out in exhaustive detail, there\u2019s a straightforward, sensible path to a solution. Thus it\u2019s reasonably specified for a PR implementation."
    },
    "sympy__sympy-23808": {
        "input_bounce": false,
        "trace": "The report gives a clear, minimal reproducible example (calling sum_of_squares on n and k), shows the exact recursion error and context, and points out that small inputs (like 10\u2076) should work. While it doesn\u2019t prescribe a specific fix or API change, it is straightforward to understand the bug (unbounded recursion) and what a correct solution should achieve (produce the sum-of-squares decomposition without overflow)."
    },
    "sympy__sympy-23824": {
        "input_bounce": false,
        "trace": "The report clearly describes what\u2019s wrong (leading uncontracted \u03b3-matrices are being reinserted in reverse order), provides minimal reproducible code illustrating the incorrect vs. expected behavior, points to the exact function (`kahane_simplify`) and even pinpoints the simple loop-order fix. This is sufficient for a direct implementation of the correction."
    },
    "sympy__sympy-23950": {
        "input_bounce": false,
        "trace": "The report clearly identifies that Contains.as_set wrongly returns a Contains object (a Boolean) rather than a Set, causing failures when code expects a Set with as_relational. You can reasonably infer that as_set should return the second argument (the Set operand) so that .as_relational(x) works again (e.g. Contains(x, S.Reals).as_set() \u2192 S.Reals). While the exact return value isn\u2019t spelled out in prose, it\u2019s straightforward to implement once you know the Sympy as_set convention, so this ticket is reasonably specified."
    },
    "sympy__sympy-24066": {
        "input_bounce": false,
        "trace": "The bug report clearly shows how to reproduce the issue, what the current (incorrect) behavior is, and what the expected behavior should be (i.e. that exp(a dimensionless quantity) yields a dimensionless result rather than raising). There is a straightforward, well-scoped change to SI._collect_factor_and_dimension (or its handling of transcendental functions) to detect and accept dimensionless exponents. This is sufficient to implement a fix."
    },
    "sympy__sympy-24102": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, shows the expected vs actual behavior, and clearly identifies that parse_mathematica should accept Unicode letters (e.g. Greek) just like the old mathematica() did. With access to the parser code, it\u2019s straightforward to adjust the tokenizer/grammar to include such characters. This is actionable and unambiguous."
    },
    "sympy__sympy-24213": {
        "input_bounce": false,
        "trace": "The report includes a minimal reproducible example, the exact failure, and the intended behavior\u2014i.e. recognizing that acceleration * time \u2261 velocity and thus allowing the add and collecting the combined scale factor. It\u2019s clear what needs to be fixed and how success is measured."
    },
    "sympy__sympy-24325": {
        "input_bounce": false,
        "trace": "The report clearly shows the wrong numeric result, the expected conversion factor, and even provides the updated test assertions. While it doesn\u2019t point at the exact source file line, the unit definitions and system are named, so a contributor can locate and correct the factor and update tests. This is enough to act on."
    },
    "sympy__sympy-24353": {
        "input_bounce": false,
        "trace": "The report clearly states the failure (ImportError for py.__.test.item), how to reproduce it (running bin/py.bench), and the py version in use. While it doesn\u2019t specify the Sympy version or environment in detail, it\u2019s straightforward to reproduce and to infer that imports need updating for newer py versions. Thus it\u2019s reasonably specified for implementing a fix."
    },
    "sympy__sympy-24370": {
        "input_bounce": false,
        "trace": "The issue includes a minimal reproducible example, the exact error traceback, and describes the unexpected versus expected behavior (it should handle symbolic floor division without error, as plain ints do). That makes it clear what needs to be fixed and verified."
    },
    "sympy__sympy-24443": {
        "input_bounce": false,
        "trace": "The issue provides a clear reproducible example, pinpoints the failing function and lines in the code, and describes the root cause (the `in gens` test rejects inverted generators). Although it doesn\u2019t include a full patch, there is enough detail to write and validate a fix, making it reasonably specified."
    },
    "sympy__sympy-24455": {
        "input_bounce": false,
        "trace": "The report includes a clear reproduction (creating \u201cunnamed\u201d S3 and seeing is_cyclic return True), points directly at the flawed algorithm in perm_groups.py (using only the pth powers of generators instead of all pth powers), and even sketches both the theoretical fix (use G^p rather than H_p) and a brute\u2010force fallback. You can locate the code, write a test, and implement the subgroup\u2010generation change. This is sufficiently detailed for a PR."
    },
    "sympy__sympy-24539": {
        "input_bounce": false,
        "trace": "The issue pinpoints a clear and narrow bug: PolyElement.as_expr() should allow the user to supply custom symbols but currently ignores them. It even cites the exact method, shows the code location, and provides a minimal example of expected vs actual behavior. A fix would entail adjusting as_expr to use the passed symbols when mapping ring generators to expression symbols. This is concrete and actionable, so it\u2019s WELL_SPECIFIED."
    },
    "sympy__sympy-24562": {
        "input_bounce": false,
        "trace": "The report gives concrete reproduction steps (call Rational('0.5', '100') under Python 3.11 + Sympy 1.11.1), shows the incorrect vs expected result, and even notes the behavior change from Sympy 1.8. That is sufficient to reproduce and diagnose the bug."
    },
    "sympy__sympy-24661": {
        "input_bounce": false,
        "trace": "The report clearly describes the bug (parse_expr with evaluate=False still evaluates relational expressions), shows concrete input/output examples, and specifies the correct expected behavior. A developer familiar with parse_expr can write a fix based on this information."
    },
    "sympy__sympy-24723": {
        "input_bounce": false,
        "trace": "The issue clearly shows the incorrect normalization constant, provides example code triggering the bug, the expected versus actual output, and a precise reference (Wikipedia formula) for what the correct PDF should be. A developer can locate the MatrixNormal implementation in the codebase and adjust the constant accordingly. No further clarification is needed."
    },
    "sympy__sympy-24909": {
        "input_bounce": false,
        "trace": "The report includes minimal reproducible code demonstrating the bug, clear current vs. expected behavior, environment details, and a straightforward fix goal (making milli*W yield a PrefixedUnit instead of 1). It\u2019s specific enough to implement and verify a solution."
    }
}